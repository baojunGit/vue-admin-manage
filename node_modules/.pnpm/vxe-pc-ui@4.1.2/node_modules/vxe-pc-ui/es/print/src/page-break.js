import { defineComponent, ref, h, reactive, inject, onMounted, onUnmounted } from 'vue';
import XEUtils from 'xe-utils';
import { assemblePageBreak, destroyPageBreak } from './util';
export default defineComponent({
    name: 'VxePrintPageBreak',
    props: {},
    emits: [],
    setup(props, context) {
        const { slots } = context;
        const xID = XEUtils.uniqueId();
        const $xePrint = inject('$xePrint', null);
        const refElem = ref();
        const reactData = reactive({});
        const refMaps = {
            refElem
        };
        const computeMaps = {};
        const pageBreakConfig = reactive({
            id: xID,
            slots
        });
        const $xePrintPageBreak = {
            xID,
            props,
            context,
            reactData,
            getRefMaps: () => refMaps,
            getComputeMaps: () => computeMaps
        };
        if (!$xePrint) {
            $xePrintPageBreak.renderVN = () => [];
            return $xePrintPageBreak;
        }
        const renderVN = () => {
            return h('div', {
                ref: refElem
            });
        };
        $xePrintPageBreak.renderVN = renderVN;
        onMounted(() => {
            if ($xePrint && refElem.value) {
                assemblePageBreak($xePrint, refElem.value, pageBreakConfig);
            }
        });
        onUnmounted(() => {
            if ($xePrint) {
                destroyPageBreak($xePrint, pageBreakConfig);
            }
        });
        return $xePrintPageBreak;
    },
    render() {
        return this.renderVN();
    }
});
