import { defineComponent, ref, h, reactive, createCommentVNode } from 'vue';
import XEUtils from 'xe-utils';
import { getConfig, useSize } from '../../ui';
import { getSlotVNs } from '../../ui/src/vn';
export default defineComponent({
    name: 'VxeTag',
    props: {
        status: String,
        title: [String, Number],
        icon: String,
        content: [String, Number],
        size: { type: String, default: () => getConfig().tag.size || getConfig().size }
    },
    emits: [],
    setup(props, context) {
        const { slots } = context;
        const xID = XEUtils.uniqueId();
        const { computeSize } = useSize(props);
        const refElem = ref();
        const reactData = reactive({});
        const refMaps = {
            refElem
        };
        const computeMaps = {};
        const $xeTag = {
            xID,
            props,
            context,
            reactData,
            getRefMaps: () => refMaps,
            getComputeMaps: () => computeMaps
        };
        const renderContent = () => {
            const { icon, content } = props;
            const defaultSlot = slots.default;
            const iconSlot = slots.icon;
            return [
                iconSlot || icon
                    ? h('span', {
                        class: 'vxe-tag--icon'
                    }, iconSlot
                        ? getSlotVNs(iconSlot({}))
                        : [
                            h('i', {
                                class: icon
                            })
                        ])
                    : createCommentVNode(),
                h('span', {
                    class: 'vxe-tag--content'
                }, defaultSlot ? defaultSlot({}) : XEUtils.toValueString(content))
            ];
        };
        const renderVN = () => {
            const { status, title } = props;
            const vSize = computeSize.value;
            return h('span', {
                ref: refElem,
                title,
                class: ['vxe-tag', {
                        [`size--${vSize}`]: vSize,
                        [`theme--${status}`]: status
                    }]
            }, renderContent());
        };
        $xeTag.renderVN = renderVN;
        return $xeTag;
    },
    render() {
        return this.renderVN();
    }
});
