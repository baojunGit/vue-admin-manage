import { defineComponent, ref, h, reactive, watch, inject, onMounted, onUnmounted } from 'vue';
import XEUtils from 'xe-utils';
import { assembleAnchorTab, destroyAnchorTab } from './util';
export default defineComponent({
    name: 'VxeTabPane',
    props: {
        title: [String, Number],
        name: [String, Number],
        icon: String,
        titleWidth: [String, Number],
        titleAlign: [String, Number],
        preload: Boolean,
        permissionCode: [String, Number]
    },
    emits: [],
    setup(props, context) {
        const { slots } = context;
        const xID = XEUtils.uniqueId();
        const refElem = ref();
        const $xeTabs = inject('$xeTabs', null);
        const reactData = reactive({});
        const tabConfig = reactive({
            id: xID,
            title: props.title,
            name: props.name,
            icon: props.icon,
            titleWidth: props.titleWidth,
            titleAlign: props.titleAlign,
            preload: props.preload,
            permissionCode: props.permissionCode,
            slots: {
                default: slots.default
            }
        });
        const refMaps = {
            refElem
        };
        const computeMaps = {};
        const $xeTabPane = {
            xID,
            props,
            context,
            reactData,
            getRefMaps: () => refMaps,
            getComputeMaps: () => computeMaps
        };
        watch(() => props.title, (val) => {
            tabConfig.title = val;
        });
        watch(() => props.name, (val) => {
            tabConfig.name = val;
        });
        watch(() => props.icon, (val) => {
            tabConfig.icon = val;
        });
        watch(() => props.permissionCode, (val) => {
            tabConfig.permissionCode = val;
        });
        onMounted(() => {
            if ($xeTabs && refElem.value) {
                assembleAnchorTab($xeTabs, refElem.value, tabConfig);
            }
        });
        onUnmounted(() => {
            if ($xeTabs) {
                destroyAnchorTab($xeTabs, tabConfig);
            }
        });
        const renderVN = () => {
            return h('div', {
                ref: refElem
            }, []);
        };
        $xeTabPane.renderVN = renderVN;
        return $xeTabPane;
    },
    render() {
        return this.renderVN();
    }
});
