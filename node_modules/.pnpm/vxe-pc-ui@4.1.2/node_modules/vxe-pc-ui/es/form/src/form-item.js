import { defineComponent, h, onUnmounted, inject, ref, provide, onMounted, createCommentVNode, reactive } from 'vue';
import XEUtils from 'xe-utils';
import { getIcon, getI18n, renderer } from '../../ui';
import { getFuncText, isEnableConf } from '../../ui/src/utils';
import { getSlotVNs } from '../../ui/src/vn';
import { createItem, watchItem, destroyItem, assembleItem, isActiveItem } from './util';
import { renderTitle } from './render';
export const formItemProps = {
    title: String,
    field: String,
    span: [String, Number],
    align: String,
    titleBold: {
        type: Boolean,
        default: null
    },
    titleAlign: {
        type: String,
        default: null
    },
    titleWidth: {
        type: [String, Number],
        default: null
    },
    titleColon: {
        type: Boolean,
        default: null
    },
    titleAsterisk: {
        type: Boolean,
        default: null
    },
    showTitle: {
        type: Boolean,
        default: true
    },
    vertical: {
        type: Boolean,
        default: null
    },
    padding: {
        type: Boolean,
        default: null
    },
    className: [String, Function],
    contentClassName: [String, Function],
    contentStyle: [Object, Function],
    titleClassName: [String, Function],
    titleStyle: [Object, Function],
    titleOverflow: {
        type: [Boolean, String],
        default: null
    },
    titlePrefix: Object,
    titleSuffix: Object,
    resetValue: { default: null },
    visibleMethod: Function,
    visible: { type: Boolean, default: null },
    folding: Boolean,
    collapseNode: Boolean,
    itemRender: Object,
    rules: Array
};
export default defineComponent({
    name: 'VxeFormItem',
    props: formItemProps,
    setup(props, { slots }) {
        const refElem = ref();
        const $xeForm = inject('$xeForm', {});
        const formGather = inject('$xeFormGather', null);
        const formItem = reactive(createItem($xeForm, props));
        formItem.slots = slots;
        const formItemInfo = { itemConfig: formItem };
        provide('xeFormItemInfo', formItemInfo);
        watchItem(props, formItem);
        onMounted(() => {
            assembleItem($xeForm, refElem.value, formItem, formGather);
        });
        onUnmounted(() => {
            destroyItem($xeForm, formItem);
        });
        const renderItem = ($xeForm, item) => {
            const { props, reactData } = $xeForm;
            const { data, rules, readonly, disabled, titleBold: allTitleBold, titleAlign: allTitleAlign, titleWidth: allTitleWidth, titleColon: allTitleColon, titleAsterisk: allTitleAsterisk, titleOverflow: allTitleOverflow, vertical: allVertical, padding: allPadding } = props;
            const { collapseAll } = reactData;
            const { computeValidOpts } = $xeForm.getComputeMaps();
            const validOpts = computeValidOpts.value;
            const { slots, title, visible, folding, field, collapseNode, itemRender, showError, errRule, className, titleOverflow, vertical, padding, showTitle, contentClassName, contentStyle, titleClassName, titleStyle } = item;
            const compConf = isEnableConf(itemRender) ? renderer.get(itemRender.name) : null;
            const itemClassName = compConf ? (compConf.formItemClassName || compConf.itemClassName) : '';
            const itemStyle = compConf ? (compConf.formItemStyle || compConf.itemStyle) : null;
            const itemContentClassName = compConf ? (compConf.formItemContentClassName || compConf.itemContentClassName) : '';
            const itemContentStyle = compConf ? (compConf.formItemContentStyle || compConf.itemContentStyle) : null;
            const itemTitleClassName = compConf ? (compConf.formItemTitleClassName || compConf.itemTitleClassName) : '';
            const itemTitleStyle = compConf ? (compConf.formItemTitleStyle || compConf.itemTitleStyle) : null;
            const defaultSlot = slots ? slots.default : null;
            const titleSlot = slots ? slots.title : null;
            const span = item.span || props.span;
            const align = item.align || props.align;
            const itemPadding = XEUtils.eqNull(padding) ? allPadding : padding;
            const itemVertical = XEUtils.eqNull(vertical) ? allVertical : vertical;
            const titleBold = XEUtils.eqNull(item.titleBold) ? allTitleBold : item.titleBold;
            const titleAlign = XEUtils.eqNull(item.titleAlign) ? allTitleAlign : item.titleAlign;
            const titleWidth = itemVertical ? null : (XEUtils.eqNull(item.titleWidth) ? allTitleWidth : item.titleWidth);
            const titleColon = XEUtils.eqNull(item.titleColon) ? allTitleColon : item.titleColon;
            const titleAsterisk = XEUtils.eqNull(item.titleAsterisk) ? allTitleAsterisk : item.titleAsterisk;
            const itemOverflow = XEUtils.eqNull(titleOverflow) ? allTitleOverflow : titleOverflow;
            const ovEllipsis = itemOverflow === 'ellipsis';
            const ovTitle = itemOverflow === 'title';
            const ovTooltip = itemOverflow === true || itemOverflow === 'tooltip';
            const hasEllipsis = ovTitle || ovTooltip || ovEllipsis;
            const params = { data, disabled, readonly, field, property: field, item, $form: $xeForm, $grid: $xeForm.xegrid };
            let isRequired = false;
            let isValid = false;
            if (visible === false) {
                return createCommentVNode();
            }
            if (!readonly && rules) {
                const itemRules = rules[field];
                if (itemRules && itemRules.length) {
                    isValid = true;
                    isRequired = itemRules.some((rule) => rule.required);
                }
            }
            let contentVNs = [];
            const rftContent = compConf ? (compConf.renderFormItemContent || compConf.renderItemContent) : null;
            if (defaultSlot) {
                contentVNs = $xeForm.callSlot(defaultSlot, params);
            }
            else if (rftContent) {
                contentVNs = getSlotVNs(rftContent(itemRender, params));
            }
            else if (field) {
                contentVNs = [`${XEUtils.get(data, field)}`];
            }
            if (collapseNode) {
                contentVNs.push(h('div', {
                    class: 'vxe-form--item-trigger-node',
                    onClick: $xeForm.toggleCollapseEvent
                }, [
                    h('span', {
                        class: 'vxe-form--item-trigger-text'
                    }, collapseAll ? getI18n('vxe.form.unfolding') : getI18n('vxe.form.folding')),
                    h('i', {
                        class: ['vxe-form--item-trigger-icon', collapseAll ? getIcon().FORM_FOLDING : getIcon().FORM_UNFOLDING]
                    })
                ]));
            }
            if (errRule && validOpts.showMessage) {
                contentVNs.push(h('div', {
                    class: 'vxe-form--item-valid',
                    style: errRule.maxWidth
                        ? {
                            width: `${errRule.maxWidth}px`
                        }
                        : null
                }, errRule.message));
            }
            const ons = ovTooltip
                ? {
                    onMouseenter(evnt) {
                        $xeForm.triggerTitleTipEvent(evnt, params);
                    },
                    onMouseleave: $xeForm.handleTitleTipLeaveEvent
                }
                : {};
            return h('div', {
                ref: refElem,
                class: [
                    'vxe-form--item',
                    item.id,
                    span ? `vxe-form--item-col_${span} is--span` : '',
                    className ? (XEUtils.isFunction(className) ? className(params) : className) : '',
                    itemClassName ? (XEUtils.isFunction(itemClassName) ? itemClassName(params) : itemClassName) : '',
                    {
                        'is--title': title,
                        'is--colon': titleColon,
                        'is--bold': titleBold,
                        'is--padding': itemPadding,
                        'is--vertical': itemVertical,
                        'is--asterisk': titleAsterisk,
                        'is--valid': isValid,
                        'is--required': isRequired,
                        'is--hidden': folding && collapseAll,
                        'is--active': isActiveItem($xeForm, item),
                        'is--error': showError
                    }
                ],
                style: XEUtils.isFunction(itemStyle) ? itemStyle(params) : itemStyle
            }, [
                h('div', {
                    class: 'vxe-form--item-inner'
                }, [
                    (showTitle !== false) && (title || titleSlot)
                        ? h('div', Object.assign({ class: [
                                'vxe-form--item-title',
                                titleAlign ? `align--${titleAlign}` : '',
                                hasEllipsis ? 'is--ellipsis' : '',
                                itemTitleClassName ? (XEUtils.isFunction(itemTitleClassName) ? itemTitleClassName(params) : itemTitleClassName) : '',
                                titleClassName ? (XEUtils.isFunction(titleClassName) ? titleClassName(params) : titleClassName) : ''
                            ], style: Object.assign({}, XEUtils.isFunction(itemTitleStyle) ? itemTitleStyle(params) : itemTitleStyle, XEUtils.isFunction(titleStyle) ? titleStyle(params) : titleStyle, titleWidth
                                ? {
                                    width: isNaN(titleWidth) ? titleWidth : `${titleWidth}px`
                                }
                                : null), title: ovTitle ? getFuncText(title) : null }, ons), renderTitle($xeForm, item))
                        : null,
                    h('div', {
                        class: [
                            'vxe-form--item-content',
                            align ? `align--${align}` : '',
                            itemContentClassName ? (XEUtils.isFunction(itemContentClassName) ? itemContentClassName(params) : itemContentClassName) : '',
                            contentClassName ? (XEUtils.isFunction(contentClassName) ? contentClassName(params) : contentClassName) : ''
                        ],
                        style: Object.assign({}, XEUtils.isFunction(itemContentStyle) ? itemContentStyle(params) : itemContentStyle, XEUtils.isFunction(contentStyle) ? contentStyle(params) : contentStyle)
                    }, contentVNs)
                ])
            ]);
        };
        const renderVN = () => {
            const formProps = $xeForm ? $xeForm.props : null;
            return formProps && formProps.customLayout
                ? renderItem($xeForm, formItem)
                : h('div', {
                    ref: refElem
                });
        };
        const $xeFormitem = {
            formItem,
            renderVN
        };
        provide('$xeFormItem', $xeFormitem);
        provide('$xeFormGather', null);
        return $xeFormitem;
    },
    render() {
        return this.renderVN();
    }
});
