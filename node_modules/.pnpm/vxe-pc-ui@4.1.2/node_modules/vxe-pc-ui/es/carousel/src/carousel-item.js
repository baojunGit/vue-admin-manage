import { defineComponent, ref, h, reactive, inject, watch, onMounted, onUnmounted } from 'vue';
import { assembleCarouselItem, destroyCarouselItem } from './util';
import XEUtils from 'xe-utils';
export default defineComponent({
    name: 'VxeCarouselItem',
    props: {
        name: String,
        className: String,
        url: String
    },
    emits: [],
    setup(props, context) {
        const { slots } = context;
        const $xeCarousel = inject('$xeCarousel', null);
        const xID = XEUtils.uniqueId();
        const refElem = ref();
        const reactData = reactive({});
        const itemConfig = reactive({
            id: xID,
            name: props.name,
            url: props.url,
            className: props.className,
            slots
        });
        const refMaps = {
            refElem
        };
        const computeMaps = {};
        const $xeCarouselItem = {
            xID,
            props,
            context,
            reactData,
            getRefMaps: () => refMaps,
            getComputeMaps: () => computeMaps
        };
        const renderVN = () => {
            return h('div', {
                ref: refElem
            });
        };
        watch(() => props.name, (val) => {
            itemConfig.name = val;
        });
        watch(() => props.url, (val) => {
            itemConfig.url = val;
        });
        onMounted(() => {
            if ($xeCarousel && refElem.value) {
                assembleCarouselItem($xeCarousel, refElem.value, itemConfig);
            }
        });
        onUnmounted(() => {
            if ($xeCarousel) {
                destroyCarouselItem($xeCarousel, itemConfig);
            }
        });
        $xeCarouselItem.renderVN = renderVN;
        return $xeCarouselItem;
    },
    render() {
        return this.renderVN();
    }
});
