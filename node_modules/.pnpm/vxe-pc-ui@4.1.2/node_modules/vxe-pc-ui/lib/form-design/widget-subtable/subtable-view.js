"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WidgetSubtableViewComponent = exports.WidgetSubtableEditComponent = void 0;
var _vue = require("vue");
var _core = require("@vxe-ui/core");
var _xeUtils = _interopRequireDefault(require("xe-utils"));
var _util = require("../src/util");
var _vn = require("../../ui/src/vn");
var _use = require("../../form-design/src/use");
var _formItem = _interopRequireDefault(require("../../form/src/form-item"));
var _button = _interopRequireDefault(require("../../button/src/button"));
var _checkbox = _interopRequireDefault(require("../../checkbox/src/checkbox"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ViewSubItemComponent = (0, _vue.defineComponent)({
  props: {
    parentWidget: {
      type: Object,
      default: () => ({})
    },
    widget: {
      type: Object,
      default: () => ({})
    }
  },
  emits: [],
  setup(props) {
    const $xeFormDesign = (0, _vue.inject)('$xeFormDesign', null);
    const $xeFormView = (0, _vue.inject)('$xeFormView', null);
    if (!$xeFormDesign) {
      return () => [];
    }
    const {
      reactData: formDesignReactData
    } = $xeFormDesign;
    const sortDragstartEvent = evnt => {
      evnt.stopPropagation();
      const {
        widgetObjList
      } = formDesignReactData;
      const divEl = evnt.currentTarget;
      const widgetId = Number(divEl.getAttribute('data-widget-id'));
      const currRest = _xeUtils.default.findTree(widgetObjList, item => item && item.id === widgetId, {
        children: 'children'
      });
      if (currRest) {
        formDesignReactData.dragWidget = null;
        formDesignReactData.sortSubWidget = currRest.item;
        formDesignReactData.sortSubWidget = currRest.item;
      }
    };
    const sortDragendEvent = evnt => {
      evnt.stopPropagation();
      formDesignReactData.activeWidget = formDesignReactData.sortSubWidget;
      formDesignReactData.sortWidget = null;
    };
    let isDragAnimate = false;
    const sortDragenterEvent = evnt => {
      const {
        sortSubWidget
      } = formDesignReactData;
      if (sortSubWidget) {
        evnt.stopPropagation();
      }
      if (isDragAnimate) {
        evnt.preventDefault();
        return;
      }
      const {
        widget,
        parentWidget
      } = props;
      if (parentWidget && widget && sortSubWidget && widget.id !== sortSubWidget.id) {
        evnt.preventDefault();
        const subList = parentWidget.children.map(item => item);
        if (!subList.length) {
          parentWidget.children.push(sortSubWidget);
          isDragAnimate = false;
          return;
        }
        const targetIndex = _xeUtils.default.findIndexOf(subList, item => item.id === widget.id);
        if (targetIndex > -1) {
          const sortIndex = _xeUtils.default.findIndexOf(subList, item => item.id === sortSubWidget.id);
          if (sortIndex > -1) {
            // 控件换位置
            subList[sortIndex] = widget;
            subList[targetIndex] = sortSubWidget;
            parentWidget.children = subList;
            isDragAnimate = true;
            $xeFormDesign.dispatchEvent('drag-widget', {
              widget: sortSubWidget
            }, evnt);
            setTimeout(() => {
              isDragAnimate = false;
            }, 150);
          }
        }
      }
    };
    const handleDragoverSubItem = evnt => {
      const {
        sortSubWidget
      } = formDesignReactData;
      if (sortSubWidget) {
        evnt.preventDefault();
      }
    };
    const handleClickEvent = evnt => {
      const {
        widget
      } = props;
      if (widget) {
        formDesignReactData.sortSubWidget = widget;
        $xeFormDesign.handleClickWidget(evnt, widget);
      }
    };
    return () => {
      const {
        widget
      } = props;
      const {
        dragWidget,
        activeWidget,
        sortSubWidget
      } = formDesignReactData;
      const name = widget ? widget.name : '';
      const compConf = _core.renderer.get(name) || {};
      const renderWidgetDesignView = compConf.renderFormDesignWidgetEdit || compConf.renderFormDesignWidgetView;
      const renderOpts = widget || {
        name
      };
      const isEditMode = !!$xeFormDesign;
      const params = {
        widget,
        readonly: false,
        disabled: false,
        isEditMode,
        isViewMode: !isEditMode,
        $formDesign: $xeFormDesign,
        $formView: $xeFormView
      };
      const isActive = activeWidget && widget && activeWidget.id === widget.id;
      return (0, _vue.h)('div', {
        class: ['vxe-form-design--widget-subtable-view-item', {
          'is--active': isActive,
          'is--sort': sortSubWidget && widget && sortSubWidget.id === widget.id,
          'is--drag': dragWidget && widget && dragWidget.id === widget.id
        }],
        draggable: true,
        'data-widget-id': widget.id,
        onDragstart: sortDragstartEvent,
        onDragend: sortDragendEvent,
        onDragenter: sortDragenterEvent,
        onDragover: handleDragoverSubItem,
        onClick: handleClickEvent
      }, [(0, _vue.h)('div', {
        class: 'vxe-form-design--widget-subtable-view-item-wrapper'
      }, [(0, _vue.h)('div', {
        class: 'vxe-form-design--widget-subtable-view-item-box vxe-form--item-row'
      }, renderWidgetDesignView ? (0, _vn.getSlotVNs)(renderWidgetDesignView(renderOpts, params)) : []), isActive ? (0, _vue.h)('div', {
        class: 'vxe-form-design--preview-item-operate'
      }, [(0, _vue.h)(_button.default, {
        icon: (0, _core.getIcon)().FORM_DESIGN_WIDGET_COPY,
        status: 'primary',
        size: 'mini',
        circle: true,
        onClick(params) {
          $xeFormDesign.handleCopyWidget(params.$event, widget);
        }
      }), (0, _vue.h)(_button.default, {
        icon: (0, _core.getIcon)().FORM_DESIGN_WIDGET_DELETE,
        status: 'danger',
        size: 'mini',
        circle: true,
        onClick(params) {
          $xeFormDesign.handleRemoveWidget(params.$event, widget);
        }
      })]) : (0, _vue.createCommentVNode)()])]);
    };
  }
});
const WidgetSubtableEditComponent = exports.WidgetSubtableEditComponent = (0, _vue.defineComponent)({
  props: {
    renderOpts: {
      type: Object,
      default: () => ({})
    },
    renderParams: {
      type: Object,
      default: () => ({})
    }
  },
  emits: [],
  setup(props) {
    const $xeFormDesign = (0, _vue.inject)('$xeFormDesign', null);
    if (!$xeFormDesign) {
      return () => [];
    }
    const {
      reactData: formDesignReactData
    } = $xeFormDesign;
    const onDragoverEmptyWrapper = evnt => {
      const {
        sortWidget,
        widgetObjList
      } = formDesignReactData;
      const {
        renderParams
      } = props;
      const {
        widget
      } = renderParams;
      evnt.stopPropagation();
      if (!sortWidget || !widget || widget.id === sortWidget.id) {
        return;
      }
      if ((0, _util.hasFormDesignLayoutType)(sortWidget)) {
        if (_core.VxeUI.modal) {
          _core.VxeUI.modal.message({
            content: (0, _core.getI18n)('vxe.formDesign.widgetProp.subtableProp.errSubDrag'),
            status: 'error',
            id: 'errSubDrag'
          });
        }
        return;
      }
      if (widget.name && !widget.children.some(item => item.id === sortWidget.id)) {
        const rest = _xeUtils.default.findTree(widgetObjList, item => item.id === sortWidget.id, {
          children: 'children'
        });
        if (rest) {
          const {
            item,
            index,
            items
          } = rest;
          formDesignReactData.sortWidget = null;
          formDesignReactData.sortSubWidget = item;
          formDesignReactData.activeWidget = item;
          widget.children.push(item);
          items.splice(index, 1);
        }
      }
    };
    return () => {
      const {
        renderParams
      } = props;
      const {
        widget
      } = renderParams;
      const {
        title,
        children,
        options
      } = widget;
      const {
        showCheckbox
      } = options;
      return (0, _vue.h)(_formItem.default, {
        title,
        className: 'vxe-form-design--widget-subtable-form-item'
      }, {
        default() {
          return (0, _vue.h)('div', {
            class: 'vxe-form-design--widget-subtable-view'
          }, [(0, _vue.h)('div', {
            class: 'vxe-form-design--widget-subtable-view-left'
          }, [showCheckbox ? (0, _vue.h)('div', {
            class: 'vxe-form-design--widget-subtable-col'
          }, [(0, _vue.h)('div', {
            class: 'vxe-form-design--widget-subtable-head'
          }, [(0, _vue.h)(_checkbox.default)]), (0, _vue.h)('div', {
            class: 'vxe-form-design--widget-subtable-body'
          }, [(0, _vue.h)(_checkbox.default)])]) : (0, _vue.createCommentVNode)(), (0, _vue.h)('div', {
            class: 'vxe-form-design--widget-subtable-col'
          }, [(0, _vue.h)('div', {
            class: 'vxe-form-design--widget-subtable-head'
          }, (0, _core.getI18n)('vxe.formDesign.widgetProp.subtableProp.seqTitle')), (0, _vue.h)('div', {
            class: 'vxe-form-design--widget-subtable-body'
          }, '1')])]), (0, _vue.h)('div', {
            class: 'vxe-form-design--widget-subtable-view-right'
          }, [(0, _vue.h)('div', {
            class: 'vxe-form-design--widget-subtable-view-wrapper'
          }, [(0, _vue.h)(_vue.TransitionGroup, {
            class: 'vxe-form-design--widget-subtable-view-list',
            tag: 'div',
            name: 'vxe-form-design--widget-subtable-view-list'
          }, {
            default: () => {
              return children.map(childWidget => {
                return (0, _vue.h)(ViewSubItemComponent, {
                  key: childWidget.id,
                  parentWidget: widget,
                  widget: childWidget
                });
              });
            }
          }), (0, _vue.h)('div', {
            key: 'empty',
            class: 'vxe-form-design--widget-subtable-view-empty',
            onDragover: onDragoverEmptyWrapper
          }, '将控件拖拽进来')])])]);
        }
      });
    };
  }
});
const WidgetSubtableViewComponent = exports.WidgetSubtableViewComponent = (0, _vue.defineComponent)({
  props: {
    renderOpts: {
      type: Object,
      default: () => ({})
    },
    renderParams: {
      type: Object,
      default: () => ({})
    }
  },
  emits: [],
  setup(props) {
    const VxeTableGridComponent = _core.VxeUI.getComponent('VxeGrid');
    const $xeFormView = (0, _vue.inject)('$xeFormView', null);
    const {
      computeKebabCaseName
    } = (0, _use.useWidgetName)(props);
    const computeSubtableColumns = (0, _vue.computed)(() => {
      const {
        renderParams
      } = props;
      const {
        widget
      } = renderParams;
      const {
        children,
        options
      } = widget;
      const columns = [];
      if (options.showCheckbox) {
        columns.push({
          type: 'checkbox',
          width: 60
        });
      }
      columns.push({
        type: 'seq',
        width: 60
      });
      if (children) {
        children.forEach(childWidget => {
          columns.push({
            field: childWidget.field,
            title: childWidget.title
          });
        });
      }
      return columns;
    });
    return () => {
      const {
        renderParams
      } = props;
      const {
        widget
      } = renderParams;
      const kebabCaseName = computeKebabCaseName.value;
      const subtableColumns = computeSubtableColumns.value;
      return (0, _vue.h)(_formItem.default, {
        class: ['vxe-form-design--widget-render-form-item', `widget-${kebabCaseName}`],
        title: widget.title,
        field: widget.field,
        span: 24,
        padding: false
      }, {
        default() {
          return VxeTableGridComponent ? (0, _vue.h)(VxeTableGridComponent, {
            border: true,
            columnConfig: {
              resizable: true
            },
            data: $xeFormView ? $xeFormView.getItemValue(widget) : null,
            columns: subtableColumns
          }) : (0, _vue.createCommentVNode)();
        }
      });
    };
  }
});