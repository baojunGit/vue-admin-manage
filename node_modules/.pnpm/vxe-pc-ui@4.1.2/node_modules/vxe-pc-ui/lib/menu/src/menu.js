"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _vue = require("vue");
var _xeUtils = _interopRequireDefault(require("xe-utils"));
var _ui = require("../../ui");
var _index = _interopRequireDefault(require("../../loading/index"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = exports.default = (0, _vue.defineComponent)({
  name: 'VxeMenu',
  props: {
    modelValue: [String, Number],
    expandAll: Boolean,
    collapsed: {
      type: Boolean,
      default: null
    },
    loading: Boolean,
    options: {
      type: Array,
      default: () => []
    }
  },
  emits: ['update:modelValue', 'click'],
  setup(props, context) {
    const {
      emit
    } = context;
    const xID = _xeUtils.default.uniqueId();
    const $xeLayoutAside = (0, _vue.inject)('$xeLayoutAside', null);
    const refElem = (0, _vue.ref)();
    const refWrapperElem = (0, _vue.ref)();
    const reactData = (0, _vue.reactive)({
      activeName: props.modelValue,
      menuList: [],
      itemHeight: 1
    });
    const refMaps = {
      refElem
    };
    const computeIsCollapsed = (0, _vue.computed)(() => {
      const {
        collapsed
      } = props;
      if (_xeUtils.default.isBoolean(collapsed)) {
        return collapsed;
      }
      if ($xeLayoutAside) {
        return $xeLayoutAside.props.collapsed;
      }
      return false;
    });
    const computeMaps = {};
    const $xeMenu = {
      xID,
      props,
      context,
      reactData,
      getRefMaps: () => refMaps,
      getComputeMaps: () => computeMaps
    };
    const getMenuTitle = item => {
      return `${item.title || item.name}`;
    };
    const updateItemHeight = () => {
      const wrapperElem = refWrapperElem.value;
      const childEls = wrapperElem ? wrapperElem.children : [];
      if (childEls.length) {
        reactData.itemHeight = childEls[0].offsetHeight;
      }
    };
    const getExpandChildSize = item => {
      let size = 0;
      if (item.isExpand) {
        item.childList.forEach(child => {
          size += getExpandChildSize(child) + 1;
        });
      }
      return size;
    };
    const updateStyle = () => {
      _xeUtils.default.eachTree(reactData.menuList, item => {
        if (item.hasChild && item.isExpand) {
          item.childHeight = getExpandChildSize(item) * reactData.itemHeight;
        } else {
          item.childHeight = 0;
        }
      }, {
        children: 'childList'
      });
    };
    const updateActiveMenu = isDefExpand => {
      const {
        activeName
      } = reactData;
      _xeUtils.default.eachTree(reactData.menuList, (item, index, items, path, parent, nodes) => {
        if (item.itemKey === activeName) {
          nodes.forEach(obj => {
            obj.isActive = true;
            if (isDefExpand) {
              obj.isExpand = true;
            }
          });
          item.isExactActive = true;
        } else {
          item.isExactActive = false;
          item.isActive = false;
        }
      }, {
        children: 'childList'
      });
    };
    const updateMenuConfig = () => {
      const {
        expandAll
      } = props;
      reactData.menuList = _xeUtils.default.mapTree(props.options, (item, index, items, path, parent) => {
        const objItem = Object.assign(Object.assign({}, item), {
          parentKey: parent ? parent.name || path.slice(0, path.length - 1).join(',') : '',
          level: path.length,
          itemKey: item.name || path.join(','),
          isExactActive: false,
          isActive: false,
          isExpand: _xeUtils.default.isBoolean(item.expanded) ? item.expanded : !!expandAll,
          hasChild: item.children && item.children.length > 0,
          childHeight: 0
        });
        return objItem;
      }, {
        children: 'children',
        mapChildren: 'childList'
      });
    };
    const handleClickIconCollapse = (evnt, item) => {
      const {
        hasChild,
        isExpand
      } = item;
      if (hasChild) {
        evnt.stopPropagation();
        evnt.preventDefault();
        item.isExpand = !isExpand;
        updateItemHeight();
        updateStyle();
      }
    };
    const handleClickMenu = (evnt, item) => {
      const {
        routerLink,
        hasChild
      } = item;
      if (routerLink) {
        reactData.activeName = item.itemKey;
        emit('update:modelValue', item.itemKey);
      } else {
        if (hasChild) {
          handleClickIconCollapse(evnt, item);
        }
      }
      emit('click', (0, _ui.createEvent)(evnt, {
        $menu: $xeMenu,
        menu: item
      }));
    };
    const renderMenuTitle = item => {
      const {
        icon,
        isExpand,
        hasChild
      } = item;
      const title = getMenuTitle(item);
      return [(0, _vue.h)('span', {
        class: 'vxe-menu--item-link-icon'
      }, icon ? [(0, _vue.h)('i', {
        class: icon
      })] : []), (0, _vue.h)('span', {
        class: 'vxe-menu--item-link-title',
        title
      }, title), hasChild ? (0, _vue.h)('span', {
        class: 'vxe-menu--item-link-collapse',
        onClick(evnt) {
          handleClickIconCollapse(evnt, item);
        }
      }, [(0, _vue.h)('i', {
        class: isExpand ? (0, _ui.getIcon)().MENU_ITEM_EXPAND_OPEN : (0, _ui.getIcon)().MENU_ITEM_EXPAND_CLOSE
      })]) : (0, _vue.createCommentVNode)()];
    };
    const renderChildren = item => {
      const {
        itemKey,
        level,
        hasChild,
        isActive,
        isExactActive,
        isExpand,
        routerLink,
        childList
      } = item;
      const isCollapsed = computeIsCollapsed.value;
      if (item.permissionCode) {
        if (!_ui.permission.checkVisible(item.permissionCode)) {
          return (0, _vue.createCommentVNode)();
        }
      }
      return (0, _vue.h)('div', {
        key: itemKey,
        class: ['vxe-menu--item-wrapper', `vxe-menu--item-level${level}`, {
          'is--exact-active': isExactActive,
          'is--active': isActive,
          'is--expand': !isCollapsed && isExpand
        }]
      }, [routerLink ? (0, _vue.h)((0, _vue.resolveComponent)('router-link'), {
        class: 'vxe-menu--item-link',
        to: routerLink,
        onClick(evnt) {
          handleClickMenu(evnt, item);
        }
      }, {
        default: () => renderMenuTitle(item)
      }) : (0, _vue.h)('div', {
        class: 'vxe-menu--item-link',
        onClick(evnt) {
          handleClickMenu(evnt, item);
        }
      }, renderMenuTitle(item)), hasChild ? (0, _vue.h)('div', {
        class: 'vxe-menu--item-group',
        style: {
          // height: `${childHeight}px`
        }
      }, childList.map(child => renderChildren(child))) : (0, _vue.createCommentVNode)()]);
    };
    const renderVN = () => {
      const {
        loading
      } = props;
      const {
        menuList
      } = reactData;
      const isCollapsed = computeIsCollapsed.value;
      return (0, _vue.h)('div', {
        ref: refElem,
        class: ['vxe-menu', {
          'is--collapsed': isCollapsed,
          'is--loading': loading
        }]
      }, [(0, _vue.h)('div', {
        ref: refWrapperElem,
        class: 'vxe-menu--item-list'
      }, menuList.map(child => renderChildren(child))),
      /**
       * 加载中
       */
      (0, _vue.h)(_index.default, {
        class: 'vxe-list-view--loading',
        modelValue: loading
      })]);
    };
    $xeMenu.renderVN = renderVN;
    const optFlag = (0, _vue.ref)(0);
    (0, _vue.watch)(() => props.options ? props.options.length : -1, () => {
      optFlag.value++;
    });
    (0, _vue.watch)(() => props.options, () => {
      optFlag.value++;
    });
    (0, _vue.watch)(optFlag, () => {
      updateMenuConfig();
      updateActiveMenu(true);
    });
    (0, _vue.watch)(() => props.modelValue, val => {
      reactData.activeName = val;
    });
    (0, _vue.watch)(() => reactData.activeName, () => {
      updateActiveMenu(true);
    });
    (0, _vue.onMounted)(() => {
      (0, _vue.nextTick)(updateItemHeight);
    });
    updateMenuConfig();
    updateActiveMenu(true);
    return $xeMenu;
  },
  render() {
    return this.renderVN();
  }
});