"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _vue = require("vue");
var _xeUtils = _interopRequireDefault(require("xe-utils"));
var _ui = require("../../ui");
var _utils = require("../../ui/src/utils");
var _vn = require("../../ui/src/vn");
var _render = require("./render");
var _util = require("./util");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const VxeFormConfigItem = (0, _vue.defineComponent)({
  name: 'VxeFormConfigItem',
  props: {
    itemConfig: Object
  },
  setup(props) {
    const $xeForm = (0, _vue.inject)('$xeForm', {});
    const xeformiteminfo = {
      itemConfig: props.itemConfig
    };
    (0, _vue.provide)('xeFormItemInfo', xeformiteminfo);
    const renderVN = () => {
      const {
        reactData
      } = $xeForm;
      const {
        data,
        rules,
        readonly,
        disabled,
        span: allSpan,
        align: allAlign,
        titleBold: allTitleBold,
        titleAlign: allTitleAlign,
        titleWidth: allTitleWidth,
        titleColon: allTitleColon,
        titleAsterisk: allTitleAsterisk,
        titleOverflow: allTitleOverflow,
        vertical: allVertical,
        padding: allPadding
      } = $xeForm.props;
      const {
        computeValidOpts
      } = $xeForm.getComputeMaps();
      const item = props.itemConfig;
      const {
        collapseAll
      } = reactData;
      const validOpts = computeValidOpts.value;
      const {
        slots,
        title,
        visible,
        folding,
        field,
        collapseNode,
        itemRender,
        showError,
        errRule,
        className,
        titleOverflow,
        vertical,
        padding,
        children,
        showTitle,
        contentClassName,
        contentStyle,
        titleClassName,
        titleStyle
      } = item;
      const compConf = (0, _utils.isEnableConf)(itemRender) ? _ui.renderer.get(itemRender.name) : null;
      const itemClassName = compConf ? compConf.formItemClassName || compConf.itemClassName : '';
      const itemStyle = compConf ? compConf.formItemStyle || compConf.itemStyle : null;
      const itemContentClassName = compConf ? compConf.formItemContentClassName || compConf.itemContentClassName : '';
      const itemContentStyle = compConf ? compConf.formItemContentStyle || compConf.itemContentStyle : null;
      const itemTitleClassName = compConf ? compConf.formItemTitleClassName || compConf.itemTitleClassName : '';
      const itemTitleStyle = compConf ? compConf.formItemTitleStyle || compConf.itemTitleStyle : null;
      const defaultSlot = slots ? slots.default : null;
      const titleSlot = slots ? slots.title : null;
      const span = item.span || allSpan;
      const align = item.align || allAlign;
      const itemPadding = _xeUtils.default.eqNull(padding) ? allPadding : padding;
      const itemVertical = _xeUtils.default.eqNull(vertical) ? allVertical : vertical;
      const titleBold = _xeUtils.default.eqNull(item.titleBold) ? allTitleBold : item.titleBold;
      const titleAlign = _xeUtils.default.eqNull(item.titleAlign) ? allTitleAlign : item.titleAlign;
      const titleWidth = itemVertical ? null : _xeUtils.default.eqNull(item.titleWidth) ? allTitleWidth : item.titleWidth;
      const titleColon = _xeUtils.default.eqNull(item.titleColon) ? allTitleColon : item.titleColon;
      const titleAsterisk = _xeUtils.default.eqNull(item.titleAsterisk) ? allTitleAsterisk : item.titleAsterisk;
      const itemOverflow = _xeUtils.default.eqNull(titleOverflow) ? allTitleOverflow : titleOverflow;
      const ovEllipsis = itemOverflow === 'ellipsis';
      const ovTitle = itemOverflow === 'title';
      const ovTooltip = itemOverflow === true || itemOverflow === 'tooltip';
      const hasEllipsis = ovTitle || ovTooltip || ovEllipsis;
      const params = {
        data,
        disabled,
        readonly,
        field,
        property: field,
        item,
        $form: $xeForm,
        $grid: $xeForm.xegrid
      };
      if (visible === false) {
        return (0, _vue.createCommentVNode)();
      }
      let isRequired = false;
      let isValid = false;
      if (!readonly && rules) {
        const itemRules = rules[field];
        if (itemRules && itemRules.length) {
          isValid = true;
          isRequired = itemRules.some(rule => rule.required);
        }
      }
      // 如果为项集合
      const isGather = children && children.length > 0;
      if (isGather) {
        const childVNs = children.map((childItem, index) => {
          return (0, _vue.h)(VxeFormConfigItem, {
            key: index,
            itemConfig: childItem
          });
        });
        return childVNs.length ? (0, _vue.h)('div', {
          class: ['vxe-form--gather vxe-form--item-row', item.id, span ? `vxe-form--item-col_${span} is--span` : '', className ? _xeUtils.default.isFunction(className) ? className(params) : className : '']
        }, childVNs) : (0, _vue.createCommentVNode)();
      }
      let contentVNs = [];
      const rftContent = compConf ? compConf.renderFormItemContent || compConf.renderItemContent : null;
      if (defaultSlot) {
        contentVNs = $xeForm.callSlot(defaultSlot, params);
      } else if (rftContent) {
        contentVNs = (0, _vn.getSlotVNs)(rftContent(itemRender, params));
      } else if (field) {
        contentVNs = [_xeUtils.default.toValueString(_xeUtils.default.get(data, field))];
      }
      if (collapseNode) {
        contentVNs.push((0, _vue.h)('div', {
          class: 'vxe-form--item-trigger-node',
          onClick: $xeForm.toggleCollapseEvent
        }, [(0, _vue.h)('span', {
          class: 'vxe-form--item-trigger-text'
        }, collapseAll ? (0, _ui.getI18n)('vxe.form.unfolding') : (0, _ui.getI18n)('vxe.form.folding')), (0, _vue.h)('i', {
          class: ['vxe-form--item-trigger-icon', collapseAll ? (0, _ui.getIcon)().FORM_FOLDING : (0, _ui.getIcon)().FORM_UNFOLDING]
        })]));
      }
      if (errRule && validOpts.showMessage) {
        contentVNs.push((0, _vue.h)('div', {
          class: 'vxe-form--item-valid',
          style: errRule.maxWidth ? {
            width: `${errRule.maxWidth}px`
          } : null
        }, errRule.content));
      }
      const ons = ovTooltip ? {
        onMouseenter(evnt) {
          $xeForm.triggerTitleTipEvent(evnt, params);
        },
        onMouseleave: $xeForm.handleTitleTipLeaveEvent
      } : {};
      return (0, _vue.h)('div', {
        class: ['vxe-form--item', item.id, span ? `vxe-form--item-col_${span} is--span` : '', className ? _xeUtils.default.isFunction(className) ? className(params) : className : '', itemClassName ? _xeUtils.default.isFunction(itemClassName) ? itemClassName(params) : itemClassName : '', {
          'is--title': title,
          'is--colon': titleColon,
          'is--bold': titleBold,
          'is--padding': itemPadding,
          'is--vertical': itemVertical,
          'is--asterisk': titleAsterisk,
          'is--valid': isValid,
          'is--required': isRequired,
          'is--hidden': folding && collapseAll,
          'is--active': (0, _util.isActiveItem)($xeForm, item),
          'is--error': showError
        }],
        style: _xeUtils.default.isFunction(itemStyle) ? itemStyle(params) : itemStyle
      }, [(0, _vue.h)('div', {
        class: 'vxe-form--item-inner'
      }, [showTitle !== false && (title || titleSlot) ? (0, _vue.h)('div', Object.assign({
        class: ['vxe-form--item-title', titleAlign ? `align--${titleAlign}` : '', hasEllipsis ? 'is--ellipsis' : '', itemTitleClassName ? _xeUtils.default.isFunction(itemTitleClassName) ? itemTitleClassName(params) : itemTitleClassName : '', titleClassName ? _xeUtils.default.isFunction(titleClassName) ? titleClassName(params) : titleClassName : ''],
        style: Object.assign({}, _xeUtils.default.isFunction(itemTitleStyle) ? itemTitleStyle(params) : itemTitleStyle, _xeUtils.default.isFunction(titleStyle) ? titleStyle(params) : titleStyle, titleWidth ? {
          width: isNaN(titleWidth) ? titleWidth : `${titleWidth}px`
        } : null),
        title: ovTitle ? (0, _utils.getFuncText)(title) : null
      }, ons), (0, _render.renderTitle)($xeForm, item)) : null, (0, _vue.h)('div', {
        class: ['vxe-form--item-content', align ? `align--${align}` : '', itemContentClassName ? _xeUtils.default.isFunction(itemContentClassName) ? itemContentClassName(params) : itemContentClassName : '', contentClassName ? _xeUtils.default.isFunction(contentClassName) ? contentClassName(params) : contentClassName : ''],
        style: Object.assign({}, _xeUtils.default.isFunction(itemContentStyle) ? itemContentStyle(params) : itemContentStyle, _xeUtils.default.isFunction(contentStyle) ? contentStyle(params) : contentStyle)
      }, contentVNs)])]);
    };
    const $xeFormconfigitem = {
      renderVN
    };
    (0, _vue.provide)('$xeFormGather', null);
    return $xeFormconfigitem;
  },
  render() {
    return this.renderVN();
  }
});
var _default = exports.default = VxeFormConfigItem;