"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  glob: () => glob,
  globSync: () => globSync
});
module.exports = __toCommonJS(src_exports);
var import_node_path = __toESM(require("path"));
var import_fdir = require("fdir");
var import_picomatch = __toESM(require("picomatch"));
function normalizePattern(pattern, expandDirectories, cwd) {
  let result = pattern;
  if (pattern.endsWith("/")) {
    result = pattern.slice(0, -1);
  }
  if (!pattern.endsWith("*") && expandDirectories) {
    result += "/**";
  }
  if (result.startsWith(cwd.replace(/\\/g, "/"))) {
    result = import_node_path.default.relative(cwd, result).replace(/\\/g, "/");
  }
  return result;
}
function processPatterns({ patterns, ignore = [], expandDirectories = true }, cwd) {
  const matchPatterns = [];
  const ignorePatterns = ignore.map((p) => normalizePattern(p, expandDirectories, cwd));
  if (!patterns) {
    return { match: ["**/*"], ignore: ignorePatterns };
  }
  for (let pattern of patterns) {
    pattern = normalizePattern(pattern, expandDirectories, cwd);
    if (pattern.startsWith("!") && pattern[1] !== "(") {
      ignorePatterns.push(pattern.slice(1));
    } else {
      matchPatterns.push(pattern);
    }
  }
  return { match: matchPatterns, ignore: ignorePatterns };
}
function processPath(path2, cwd, absolute) {
  const pathWithoutTrailingSlash = path2.endsWith("/") ? path2.slice(0, -1) : path2;
  return absolute ? pathWithoutTrailingSlash.slice(cwd.length + 1) : pathWithoutTrailingSlash;
}
function getFdirBuilder(options, cwd) {
  const processed = processPatterns(options, cwd);
  const matcher = (0, import_picomatch.default)(processed.match, {
    dot: options.dot,
    ignore: processed.ignore
  });
  const exclude = (0, import_picomatch.default)(processed.ignore, {
    dot: options.dot
  });
  const fdirOptions = {
    // use relative paths in the matcher
    filters: [(p) => matcher(processPath(p, cwd, options.absolute))],
    exclude: (_, p) => exclude(p.slice(cwd.length + 1).slice(0, -1)),
    pathSeparator: "/",
    relativePaths: true
  };
  if (options.deep) {
    fdirOptions.maxDepth = options.deep;
  }
  if (options.absolute) {
    fdirOptions.relativePaths = false;
    fdirOptions.resolvePaths = true;
    fdirOptions.includeBasePath = true;
  }
  if (options.onlyDirectories) {
    fdirOptions.excludeFiles = true;
    fdirOptions.includeDirs = true;
  } else if (options.onlyFiles === false) {
    fdirOptions.includeDirs = true;
  }
  return new import_fdir.fdir(fdirOptions);
}
async function glob(patternsOrOptions, options) {
  if (patternsOrOptions && (options == null ? void 0 : options.patterns)) {
    throw new Error("Cannot pass patterns as both an argument and an option");
  }
  const opts = Array.isArray(patternsOrOptions) ? { ...options, patterns: patternsOrOptions } : patternsOrOptions;
  const cwd = opts.cwd ? import_node_path.default.resolve(opts.cwd) : process.cwd();
  return getFdirBuilder(opts, cwd).crawl(cwd).withPromise();
}
function globSync(patternsOrOptions, options) {
  if (patternsOrOptions && (options == null ? void 0 : options.patterns)) {
    throw new Error("Cannot pass patterns as both an argument and an option");
  }
  const opts = Array.isArray(patternsOrOptions) ? { ...options, patterns: patternsOrOptions } : patternsOrOptions;
  const cwd = opts.cwd ? import_node_path.default.resolve(opts.cwd) : process.cwd();
  return getFdirBuilder(opts, cwd).crawl(cwd).sync();
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  glob,
  globSync
});
//# sourceMappingURL=index.js.map