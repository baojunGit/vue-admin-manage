// src/index.ts
import path from "path";
import { fdir } from "fdir";
import picomatch from "picomatch";
function normalizePattern(pattern, expandDirectories, cwd) {
  let result = pattern;
  if (pattern.endsWith("/")) {
    result = pattern.slice(0, -1);
  }
  if (!pattern.endsWith("*") && expandDirectories) {
    result += "/**";
  }
  if (result.startsWith(cwd.replace(/\\/g, "/"))) {
    result = path.relative(cwd, result).replace(/\\/g, "/");
  }
  return result;
}
function processPatterns({ patterns, ignore = [], expandDirectories = true }, cwd) {
  const matchPatterns = [];
  const ignorePatterns = ignore.map((p) => normalizePattern(p, expandDirectories, cwd));
  if (!patterns) {
    return { match: ["**/*"], ignore: ignorePatterns };
  }
  for (let pattern of patterns) {
    pattern = normalizePattern(pattern, expandDirectories, cwd);
    if (pattern.startsWith("!") && pattern[1] !== "(") {
      ignorePatterns.push(pattern.slice(1));
    } else {
      matchPatterns.push(pattern);
    }
  }
  return { match: matchPatterns, ignore: ignorePatterns };
}
function processPath(path2, cwd, absolute) {
  const pathWithoutTrailingSlash = path2.endsWith("/") ? path2.slice(0, -1) : path2;
  return absolute ? pathWithoutTrailingSlash.slice(cwd.length + 1) : pathWithoutTrailingSlash;
}
function getFdirBuilder(options, cwd) {
  const processed = processPatterns(options, cwd);
  const matcher = picomatch(processed.match, {
    dot: options.dot,
    ignore: processed.ignore
  });
  const exclude = picomatch(processed.ignore, {
    dot: options.dot
  });
  const fdirOptions = {
    // use relative paths in the matcher
    filters: [(p) => matcher(processPath(p, cwd, options.absolute))],
    exclude: (_, p) => exclude(p.slice(cwd.length + 1).slice(0, -1)),
    pathSeparator: "/",
    relativePaths: true
  };
  if (options.deep) {
    fdirOptions.maxDepth = options.deep;
  }
  if (options.absolute) {
    fdirOptions.relativePaths = false;
    fdirOptions.resolvePaths = true;
    fdirOptions.includeBasePath = true;
  }
  if (options.onlyDirectories) {
    fdirOptions.excludeFiles = true;
    fdirOptions.includeDirs = true;
  } else if (options.onlyFiles === false) {
    fdirOptions.includeDirs = true;
  }
  return new fdir(fdirOptions);
}
async function glob(patternsOrOptions, options) {
  if (patternsOrOptions && (options == null ? void 0 : options.patterns)) {
    throw new Error("Cannot pass patterns as both an argument and an option");
  }
  const opts = Array.isArray(patternsOrOptions) ? { ...options, patterns: patternsOrOptions } : patternsOrOptions;
  const cwd = opts.cwd ? path.resolve(opts.cwd) : process.cwd();
  return getFdirBuilder(opts, cwd).crawl(cwd).withPromise();
}
function globSync(patternsOrOptions, options) {
  if (patternsOrOptions && (options == null ? void 0 : options.patterns)) {
    throw new Error("Cannot pass patterns as both an argument and an option");
  }
  const opts = Array.isArray(patternsOrOptions) ? { ...options, patterns: patternsOrOptions } : patternsOrOptions;
  const cwd = opts.cwd ? path.resolve(opts.cwd) : process.cwd();
  return getFdirBuilder(opts, cwd).crawl(cwd).sync();
}
export {
  glob,
  globSync
};
//# sourceMappingURL=index.mjs.map