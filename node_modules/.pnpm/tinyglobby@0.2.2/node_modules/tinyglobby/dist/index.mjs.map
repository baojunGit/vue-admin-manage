{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import path from 'node:path';\nimport { type Options as FdirOptions, fdir } from 'fdir';\nimport picomatch from 'picomatch';\n\nexport interface GlobOptions {\n  absolute?: boolean;\n  cwd?: string;\n  patterns?: string[];\n  ignore?: string[];\n  dot?: boolean;\n  deep?: number;\n  expandDirectories?: boolean;\n  onlyDirectories?: boolean;\n  onlyFiles?: boolean;\n}\n\nfunction normalizePattern(pattern: string, expandDirectories: boolean, cwd: string) {\n  let result: string = pattern;\n  if (pattern.endsWith('/')) {\n    result = pattern.slice(0, -1);\n  }\n  // using a directory as entry should match all files inside it\n  if (!pattern.endsWith('*') && expandDirectories) {\n    result += '/**';\n  }\n  if (result.startsWith(cwd.replace(/\\\\/g, '/'))) {\n    result = path.relative(cwd, result).replace(/\\\\/g, '/');\n  }\n  return result;\n}\n\nfunction processPatterns({ patterns, ignore = [], expandDirectories = true }: GlobOptions, cwd: string) {\n  const matchPatterns: string[] = [];\n  const ignorePatterns: string[] = ignore.map(p => normalizePattern(p, expandDirectories, cwd));\n\n  if (!patterns) {\n    return { match: ['**/*'], ignore: ignorePatterns };\n  }\n\n  for (let pattern of patterns) {\n    pattern = normalizePattern(pattern, expandDirectories, cwd);\n    if (pattern.startsWith('!') && pattern[1] !== '(') {\n      ignorePatterns.push(pattern.slice(1));\n    } else {\n      matchPatterns.push(pattern);\n    }\n  }\n\n  return { match: matchPatterns, ignore: ignorePatterns };\n}\n\nfunction processPath(path: string, cwd: string, absolute?: boolean) {\n  const pathWithoutTrailingSlash = path.endsWith('/') ? path.slice(0, -1) : path;\n\n  return absolute ? pathWithoutTrailingSlash.slice(cwd.length + 1) : pathWithoutTrailingSlash;\n}\n\nfunction getFdirBuilder(options: GlobOptions, cwd: string) {\n  const processed = processPatterns(options, cwd);\n\n  const matcher = picomatch(processed.match, {\n    dot: options.dot,\n    ignore: processed.ignore\n  });\n\n  const exclude = picomatch(processed.ignore, {\n    dot: options.dot\n  });\n\n  const fdirOptions: Partial<FdirOptions> = {\n    // use relative paths in the matcher\n    filters: [p => matcher(processPath(p, cwd, options.absolute))],\n    exclude: (_, p) => exclude(p.slice(cwd.length + 1).slice(0, -1)),\n    pathSeparator: '/',\n    relativePaths: true\n  };\n\n  if (options.deep) {\n    fdirOptions.maxDepth = options.deep;\n  }\n\n  if (options.absolute) {\n    fdirOptions.relativePaths = false;\n    fdirOptions.resolvePaths = true;\n    fdirOptions.includeBasePath = true;\n  }\n\n  if (options.onlyDirectories) {\n    fdirOptions.excludeFiles = true;\n    fdirOptions.includeDirs = true;\n  } else if (options.onlyFiles === false) {\n    fdirOptions.includeDirs = true;\n  }\n\n  return new fdir(fdirOptions);\n}\n\nexport function glob(patterns: string[], options?: Omit<GlobOptions, 'patterns'>): Promise<string[]>;\nexport function glob(options: GlobOptions): Promise<string[]>;\nexport async function glob(patternsOrOptions: string[] | GlobOptions, options?: GlobOptions): Promise<string[]> {\n  if (patternsOrOptions && options?.patterns) {\n    throw new Error('Cannot pass patterns as both an argument and an option');\n  }\n\n  const opts = Array.isArray(patternsOrOptions) ? { ...options, patterns: patternsOrOptions } : patternsOrOptions;\n  const cwd = opts.cwd ? path.resolve(opts.cwd) : process.cwd();\n\n  return getFdirBuilder(opts, cwd).crawl(cwd).withPromise();\n}\n\nexport function globSync(patterns: string[], options?: Omit<GlobOptions, 'patterns'>): string[];\nexport function globSync(options: GlobOptions): string[];\nexport function globSync(patternsOrOptions: string[] | GlobOptions, options?: GlobOptions): string[] {\n  if (patternsOrOptions && options?.patterns) {\n    throw new Error('Cannot pass patterns as both an argument and an option');\n  }\n\n  const opts = Array.isArray(patternsOrOptions) ? { ...options, patterns: patternsOrOptions } : patternsOrOptions;\n  const cwd = opts.cwd ? path.resolve(opts.cwd) : process.cwd();\n\n  return getFdirBuilder(opts, cwd).crawl(cwd).sync();\n}\n"],"mappings":"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","names":["path"]}