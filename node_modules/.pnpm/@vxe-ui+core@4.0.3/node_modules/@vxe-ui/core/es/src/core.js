import XEUtils from 'xe-utils';
import DomZIndex from 'dom-zindex';
import { globalConfigStore } from './globalStore';
import { iconConfigStore } from './iconStore';
import { themeConfigStore } from './themeStore';
import { i18nConfigStore } from './i18nStore';
import { globalEvents, GLOBAL_EVENT_KEYS, createEvent } from './event';
import { globalResize } from './resize';
import { getI18n, hasLanguage, getLanguage } from './i18n';
import { renderer } from './renderer';
import { validators } from './validators';
import { menus } from './menus';
import { formats } from './formats';
import { commands } from './commands';
import { interceptor } from './interceptor';
import { clipboard } from './clipboard';
import { permission } from './permission';
import { log } from './log';
import { hooks } from './hooks';
import { useFns } from './useFns';
export function setTheme(name) {
    const theme = !name || name === 'default' ? 'light' : name;
    themeConfigStore.theme = theme;
    if (typeof document !== 'undefined') {
        const documentElement = document.documentElement;
        if (documentElement) {
            documentElement.setAttribute('data-vxe-ui-theme', theme);
        }
    }
    return VxeUI;
}
export function getTheme() {
    return themeConfigStore.theme;
}
export function setLanguage(locale) {
    i18nConfigStore.language = locale || 'zh-CN';
    return VxeUI;
}
export function setI18n(locale, data) {
    i18nConfigStore.langMaps[locale] = Object.assign({}, data);
    return VxeUI;
}
/**
* 全局参数设置
*/
export function setConfig(options) {
    if (options) {
        if (options.zIndex) {
            DomZIndex.setCurrent(options.zIndex);
        }
        if (options.theme) {
            setTheme(options.theme);
        }
        XEUtils.merge(globalConfigStore, options);
    }
    return VxeUI;
}
/**
* 获取全局参数
*/
export function getConfig(key, defaultValue) {
    return arguments.length ? XEUtils.get(globalConfigStore, key, defaultValue) : globalConfigStore;
}
export function setIcon(options) {
    if (options) {
        Object.assign(iconConfigStore, options);
    }
    return VxeUI;
}
export function getIcon(key) {
    return arguments.length ? XEUtils.get(iconConfigStore, key) : iconConfigStore;
}
export const coreVersion = "4.0.3";
const installedPlugins = [];
export function use(Plugin, options) {
    if (Plugin && Plugin.install) {
        if (installedPlugins.indexOf(Plugin) === -1) {
            Plugin.install(VxeUI, options);
            installedPlugins.push(Plugin);
        }
    }
    return VxeUI;
}
const components = {};
export function getComponent(name) {
    return components[name] || null;
}
export function component(comp) {
    if (comp && comp.name) {
        components[comp.name] = comp;
    }
}
export const VxeUI = {
    coreVersion,
    setTheme,
    getTheme,
    setConfig,
    getConfig: getConfig,
    setIcon,
    getIcon: getIcon,
    setLanguage,
    hasLanguage,
    getLanguage,
    setI18n,
    getI18n,
    globalEvents,
    GLOBAL_EVENT_KEYS,
    createEvent,
    globalResize,
    renderer,
    validators,
    menus,
    formats,
    commands,
    interceptor,
    clipboard,
    log,
    permission,
    hooks,
    component,
    getComponent,
    useFns,
    use
};
setTheme();
export * from './event';
export * from './resize';
export * from './i18n';
export * from './renderer';
export * from './validators';
export * from './menus';
export * from './formats';
export * from './commands';
export * from './interceptor';
export * from './clipboard';
export * from './permission';
export * from './useFns';
export * from './log';
export * from './hooks';
export default VxeUI;
