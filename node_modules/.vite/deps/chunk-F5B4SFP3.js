import {
  getSlotVNs
} from "./chunk-QTR2GV55.js";
import {
  checkDynamic,
  dynamicApp,
  dynamicStore
} from "./chunk-CEEPHHD6.js";
import {
  VxeUI,
  getConfig,
  getI18n,
  getIcon,
  require_xe_utils
} from "./chunk-BNXASOE3.js";
import {
  computed,
  createCommentVNode,
  defineComponent,
  h,
  ref,
  watch
} from "./chunk-4BEKJ24D.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/.pnpm/vxe-pc-ui@4.1.2/node_modules/vxe-pc-ui/es/loading/src/loading.js
var import_xe_utils = __toESM(require_xe_utils());
var loading_default = defineComponent({
  name: "VxeLoading",
  props: {
    modelValue: Boolean,
    icon: {
      type: String,
      default: () => getConfig().loading.icon
    },
    text: {
      type: String,
      default: () => getConfig().loading.text
    },
    status: String
  },
  setup(props, { slots }) {
    const refInitialized = ref(false);
    const computeLoadingIcon = computed(() => {
      return props.icon || getIcon().LOADING;
    });
    const computeLoadingText = computed(() => {
      const { text } = props;
      return import_xe_utils.default.isString(text) ? text : getI18n("vxe.loading.text");
    });
    const handleInit = () => {
      if (!refInitialized.value) {
        refInitialized.value = !!props.modelValue;
      }
    };
    watch(() => props.modelValue, () => {
      handleInit();
    });
    handleInit();
    return () => {
      const { modelValue, status } = props;
      const defaultSlot = slots.default;
      const textSlot = slots.text;
      const iconSlot = slots.icon;
      const initialized = refInitialized.value;
      const loadingIcon = computeLoadingIcon.value;
      const loadingText = computeLoadingText.value;
      if (!initialized && !modelValue) {
        return createCommentVNode();
      }
      return h("div", {
        class: ["vxe-loading", {
          [`theme--${status}`]: status,
          "is--visible": modelValue
        }]
      }, defaultSlot ? [
        h("div", {
          class: "vxe-loading--wrapper"
        }, getSlotVNs(defaultSlot({})))
      ] : [
        h("div", {
          class: "vxe-loading--chunk"
        }, [
          iconSlot || loadingIcon ? h("div", {
            class: "vxe-loading--icon"
          }, iconSlot ? getSlotVNs(iconSlot({})) : [
            h("i", {
              class: loadingIcon
            })
          ]) : h("div", {
            class: "vxe-loading--spinner"
          }),
          textSlot || loadingText ? h("div", {
            class: "vxe-loading--text"
          }, textSlot ? getSlotVNs(textSlot({})) : `${loadingText}`) : null
        ])
      ]);
    };
  }
});

// node_modules/.pnpm/vxe-pc-ui@4.1.2/node_modules/vxe-pc-ui/es/loading/index.js
var VxeLoading = Object.assign({}, loading_default, {
  install(app) {
    app.component(loading_default.name, loading_default);
  }
});
var LoadingController = {
  open(options) {
    const opts = Object.assign({}, options);
    dynamicStore.globalLoading = {
      modelValue: true,
      text: opts.text,
      icon: opts.icon
    };
    checkDynamic();
  },
  close() {
    dynamicStore.globalLoading = null;
  }
};
dynamicApp.component(loading_default.name, loading_default);
VxeUI.component(loading_default);
VxeUI.loading = LoadingController;
var Loading = VxeLoading;
var loading_default2 = VxeLoading;

export {
  loading_default,
  VxeLoading,
  LoadingController,
  Loading,
  loading_default2
};
//# sourceMappingURL=chunk-F5B4SFP3.js.map
