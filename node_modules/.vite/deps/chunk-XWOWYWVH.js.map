{
  "version": 3,
  "sources": ["../../.pnpm/vxe-table@4.7.67/node_modules/vxe-table/es/table/src/table.js", "../../.pnpm/vxe-table@4.7.67/node_modules/vxe-table/es/table/src/body.js", "../../.pnpm/vxe-table@4.7.67/node_modules/vxe-table/es/table/src/header.js", "../../.pnpm/vxe-table@4.7.67/node_modules/vxe-table/es/table/src/footer.js", "../../.pnpm/vxe-table@4.7.67/node_modules/vxe-table/es/table/src/props.js", "../../.pnpm/vxe-table@4.7.67/node_modules/vxe-table/es/table/src/emits.js", "../../.pnpm/vxe-table@4.7.67/node_modules/vxe-table/es/table/module/custom/panel.js", "../../.pnpm/vxe-table@4.7.67/node_modules/vxe-table/es/table/module/filter/panel.js", "../../.pnpm/vxe-table@4.7.67/node_modules/vxe-table/es/table/module/export/import-panel.js", "../../.pnpm/vxe-table@4.7.67/node_modules/vxe-table/es/table/module/export/export-panel.js", "../../.pnpm/vxe-table@4.7.67/node_modules/vxe-table/es/table/module/menu/panel.js", "../../.pnpm/vxe-table@4.7.67/node_modules/vxe-table/es/table/module/filter/hook.js", "../../.pnpm/vxe-table@4.7.67/node_modules/vxe-table/es/table/module/menu/hook.js", "../../.pnpm/vxe-table@4.7.67/node_modules/vxe-table/es/table/module/edit/hook.js", "../../.pnpm/vxe-table@4.7.67/node_modules/vxe-table/es/table/module/export/hook.js", "../../.pnpm/vxe-table@4.7.67/node_modules/vxe-table/es/table/module/export/util.js", "../../.pnpm/vxe-table@4.7.67/node_modules/vxe-table/es/table/module/keyboard/hook.js", "../../.pnpm/vxe-table@4.7.67/node_modules/vxe-table/es/table/module/validator/hook.js", "../../.pnpm/vxe-table@4.7.67/node_modules/vxe-table/es/table/module/custom/hook.js", "../../.pnpm/vxe-table@4.7.67/node_modules/vxe-table/es/table/render/index.js", "../../.pnpm/vxe-table@4.7.67/node_modules/vxe-table/es/table/index.js"],
  "sourcesContent": ["import { defineComponent, h, createCommentVNode, reactive, ref, provide, inject, nextTick, onActivated, onDeactivated, onBeforeUnmount, onUnmounted, watch, computed, onMounted } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { browse, isPx, isScale, hasClass, addClass, removeClass, getEventTargetNode, getPaddingTopBottomSize, setScrollTop, setScrollLeft, isNodeElement } from '../../ui/src/dom';\nimport { getLastZIndex, nextZIndex, hasChildrenList, getFuncText, isEnableConf, formatText, eqEmptyValue } from '../../ui/src/utils';\nimport { VxeUI } from '../../ui';\nimport Cell from './cell';\nimport TableBodyComponent from './body';\nimport TableHeaderComponent from './header';\nimport TableFooterComponent from './footer';\nimport tableProps from './props';\nimport tableEmits from './emits';\nimport { getRowUniqueId, clearTableAllStatus, getRowkey, getRowid, rowToVisible, colToVisible, getCellValue, setCellValue, handleFieldOrColumn, toTreePathSeq, restoreScrollLocation, restoreScrollListener, getRootColumn } from './util';\nimport { getSlotVNs } from '../../ui/src/vn';\nimport { warnLog, errLog } from '../../ui/src/log';\nimport TableCustomPanelComponent from '../module/custom/panel';\nimport TableFilterPanelComponent from '../module/filter/panel';\nimport TableImportPanelComponent from '../module/export/import-panel';\nimport TableExportPanelComponent from '../module/export/export-panel';\nimport TableMenuPanelComponent from '../module/menu/panel';\nconst { getConfig, getI18n, renderer, formats, createEvent, globalResize, interceptor, hooks, globalEvents, GLOBAL_EVENT_KEYS, useFns } = VxeUI;\nconst isWebkit = browse['-webkit'] && !browse.edge;\nconst customStorageKey = 'VXE_CUSTOM_STORE';\nexport default defineComponent({\n    name: 'VxeTable',\n    props: tableProps,\n    emits: tableEmits,\n    setup(props, context) {\n        const { slots, emit } = context;\n        const xID = XEUtils.uniqueId();\n        // 使用已安装的组件，如果未安装则不渲染\n        const VxeUILoadingComponent = VxeUI.getComponent('VxeLoading');\n        const VxeUITooltipComponent = VxeUI.getComponent('VxeTooltip');\n        const $xeTabs = inject('$xeTabs', null);\n        const { computeSize } = useFns.useSize(props);\n        const reactData = reactive({\n            isCalcColumn: false,\n            // 低性能的静态列\n            staticColumns: [],\n            // 渲染的列分组\n            tableGroupColumn: [],\n            // 可视区渲染的列\n            tableColumn: [],\n            // 渲染中的数据\n            tableData: [],\n            // 是否启用了横向 X 可视渲染方式加载\n            scrollXLoad: false,\n            // 是否启用了纵向 Y 可视渲染方式加载\n            scrollYLoad: false,\n            // 是否存在纵向滚动条\n            overflowY: true,\n            // 是否存在横向滚动条\n            overflowX: false,\n            // 纵向滚动条的宽度\n            scrollbarWidth: 0,\n            // 横向滚动条的高度\n            scrollbarHeight: 0,\n            // 最后滚动时间戳\n            lastScrollTime: 0,\n            // 行高\n            rowHeight: 0,\n            // 表格父容器的高度\n            parentHeight: 0,\n            // 是否使用分组表头\n            isGroup: false,\n            isAllOverflow: false,\n            // 复选框属性，是否全选\n            isAllSelected: false,\n            // 复选框属性，有选中且非全选状态\n            isIndeterminate: false,\n            // 复选框属性，已选中的行集合\n            selectCheckboxMaps: {},\n            // 当前行\n            currentRow: null,\n            // 单选框属性，选中列\n            currentColumn: null,\n            // 单选框属性，选中行\n            selectRadioRow: null,\n            // 表尾合计数据\n            footerTableData: [],\n            // 展开列信息\n            expandColumn: null,\n            // 树节点列信息\n            treeNodeColumn: null,\n            hasFixedColumn: false,\n            // 已展开的行集合\n            rowExpandedMaps: {},\n            // 懒加载中的展开行的集合\n            rowExpandLazyLoadedMaps: {},\n            // 已展开树节点集合\n            treeExpandedMaps: {},\n            // 懒加载中的树节点的集合\n            treeExpandLazyLoadedMaps: {},\n            // 树节点不确定状态的集合\n            treeIndeterminateMaps: {},\n            // 合并单元格的对象集\n            mergeList: [],\n            // 合并表尾数据的对象集\n            mergeFooterList: [],\n            // 刷新列标识，当列筛选被改变时，触发表格刷新数据\n            upDataFlag: 0,\n            // 刷新列标识，当列的特定属性被改变时，触发表格刷新列\n            reColumnFlag: 0,\n            // 已标记的对象集\n            pendingRowMaps: {},\n            // 已标记的行\n            pendingRowList: [],\n            // 初始化标识\n            initStore: {\n                filter: false,\n                import: false,\n                export: false,\n                custom: false\n            },\n            // 自定义列相关的信息\n            customStore: {\n                btnEl: null,\n                isAll: false,\n                isIndeterminate: false,\n                activeBtn: false,\n                activeWrapper: false,\n                visible: false,\n                maxHeight: 0,\n                oldSortMaps: {},\n                oldFixedMaps: {},\n                oldVisibleMaps: {}\n            },\n            customColumnList: [],\n            // 当前选中的筛选列\n            filterStore: {\n                isAllSelected: false,\n                isIndeterminate: false,\n                style: null,\n                options: [],\n                column: null,\n                multiple: false,\n                visible: false,\n                maxHeight: null\n            },\n            // 存放列相关的信息\n            columnStore: {\n                leftList: [],\n                centerList: [],\n                rightList: [],\n                resizeList: [],\n                pxList: [],\n                pxMinList: [],\n                autoMinList: [],\n                scaleList: [],\n                scaleMinList: [],\n                autoList: [],\n                remainList: []\n            },\n            // 存放快捷菜单的信息\n            ctxMenuStore: {\n                selected: null,\n                visible: false,\n                showChild: false,\n                selectChild: null,\n                list: [],\n                style: null\n            },\n            // 存放可编辑相关信息\n            editStore: {\n                indexs: {\n                    columns: []\n                },\n                titles: {\n                    columns: []\n                },\n                // 选中源\n                selected: {\n                    row: null,\n                    column: null\n                },\n                // 已复制源\n                copyed: {\n                    cut: false,\n                    rows: [],\n                    columns: []\n                },\n                // 激活\n                actived: {\n                    row: null,\n                    column: null\n                },\n                // 当前被强制聚焦单元格，只会在鼠标点击后算聚焦\n                focused: {\n                    row: null,\n                    column: null\n                },\n                insertMaps: {},\n                removeMaps: {}\n            },\n            // 存放 tooltip 相关信息\n            tooltipStore: {\n                row: null,\n                column: null,\n                content: null,\n                visible: false,\n                currOpts: {}\n            },\n            // 存放数据校验相关信息\n            validStore: {\n                visible: false\n            },\n            validErrorMaps: {},\n            // 导入相关信息\n            importStore: {\n                inited: false,\n                file: null,\n                type: '',\n                modeList: [],\n                typeList: [],\n                filename: '',\n                visible: false\n            },\n            importParams: {\n                mode: '',\n                types: null,\n                message: true\n            },\n            // 导出相关信息\n            exportStore: {\n                inited: false,\n                name: '',\n                modeList: [],\n                typeList: [],\n                columns: [],\n                isPrint: false,\n                hasFooter: false,\n                hasMerge: false,\n                hasTree: false,\n                hasColgroup: false,\n                visible: false\n            },\n            exportParams: {\n                filename: '',\n                sheetName: '',\n                mode: '',\n                type: '',\n                isColgroup: false,\n                isMerge: false,\n                isAllExpand: false,\n                useStyle: false,\n                original: false,\n                message: true,\n                isHeader: false,\n                isFooter: false\n            },\n            scrollVMLoading: false,\n            _isResize: false,\n            _isLoading: false\n        });\n        const internalData = {\n            tZindex: 0,\n            elemStore: {},\n            // 存放横向 X 虚拟滚动相关的信息\n            scrollXStore: {\n                offsetSize: 0,\n                visibleSize: 0,\n                startIndex: 0,\n                endIndex: 0\n            },\n            // 存放纵向 Y 虚拟滚动相关信息\n            scrollYStore: {\n                rowHeight: 0,\n                offsetSize: 0,\n                visibleSize: 0,\n                startIndex: 0,\n                endIndex: 0\n            },\n            // 表格宽度\n            tableWidth: 0,\n            // 表格高度\n            tableHeight: 0,\n            // 表头高度\n            headerHeight: 0,\n            // 表尾高度\n            footerHeight: 0,\n            customHeight: 0,\n            customMinHeight: 0,\n            customMaxHeight: 0,\n            // 当前 hover 行\n            hoverRow: null,\n            // 最后滚动位置\n            lastScrollLeft: 0,\n            lastScrollTop: 0,\n            // 单选框属性，已选中保留的行\n            radioReserveRow: null,\n            // 复选框属性，已选中保留的行集合\n            checkboxReserveRowMap: {},\n            // 行数据，已展开保留的行集合\n            rowExpandedReserveRowMap: {},\n            // 树结构数据，已展开保留的行集合\n            treeExpandedReserveRowMap: {},\n            // 树结构数据，不确定状态的集合\n            treeIndeterminateRowMaps: {},\n            // 列表完整数据、条件处理后\n            tableFullData: [],\n            afterFullData: [],\n            afterTreeFullData: [],\n            // 列表条件处理后数据集合\n            afterFullRowMaps: {},\n            // 树结构完整数据、条件处理后\n            tableFullTreeData: [],\n            tableSynchData: [],\n            tableSourceData: [],\n            // 收集的列配置（带分组）\n            collectColumn: [],\n            // 完整所有列（不带分组）\n            tableFullColumn: [],\n            // 渲染所有列\n            visibleColumn: [],\n            // 总的缓存数据集\n            fullAllDataRowIdData: {},\n            // 渲染中缓存数据\n            sourceDataRowIdData: {},\n            fullDataRowIdData: {},\n            fullColumnIdData: {},\n            fullColumnFieldData: {},\n            inited: false,\n            tooltipTimeout: null,\n            initStatus: false,\n            isActivated: false\n        };\n        let tableMethods = {};\n        let tablePrivateMethods = {};\n        const refElem = ref();\n        const refTooltip = ref();\n        const refCommTooltip = ref();\n        const refValidTooltip = ref();\n        const refTableMenu = ref();\n        const refTableFilter = ref();\n        const refTableCustom = ref();\n        const refTableHeader = ref();\n        const refTableBody = ref();\n        const refTableFooter = ref();\n        const refTableLeftHeader = ref();\n        const refTableLeftBody = ref();\n        const refTableLeftFooter = ref();\n        const refTableRightHeader = ref();\n        const refTableRightBody = ref();\n        const refTableRightFooter = ref();\n        const refLeftContainer = ref();\n        const refRightContainer = ref();\n        const refCellResizeBar = ref();\n        const refEmptyPlaceholder = ref();\n        const $xeGrid = inject('$xeGrid', null);\n        let $xeToolbar;\n        const computeTableId = computed(() => {\n            const { id } = props;\n            if (id) {\n                if (XEUtils.isFunction(id)) {\n                    return `${id({ $table: $xeTable, $grid: $xeGrid }) || ''}`;\n                }\n                return `${id}`;\n            }\n            return '';\n        });\n        const computeValidOpts = computed(() => {\n            return Object.assign({}, getConfig().table.validConfig, props.validConfig);\n        });\n        const computeSXOpts = computed(() => {\n            return Object.assign({}, getConfig().table.scrollX, props.scrollX);\n        });\n        const computeSYOpts = computed(() => {\n            return Object.assign({}, getConfig().table.scrollY, props.scrollY);\n        });\n        const computeRowHeightMaps = computed(() => {\n            return {\n                default: 48,\n                medium: 44,\n                small: 40,\n                mini: 36\n            };\n        });\n        const computeColumnOpts = computed(() => {\n            return Object.assign({}, getConfig().table.columnConfig, props.columnConfig);\n        });\n        const computeRowOpts = computed(() => {\n            return Object.assign({}, getConfig().table.rowConfig, props.rowConfig);\n        });\n        const computeResizeleOpts = computed(() => {\n            return Object.assign({}, getConfig().table.resizeConfig, props.resizeConfig);\n        });\n        const computeResizableOpts = computed(() => {\n            return Object.assign({}, getConfig().table.resizableConfig, props.resizableConfig);\n        });\n        const computeSeqOpts = computed(() => {\n            return Object.assign({ startIndex: 0 }, getConfig().table.seqConfig, props.seqConfig);\n        });\n        const computeRadioOpts = computed(() => {\n            return Object.assign({}, getConfig().table.radioConfig, props.radioConfig);\n        });\n        const computeCheckboxOpts = computed(() => {\n            return Object.assign({}, getConfig().table.checkboxConfig, props.checkboxConfig);\n        });\n        let computeTooltipOpts = ref();\n        computeTooltipOpts = computed(() => {\n            return Object.assign({}, getConfig().tooltip, getConfig().table.tooltipConfig, props.tooltipConfig);\n        });\n        const computeTipConfig = computed(() => {\n            const tooltipOpts = computeTooltipOpts.value;\n            return Object.assign({}, tooltipOpts);\n        });\n        const computeValidTipOpts = computed(() => {\n            const tooltipOpts = computeTooltipOpts.value;\n            return Object.assign({ isArrow: false }, tooltipOpts);\n        });\n        const computeEditOpts = computed(() => {\n            return Object.assign({}, getConfig().table.editConfig, props.editConfig);\n        });\n        const computeSortOpts = computed(() => {\n            return Object.assign({ orders: ['asc', 'desc', null] }, getConfig().table.sortConfig, props.sortConfig);\n        });\n        const computeFilterOpts = computed(() => {\n            return Object.assign({}, getConfig().table.filterConfig, props.filterConfig);\n        });\n        const computeMouseOpts = computed(() => {\n            return Object.assign({}, getConfig().table.mouseConfig, props.mouseConfig);\n        });\n        const computeAreaOpts = computed(() => {\n            return Object.assign({}, getConfig().table.areaConfig, props.areaConfig);\n        });\n        const computeKeyboardOpts = computed(() => {\n            return Object.assign({}, getConfig().table.keyboardConfig, props.keyboardConfig);\n        });\n        const computeClipOpts = computed(() => {\n            return Object.assign({}, getConfig().table.clipConfig, props.clipConfig);\n        });\n        const computeFNROpts = computed(() => {\n            return Object.assign({}, getConfig().table.fnrConfig, props.fnrConfig);\n        });\n        const computeMenuOpts = computed(() => {\n            return Object.assign({}, getConfig().table.menuConfig, props.menuConfig);\n        });\n        const computeHeaderMenu = computed(() => {\n            const menuOpts = computeMenuOpts.value;\n            const headerOpts = menuOpts.header;\n            return headerOpts && headerOpts.options ? headerOpts.options : [];\n        });\n        const computeBodyMenu = computed(() => {\n            const menuOpts = computeMenuOpts.value;\n            const bodyOpts = menuOpts.body;\n            return bodyOpts && bodyOpts.options ? bodyOpts.options : [];\n        });\n        const computeFooterMenu = computed(() => {\n            const menuOpts = computeMenuOpts.value;\n            const footerOpts = menuOpts.footer;\n            return footerOpts && footerOpts.options ? footerOpts.options : [];\n        });\n        const computeIsMenu = computed(() => {\n            const menuOpts = computeMenuOpts.value;\n            const headerMenu = computeHeaderMenu.value;\n            const bodyMenu = computeBodyMenu.value;\n            const footerMenu = computeFooterMenu.value;\n            return !!(props.menuConfig && isEnableConf(menuOpts) && (headerMenu.length || bodyMenu.length || footerMenu.length));\n        });\n        const computeMenuList = computed(() => {\n            const { ctxMenuStore } = reactData;\n            const rest = [];\n            ctxMenuStore.list.forEach((list) => {\n                list.forEach((item) => {\n                    rest.push(item);\n                });\n            });\n            return rest;\n        });\n        const computeExportOpts = computed(() => {\n            return Object.assign({}, getConfig().table.exportConfig, props.exportConfig);\n        });\n        const computeImportOpts = computed(() => {\n            return Object.assign({}, getConfig().table.importConfig, props.importConfig);\n        });\n        const computePrintOpts = computed(() => {\n            return Object.assign({}, getConfig().table.printConfig, props.printConfig);\n        });\n        const computeExpandOpts = computed(() => {\n            return Object.assign({}, getConfig().table.expandConfig, props.expandConfig);\n        });\n        const computeTreeOpts = computed(() => {\n            return Object.assign({}, getConfig().table.treeConfig, props.treeConfig);\n        });\n        const computeEmptyOpts = computed(() => {\n            return Object.assign({}, getConfig().table.emptyRender, props.emptyRender);\n        });\n        const computeLoadingOpts = computed(() => {\n            return Object.assign({}, getConfig().table.loadingConfig, props.loadingConfig);\n        });\n        const computeCellOffsetWidth = computed(() => {\n            return props.border ? Math.max(2, Math.ceil(reactData.scrollbarWidth / reactData.tableColumn.length)) : 1;\n        });\n        const computeCustomOpts = computed(() => {\n            return Object.assign({}, getConfig().table.customConfig, props.customConfig);\n        });\n        const computeAutoWidthColumnList = computed(() => {\n            const { visibleColumn } = internalData;\n            const { tableColumn } = reactData;\n            return tableColumn.length || visibleColumn.length ? visibleColumn.filter(column => column.width === 'auto' || column.minWidth === 'auto') : [];\n        });\n        const computeFixedColumnSize = computed(() => {\n            const { collectColumn } = internalData;\n            let fixedSize = 0;\n            // 只判断第一层\n            collectColumn.forEach((column) => {\n                if (column.renderFixed) {\n                    fixedSize++;\n                }\n            });\n            return fixedSize;\n        });\n        const computeIsMaxFixedColumn = computed(() => {\n            const fixedColumnSize = computeFixedColumnSize.value;\n            const columnOpts = computeColumnOpts.value;\n            const { maxFixedSize } = columnOpts;\n            if (maxFixedSize) {\n                return fixedColumnSize >= maxFixedSize;\n            }\n            return false;\n        });\n        const computeTableBorder = computed(() => {\n            const { border } = props;\n            if (border === true) {\n                return 'full';\n            }\n            if (border) {\n                return border;\n            }\n            return 'default';\n        });\n        const computeIsAllCheckboxDisabled = computed(() => {\n            const { treeConfig } = props;\n            const { tableData } = reactData;\n            const { tableFullData } = internalData;\n            const checkboxOpts = computeCheckboxOpts.value;\n            const { strict, checkMethod } = checkboxOpts;\n            if (strict) {\n                if (tableData.length || tableFullData.length) {\n                    if (checkMethod) {\n                        if (treeConfig) {\n                            // 暂时不支持树形结构\n                        }\n                        // 如果所有行都被禁用\n                        return tableFullData.every((row) => !checkMethod({ row }));\n                    }\n                    return false;\n                }\n                return true;\n            }\n            return false;\n        });\n        const refMaps = {\n            refElem,\n            refTooltip,\n            refValidTooltip,\n            refTableFilter,\n            refTableCustom,\n            refTableMenu,\n            refTableHeader,\n            refTableBody,\n            refTableFooter,\n            refTableLeftHeader,\n            refTableLeftBody,\n            refTableLeftFooter,\n            refTableRightHeader,\n            refTableRightBody,\n            refTableRightFooter,\n            refLeftContainer,\n            refRightContainer,\n            refCellResizeBar\n        };\n        const computeMaps = {\n            computeSize,\n            computeTableId,\n            computeValidOpts,\n            computeSXOpts,\n            computeSYOpts,\n            computeColumnOpts,\n            computeRowOpts,\n            computeResizeleOpts,\n            computeResizableOpts,\n            computeSeqOpts,\n            computeRadioOpts,\n            computeCheckboxOpts,\n            computeTooltipOpts,\n            computeEditOpts,\n            computeSortOpts,\n            computeFilterOpts,\n            computeMouseOpts,\n            computeAreaOpts,\n            computeKeyboardOpts,\n            computeClipOpts,\n            computeFNROpts,\n            computeHeaderMenu,\n            computeBodyMenu,\n            computeFooterMenu,\n            computeIsMenu,\n            computeMenuOpts,\n            computeExportOpts,\n            computeImportOpts,\n            computePrintOpts,\n            computeExpandOpts,\n            computeTreeOpts,\n            computeEmptyOpts,\n            computeLoadingOpts,\n            computeCustomOpts,\n            computeFixedColumnSize,\n            computeIsMaxFixedColumn,\n            computeIsAllCheckboxDisabled\n        };\n        const $xeTable = {\n            xID,\n            props: props,\n            context,\n            reactData,\n            internalData,\n            getRefMaps: () => refMaps,\n            getComputeMaps: () => computeMaps,\n            xegrid: $xeGrid\n        };\n        const eqCellValue = (row1, row2, field) => {\n            const val1 = XEUtils.get(row1, field);\n            const val2 = XEUtils.get(row2, field);\n            if (eqEmptyValue(val1) && eqEmptyValue(val2)) {\n                return true;\n            }\n            if (XEUtils.isString(val1) || XEUtils.isNumber(val1)) {\n                return ('' + val1) === ('' + val2);\n            }\n            return XEUtils.isEqual(val1, val2);\n        };\n        const getNextSortOrder = (column) => {\n            const sortOpts = computeSortOpts.value;\n            const { orders } = sortOpts;\n            const currOrder = column.order || null;\n            const oIndex = orders.indexOf(currOrder) + 1;\n            return orders[oIndex < orders.length ? oIndex : 0];\n        };\n        const getCustomStorageMap = (id) => {\n            const version = getConfig().version;\n            const rest = XEUtils.toStringJSON(localStorage.getItem(customStorageKey) || '');\n            const maps = rest && rest._v === version ? rest : { _v: version };\n            return (id ? maps[id] : maps) || {};\n        };\n        const setCustomStorageMap = (id, data) => {\n            const version = getConfig().version;\n            const maps = getCustomStorageMap();\n            maps[id] = data || undefined;\n            maps._v = version;\n            localStorage.setItem(customStorageKey, XEUtils.toJSONString(maps));\n        };\n        const getRecoverRowMaps = (keyMaps) => {\n            const { fullAllDataRowIdData } = internalData;\n            const restKeys = {};\n            XEUtils.each(keyMaps, (row, rowid) => {\n                if (fullAllDataRowIdData[rowid]) {\n                    restKeys[rowid] = row;\n                }\n            });\n            return restKeys;\n        };\n        const handleReserveRow = (reserveRowMap) => {\n            const { fullDataRowIdData } = internalData;\n            const reserveList = [];\n            XEUtils.each(reserveRowMap, (item, rowid) => {\n                if (fullDataRowIdData[rowid] && $xeTable.findRowIndexOf(reserveList, fullDataRowIdData[rowid].row) === -1) {\n                    reserveList.push(fullDataRowIdData[rowid].row);\n                }\n            });\n            return reserveList;\n        };\n        const computeVirtualX = () => {\n            const { visibleColumn } = internalData;\n            const tableBody = refTableBody.value;\n            const tableBodyElem = tableBody ? tableBody.$el : null;\n            if (tableBodyElem) {\n                const { scrollLeft, clientWidth } = tableBodyElem;\n                const endWidth = scrollLeft + clientWidth;\n                let toVisibleIndex = -1;\n                let cWidth = 0;\n                let visibleSize = 0;\n                for (let colIndex = 0, colLen = visibleColumn.length; colIndex < colLen; colIndex++) {\n                    cWidth += visibleColumn[colIndex].renderWidth;\n                    if (toVisibleIndex === -1 && scrollLeft < cWidth) {\n                        toVisibleIndex = colIndex;\n                    }\n                    if (toVisibleIndex >= 0) {\n                        visibleSize++;\n                        if (cWidth > endWidth) {\n                            break;\n                        }\n                    }\n                }\n                return { toVisibleIndex: Math.max(0, toVisibleIndex), visibleSize: Math.max(8, visibleSize) };\n            }\n            return { toVisibleIndex: 0, visibleSize: 8 };\n        };\n        const computeVirtualY = () => {\n            const tableHeader = refTableHeader.value;\n            const tableBody = refTableBody.value;\n            const tableBodyElem = tableBody ? tableBody.$el : null;\n            const vSize = computeSize.value;\n            const rowHeightMaps = computeRowHeightMaps.value;\n            if (tableBodyElem) {\n                const tableHeaderElem = tableHeader ? tableHeader.$el : null;\n                let rowHeight = 0;\n                let firstTrElem;\n                firstTrElem = tableBodyElem.querySelector('tr');\n                if (!firstTrElem && tableHeaderElem) {\n                    firstTrElem = tableHeaderElem.querySelector('tr');\n                }\n                if (firstTrElem) {\n                    rowHeight = firstTrElem.clientHeight;\n                }\n                if (!rowHeight) {\n                    rowHeight = rowHeightMaps[vSize || 'default'];\n                }\n                const visibleSize = Math.max(8, Math.ceil(tableBodyElem.clientHeight / rowHeight) + 2);\n                return { rowHeight, visibleSize };\n            }\n            return { rowHeight: 0, visibleSize: 8 };\n        };\n        const calculateMergerOffserIndex = (list, offsetItem, type) => {\n            for (let mcIndex = 0, len = list.length; mcIndex < len; mcIndex++) {\n                const mergeItem = list[mcIndex];\n                const { startIndex, endIndex } = offsetItem;\n                const mergeStartIndex = mergeItem[type];\n                const mergeSpanNumber = mergeItem[type + 'span'];\n                const mergeEndIndex = mergeStartIndex + mergeSpanNumber;\n                if (mergeStartIndex < startIndex && startIndex < mergeEndIndex) {\n                    offsetItem.startIndex = mergeStartIndex;\n                }\n                if (mergeStartIndex < endIndex && endIndex < mergeEndIndex) {\n                    offsetItem.endIndex = mergeEndIndex;\n                }\n                if (offsetItem.startIndex !== startIndex || offsetItem.endIndex !== endIndex) {\n                    mcIndex = -1;\n                }\n            }\n        };\n        const setMerges = (merges, mList, rowList) => {\n            if (merges) {\n                const { treeConfig } = props;\n                const { visibleColumn } = internalData;\n                if (!XEUtils.isArray(merges)) {\n                    merges = [merges];\n                }\n                if (treeConfig && merges.length) {\n                    errLog('vxe.error.noTree', ['merge-cells | merge-footer-items']);\n                }\n                merges.forEach((item) => {\n                    let { row, col, rowspan, colspan } = item;\n                    if (rowList && XEUtils.isNumber(row)) {\n                        row = rowList[row];\n                    }\n                    if (XEUtils.isNumber(col)) {\n                        col = visibleColumn[col];\n                    }\n                    if ((rowList ? row : XEUtils.isNumber(row)) && col && (rowspan || colspan)) {\n                        rowspan = XEUtils.toNumber(rowspan) || 1;\n                        colspan = XEUtils.toNumber(colspan) || 1;\n                        if (rowspan > 1 || colspan > 1) {\n                            const mcIndex = XEUtils.findIndexOf(mList, item => (item._row === row || getRowid($xeTable, item._row) === getRowid($xeTable, row)) && (item._col.id === col || item._col.id === col.id));\n                            const mergeItem = mList[mcIndex];\n                            if (mergeItem) {\n                                mergeItem.rowspan = rowspan;\n                                mergeItem.colspan = colspan;\n                                mergeItem._rowspan = rowspan;\n                                mergeItem._colspan = colspan;\n                            }\n                            else {\n                                const mergeRowIndex = rowList ? $xeTable.findRowIndexOf(rowList, row) : row;\n                                const mergeColIndex = tableMethods.getVTColumnIndex(col);\n                                mList.push({\n                                    row: mergeRowIndex,\n                                    col: mergeColIndex,\n                                    rowspan,\n                                    colspan,\n                                    _row: row,\n                                    _col: col,\n                                    _rowspan: rowspan,\n                                    _colspan: colspan\n                                });\n                            }\n                        }\n                    }\n                });\n            }\n        };\n        const removeMerges = (merges, mList, rowList) => {\n            const rest = [];\n            if (merges) {\n                const { treeConfig } = props;\n                const { visibleColumn } = internalData;\n                if (!XEUtils.isArray(merges)) {\n                    merges = [merges];\n                }\n                if (treeConfig && merges.length) {\n                    errLog('vxe.error.noTree', ['merge-cells | merge-footer-items']);\n                }\n                merges.forEach((item) => {\n                    let { row, col } = item;\n                    if (rowList && XEUtils.isNumber(row)) {\n                        row = rowList[row];\n                    }\n                    if (XEUtils.isNumber(col)) {\n                        col = visibleColumn[col];\n                    }\n                    const mcIndex = XEUtils.findIndexOf(mList, item => (item._row === row || getRowid($xeTable, item._row) === getRowid($xeTable, row)) && (item._col.id === col || item._col.id === col.id));\n                    if (mcIndex > -1) {\n                        const rItems = mList.splice(mcIndex, 1);\n                        rest.push(rItems[0]);\n                    }\n                });\n            }\n            return rest;\n        };\n        const clearAllSort = () => {\n            const { tableFullColumn } = internalData;\n            tableFullColumn.forEach((column) => {\n                column.order = null;\n            });\n        };\n        const calcHeight = (key) => {\n            const { parentHeight } = reactData;\n            const val = props[key];\n            let num = 0;\n            if (val) {\n                if (val === '100%' || val === 'auto') {\n                    num = parentHeight;\n                }\n                else {\n                    const excludeHeight = $xeTable.getExcludeHeight();\n                    if (isScale(val)) {\n                        num = Math.floor((XEUtils.toInteger(val) || 1) / 100 * parentHeight);\n                    }\n                    else {\n                        num = XEUtils.toNumber(val);\n                    }\n                    num = Math.max(40, num - excludeHeight);\n                }\n            }\n            return num;\n        };\n        const handleCustomRestore = (storeData) => {\n            let { collectColumn } = internalData;\n            const { resizableData, sortData, visibleData, fixedData } = storeData;\n            let hasCustomSort = false;\n            // 处理还原\n            if (resizableData || sortData || visibleData || fixedData) {\n                XEUtils.eachTree(collectColumn, (column, index, items, path, parent) => {\n                    const colKey = column.getKey();\n                    // 支持一级\n                    if (!parent) {\n                        if (fixedData && fixedData[colKey]) {\n                            column.fixed = fixedData[colKey];\n                        }\n                        if (sortData && XEUtils.isNumber(sortData[colKey])) {\n                            hasCustomSort = true;\n                            column.renderSortNumber = sortData[colKey];\n                        }\n                    }\n                    if (resizableData && XEUtils.isNumber(resizableData[colKey])) {\n                        column.resizeWidth = resizableData[colKey];\n                    }\n                    if (visibleData && XEUtils.isBoolean(visibleData[colKey])) {\n                        column.visible = visibleData[colKey];\n                    }\n                });\n                // 如果自定义了顺序\n                if (hasCustomSort) {\n                    collectColumn = XEUtils.orderBy(collectColumn, 'renderSortNumber');\n                    internalData.collectColumn = collectColumn;\n                    internalData.tableFullColumn = getColumnList(collectColumn);\n                }\n            }\n        };\n        /**\n         * 还原自定义列操作状态\n         */\n        const restoreCustomStorage = () => {\n            const { customConfig } = props;\n            const tableId = computeTableId.value;\n            const customOpts = computeCustomOpts.value;\n            const { storage, restoreStore } = customOpts;\n            const isAllCustom = storage === true;\n            const storageOpts = isAllCustom ? {} : Object.assign({}, storage || {});\n            const isCustomResizable = isAllCustom || storageOpts.resizable;\n            const isCustomVisible = isAllCustom || storageOpts.visible;\n            const isCustomFixed = isAllCustom || storageOpts.fixed;\n            const isCustomSort = isAllCustom || storageOpts.sort;\n            if (customConfig && (isCustomResizable || isCustomVisible || isCustomFixed || isCustomSort)) {\n                if (!tableId) {\n                    errLog('vxe.error.reqProp', ['id']);\n                    return;\n                }\n                const storeData = getCustomStorageMap(tableId);\n                if (restoreStore) {\n                    return Promise.resolve(restoreStore({ id: tableId, type: 'restore', storeData })).then(storeData => {\n                        if (!storeData) {\n                            return;\n                        }\n                        return handleCustomRestore(storeData);\n                    }).catch(e => e);\n                }\n                else {\n                    return handleCustomRestore(storeData);\n                }\n            }\n        };\n        /**\n         * 更新数据列的 Map\n         * 牺牲数据组装的耗时，用来换取使用过程中的流畅\n         */\n        const cacheColumnMap = () => {\n            const { tableFullColumn, collectColumn } = internalData;\n            const fullColumnIdData = internalData.fullColumnIdData = {};\n            const fullColumnFieldData = internalData.fullColumnFieldData = {};\n            const mouseOpts = computeMouseOpts.value;\n            const columnOpts = computeColumnOpts.value;\n            const rowOpts = computeRowOpts.value;\n            const isGroup = collectColumn.some(hasChildrenList);\n            let isAllOverflow = !!props.showOverflow;\n            let expandColumn;\n            let treeNodeColumn;\n            let checkboxColumn;\n            let radioColumn;\n            let htmlColumn;\n            let hasFixed;\n            const handleFunc = (column, index, items, path, parent) => {\n                const { id: colid, field, fixed, type, treeNode } = column;\n                const rest = { column, colid, index, items, parent };\n                if (field) {\n                    if (process.env.NODE_ENV === 'development') {\n                        if (fullColumnFieldData[field]) {\n                            warnLog('vxe.error.colRepet', ['field', field]);\n                        }\n                    }\n                    fullColumnFieldData[field] = rest;\n                }\n                if (!hasFixed && fixed) {\n                    hasFixed = fixed;\n                }\n                if (!htmlColumn && type === 'html') {\n                    htmlColumn = column;\n                }\n                if (treeNode) {\n                    if (process.env.NODE_ENV === 'development') {\n                        if (treeNodeColumn) {\n                            warnLog('vxe.error.colRepet', ['tree-node', treeNode]);\n                        }\n                    }\n                    if (!treeNodeColumn) {\n                        treeNodeColumn = column;\n                    }\n                }\n                else if (type === 'expand') {\n                    if (process.env.NODE_ENV === 'development') {\n                        if (expandColumn) {\n                            warnLog('vxe.error.colRepet', ['type', type]);\n                        }\n                    }\n                    if (!expandColumn) {\n                        expandColumn = column;\n                    }\n                }\n                if (process.env.NODE_ENV === 'development') {\n                    if (type === 'checkbox') {\n                        if (checkboxColumn) {\n                            warnLog('vxe.error.colRepet', ['type', type]);\n                        }\n                        if (!checkboxColumn) {\n                            checkboxColumn = column;\n                        }\n                    }\n                    else if (type === 'radio') {\n                        if (radioColumn) {\n                            warnLog('vxe.error.colRepet', ['type', type]);\n                        }\n                        if (!radioColumn) {\n                            radioColumn = column;\n                        }\n                    }\n                }\n                if (isAllOverflow && column.showOverflow === false) {\n                    isAllOverflow = false;\n                }\n                if (fullColumnIdData[colid]) {\n                    errLog('vxe.error.colRepet', ['colId', colid]);\n                }\n                fullColumnIdData[colid] = rest;\n            };\n            if (isGroup) {\n                XEUtils.eachTree(collectColumn, (column, index, items, path, parent, nodes) => {\n                    column.level = nodes.length;\n                    handleFunc(column, index, items, path, parent);\n                });\n            }\n            else {\n                tableFullColumn.forEach(handleFunc);\n            }\n            if (process.env.NODE_ENV === 'development') {\n                if (expandColumn && mouseOpts.area) {\n                    errLog('vxe.error.errConflicts', ['mouse-config.area', 'column.type=expand']);\n                }\n            }\n            if (process.env.NODE_ENV === 'development') {\n                if (htmlColumn) {\n                    if (!columnOpts.useKey) {\n                        errLog('vxe.error.reqProp', ['column-config.useKey', 'column.type=html']);\n                    }\n                    if (!rowOpts.useKey) {\n                        errLog('vxe.error.reqProp', ['row-config.useKey', 'column.type=html']);\n                    }\n                }\n            }\n            reactData.isGroup = isGroup;\n            reactData.treeNodeColumn = treeNodeColumn;\n            reactData.expandColumn = expandColumn;\n            reactData.isAllOverflow = isAllOverflow;\n        };\n        const updateHeight = () => {\n            internalData.customHeight = calcHeight('height');\n            internalData.customMinHeight = calcHeight('minHeight');\n            internalData.customMaxHeight = calcHeight('maxHeight');\n        };\n        const calcCellWidth = () => {\n            const { tableData } = reactData;\n            const autoWidthColumnList = computeAutoWidthColumnList.value;\n            if (!tableData.length || !autoWidthColumnList.length) {\n                reactData.isCalcColumn = false;\n                return nextTick();\n            }\n            reactData.isCalcColumn = true;\n            return nextTick().then(() => {\n                const el = refElem.value;\n                if (el) {\n                    autoWidthColumnList.forEach(column => {\n                        const cellElList = el.querySelectorAll(`.vxe-header--column.${column.id}>.vxe-cell,.vxe-body--column.${column.id}>.vxe-cell,.vxe-footer--column.${column.id}>.vxe-cell`);\n                        const firstCellEl = cellElList[0];\n                        let paddingSize = 0;\n                        if (firstCellEl) {\n                            const cellStyle = getComputedStyle(firstCellEl);\n                            paddingSize = Math.floor(XEUtils.toNumber(cellStyle.paddingLeft) + XEUtils.toNumber(cellStyle.paddingRight)) + 2;\n                        }\n                        let colWidth = column.renderAutoWidth - paddingSize;\n                        XEUtils.arrayEach(cellElList, (cellEl) => {\n                            const labelEl = cellEl.firstChild;\n                            if (labelEl) {\n                                colWidth = Math.max(colWidth, Math.ceil(labelEl.offsetWidth) + 4);\n                            }\n                        });\n                        column.renderAutoWidth = colWidth + paddingSize;\n                    });\n                    tablePrivateMethods.analyColumnWidth();\n                }\n                reactData.isCalcColumn = false;\n            });\n        };\n        /**\n         * 列宽算法\n         * 支持 px、%、固定 混合分配\n         * 支持动态列表调整分配\n         * 支持自动分配偏移量\n         */\n        const autoCellWidth = () => {\n            const tableHeader = refTableHeader.value;\n            const tableBody = refTableBody.value;\n            const tableFooter = refTableFooter.value;\n            const bodyElem = tableBody ? tableBody.$el : null;\n            const headerElem = tableHeader ? tableHeader.$el : null;\n            const footerElem = tableFooter ? tableFooter.$el : null;\n            if (!bodyElem) {\n                return;\n            }\n            let tableWidth = 0;\n            const minCellWidth = 40; // 列宽最少限制 40px\n            const bodyWidth = bodyElem.clientWidth - 1;\n            let remainWidth = bodyWidth;\n            let meanWidth = remainWidth / 100;\n            const { fit } = props;\n            const { columnStore } = reactData;\n            const { resizeList, pxMinList, autoMinList, pxList, scaleList, scaleMinList, autoList, remainList } = columnStore;\n            // 最小宽\n            pxMinList.forEach((column) => {\n                const minWidth = XEUtils.toInteger(column.minWidth);\n                tableWidth += minWidth;\n                column.renderWidth = minWidth;\n            });\n            // 最小自适应\n            autoMinList.forEach((column) => {\n                const scaleWidth = Math.max(60, XEUtils.toInteger(column.renderAutoWidth));\n                tableWidth += scaleWidth;\n                column.renderWidth = scaleWidth;\n            });\n            // 最小百分比\n            scaleMinList.forEach((column) => {\n                const scaleWidth = Math.floor(XEUtils.toInteger(column.minWidth) * meanWidth);\n                tableWidth += scaleWidth;\n                column.renderWidth = scaleWidth;\n            });\n            // 固定百分比\n            scaleList.forEach((column) => {\n                const scaleWidth = Math.floor(XEUtils.toInteger(column.width) * meanWidth);\n                tableWidth += scaleWidth;\n                column.renderWidth = scaleWidth;\n            });\n            // 固定宽\n            pxList.forEach((column) => {\n                const width = XEUtils.toInteger(column.width);\n                tableWidth += width;\n                column.renderWidth = width;\n            });\n            // 自适应宽\n            autoList.forEach((column) => {\n                const width = Math.max(60, XEUtils.toInteger(column.renderAutoWidth));\n                tableWidth += width;\n                column.renderWidth = width;\n            });\n            // 调整了列宽\n            resizeList.forEach((column) => {\n                const width = XEUtils.toInteger(column.resizeWidth);\n                tableWidth += width;\n                column.renderWidth = width;\n            });\n            remainWidth -= tableWidth;\n            meanWidth = remainWidth > 0 ? Math.floor(remainWidth / (scaleMinList.length + pxMinList.length + autoMinList.length + remainList.length)) : 0;\n            if (fit) {\n                if (remainWidth > 0) {\n                    scaleMinList.concat(pxMinList).concat(autoMinList).forEach((column) => {\n                        tableWidth += meanWidth;\n                        column.renderWidth += meanWidth;\n                    });\n                }\n            }\n            else {\n                meanWidth = minCellWidth;\n            }\n            // 剩余均分\n            remainList.forEach((column) => {\n                const width = Math.max(meanWidth, minCellWidth);\n                column.renderWidth = width;\n                tableWidth += width;\n            });\n            if (fit) {\n                /**\n                 * 偏移量算法\n                 * 如果所有列足够放的情况下，从最后动态列开始分配\n                 */\n                const dynamicList = scaleList.concat(scaleMinList).concat(pxMinList).concat(autoMinList).concat(remainList);\n                let dynamicSize = dynamicList.length - 1;\n                if (dynamicSize > 0) {\n                    let odiffer = bodyWidth - tableWidth;\n                    if (odiffer > 0) {\n                        while (odiffer > 0 && dynamicSize >= 0) {\n                            odiffer--;\n                            dynamicList[dynamicSize--].renderWidth++;\n                        }\n                        tableWidth = bodyWidth;\n                    }\n                }\n            }\n            const tableHeight = bodyElem.offsetHeight;\n            const overflowY = bodyElem.scrollHeight > bodyElem.clientHeight;\n            let scrollbarWidth = 0;\n            if (overflowY) {\n                scrollbarWidth = Math.max(bodyElem.offsetWidth - bodyElem.clientWidth, 0);\n            }\n            reactData.scrollbarWidth = scrollbarWidth;\n            reactData.overflowY = overflowY;\n            internalData.tableWidth = tableWidth;\n            internalData.tableHeight = tableHeight;\n            let headerHeight = 0;\n            if (headerElem) {\n                headerHeight = headerElem.clientHeight;\n                nextTick(() => {\n                    // 检测是否同步滚动\n                    if (headerElem && bodyElem && headerElem.scrollLeft !== bodyElem.scrollLeft) {\n                        headerElem.scrollLeft = bodyElem.scrollLeft;\n                    }\n                });\n            }\n            internalData.headerHeight = headerHeight;\n            let overflowX = false;\n            let footerHeight = 0;\n            let scrollbarHeight = 0;\n            if (footerElem) {\n                footerHeight = footerElem.offsetHeight;\n                overflowX = tableWidth > footerElem.clientWidth;\n                scrollbarHeight = Math.max(footerHeight - footerElem.clientHeight, 0);\n            }\n            else {\n                overflowX = tableWidth > bodyWidth;\n                scrollbarHeight = Math.max(tableHeight - bodyElem.clientHeight, 0);\n            }\n            internalData.footerHeight = footerHeight;\n            reactData.overflowX = overflowX;\n            reactData.scrollbarHeight = scrollbarHeight;\n            updateHeight();\n            reactData.parentHeight = Math.max(internalData.headerHeight + footerHeight + 20, tablePrivateMethods.getParentHeight());\n            if (overflowX) {\n                tablePrivateMethods.checkScrolling();\n            }\n        };\n        const getOrderField = (column) => {\n            const { sortBy, sortType } = column;\n            return (row) => {\n                let cellValue;\n                if (sortBy) {\n                    cellValue = XEUtils.isFunction(sortBy) ? sortBy({ row, column }) : XEUtils.get(row, sortBy);\n                }\n                else {\n                    cellValue = tableMethods.getCellLabel(row, column);\n                }\n                if (!sortType || sortType === 'auto') {\n                    return isNaN(cellValue) ? cellValue : XEUtils.toNumber(cellValue);\n                }\n                else if (sortType === 'number') {\n                    return XEUtils.toNumber(cellValue);\n                }\n                else if (sortType === 'string') {\n                    return XEUtils.toValueString(cellValue);\n                }\n                return cellValue;\n            };\n        };\n        /**\n         * 预编译\n         * 对渲染中的数据提前解析序号及索引。牺牲提前编译耗时换取渲染中额外损耗，使运行时更加流畅\n         */\n        const updateAfterDataIndex = () => {\n            const { treeConfig } = props;\n            const { afterFullData, fullDataRowIdData, fullAllDataRowIdData } = internalData;\n            const { afterTreeFullData } = internalData;\n            const treeOpts = computeTreeOpts.value;\n            const childrenField = treeOpts.children || treeOpts.childrenField;\n            const fullMaps = {};\n            if (treeConfig) {\n                XEUtils.eachTree(afterTreeFullData, (row, index, items, path) => {\n                    const rowid = getRowid($xeTable, row);\n                    const allrest = fullAllDataRowIdData[rowid];\n                    const seq = path.map((num, i) => i % 2 === 0 ? (Number(num) + 1) : '.').join('');\n                    if (allrest) {\n                        allrest.seq = seq;\n                        allrest._index = index;\n                    }\n                    else {\n                        const rest = { row, rowid, seq, index: -1, $index: -1, _index: index, items: [], parent: null, level: 0 };\n                        fullAllDataRowIdData[rowid] = rest;\n                        fullDataRowIdData[rowid] = rest;\n                    }\n                    fullMaps[rowid] = row;\n                }, { children: treeOpts.transform ? treeOpts.mapChildrenField : childrenField });\n            }\n            else {\n                afterFullData.forEach((row, index) => {\n                    const rowid = getRowid($xeTable, row);\n                    const allrest = fullAllDataRowIdData[rowid];\n                    const seq = index + 1;\n                    if (allrest) {\n                        allrest.seq = seq;\n                        allrest._index = index;\n                    }\n                    else {\n                        const rest = { row, rowid, seq, index: -1, $index: -1, _index: index, items: [], parent: null, level: 0 };\n                        fullAllDataRowIdData[rowid] = rest;\n                        fullDataRowIdData[rowid] = rest;\n                    }\n                    fullMaps[rowid] = row;\n                });\n            }\n            internalData.afterFullRowMaps = fullMaps;\n        };\n        /**\n         * 如果为虚拟树，将树结构拍平\n         * @returns\n         */\n        const handleVirtualTreeToList = () => {\n            const { treeConfig } = props;\n            const { treeExpandedMaps } = reactData;\n            const treeOpts = computeTreeOpts.value;\n            if (treeConfig && treeOpts.transform) {\n                const fullData = [];\n                const expandMaps = {};\n                XEUtils.eachTree(internalData.afterTreeFullData, (row, index, items, path, parent) => {\n                    const rowid = getRowid($xeTable, row);\n                    const parentRowid = getRowid($xeTable, parent);\n                    if (!parent || (expandMaps[parentRowid] && treeExpandedMaps[parentRowid])) {\n                        expandMaps[rowid] = 1;\n                        fullData.push(row);\n                    }\n                }, { children: treeOpts.mapChildrenField });\n                internalData.afterFullData = fullData;\n                updateScrollYStatus(fullData);\n                return fullData;\n            }\n            return internalData.afterFullData;\n        };\n        /**\n         * 获取处理后全量的表格数据\n         * 如果存在筛选条件，继续处理\n         */\n        const updateAfterFullData = () => {\n            const { treeConfig } = props;\n            const { tableFullColumn, tableFullData, tableFullTreeData } = internalData;\n            const filterOpts = computeFilterOpts.value;\n            const sortOpts = computeSortOpts.value;\n            const treeOpts = computeTreeOpts.value;\n            const { transform } = treeOpts;\n            const { remote: allRemoteFilter, filterMethod: allFilterMethod } = filterOpts;\n            const { remote: allRemoteSort, sortMethod: allSortMethod, multiple: sortMultiple, chronological } = sortOpts;\n            let tableData = [];\n            let tableTree = [];\n            // 处理列\n            if (!allRemoteFilter || !allRemoteSort) {\n                const filterColumns = [];\n                let orderColumns = [];\n                tableFullColumn.forEach((column) => {\n                    const { field, sortable, order, filters } = column;\n                    if (!allRemoteFilter && filters && filters.length) {\n                        const valueList = [];\n                        const itemList = [];\n                        filters.forEach((item) => {\n                            if (item.checked) {\n                                itemList.push(item);\n                                valueList.push(item.value);\n                            }\n                        });\n                        if (itemList.length) {\n                            filterColumns.push({ column, valueList, itemList });\n                        }\n                    }\n                    if (!allRemoteSort && sortable && order) {\n                        orderColumns.push({ column, field, property: field, order: order, sortTime: column.sortTime });\n                    }\n                });\n                if (sortMultiple && chronological && orderColumns.length > 1) {\n                    orderColumns = XEUtils.orderBy(orderColumns, 'sortTime');\n                }\n                // 处理筛选\n                // 支持单列、多列、组合筛选\n                if (!allRemoteFilter && filterColumns.length) {\n                    const handleFilter = (row) => {\n                        return filterColumns.every(({ column, valueList, itemList }) => {\n                            const { filterMethod, filterRender } = column;\n                            const compConf = isEnableConf(filterRender) ? renderer.get(filterRender.name) : null;\n                            const compFilterMethod = compConf ? (compConf.tableFilterMethod || compConf.filterMethod) : null;\n                            const tdFilterMethod = compConf ? (compConf.defaultTableFilterMethod || compConf.defaultFilterMethod) : null;\n                            const cellValue = getCellValue(row, column);\n                            if (filterMethod) {\n                                return itemList.some((item) => filterMethod({ value: item.value, option: item, cellValue, row, column, $table: $xeTable }));\n                            }\n                            else if (compFilterMethod) {\n                                return itemList.some((item) => compFilterMethod({ value: item.value, option: item, cellValue, row, column, $table: $xeTable }));\n                            }\n                            else if (allFilterMethod) {\n                                return allFilterMethod({ options: itemList, values: valueList, cellValue, row, column });\n                            }\n                            else if (tdFilterMethod) {\n                                return itemList.some((item) => tdFilterMethod({ value: item.value, option: item, cellValue, row, column, $table: $xeTable }));\n                            }\n                            return valueList.indexOf(XEUtils.get(row, column.field)) > -1;\n                        });\n                    };\n                    if (treeConfig && transform) {\n                        // 筛选虚拟树\n                        tableTree = XEUtils.searchTree(tableFullTreeData, handleFilter, Object.assign(Object.assign({}, treeOpts), { original: true }));\n                        tableData = tableTree;\n                    }\n                    else {\n                        tableData = treeConfig ? tableFullTreeData.filter(handleFilter) : tableFullData.filter(handleFilter);\n                        tableTree = tableData;\n                    }\n                }\n                else {\n                    if (treeConfig && transform) {\n                        // 还原虚拟树\n                        tableTree = XEUtils.searchTree(tableFullTreeData, () => true, Object.assign(Object.assign({}, treeOpts), { original: true }));\n                        tableData = tableTree;\n                    }\n                    else {\n                        tableData = treeConfig ? tableFullTreeData.slice(0) : tableFullData.slice(0);\n                        tableTree = tableData;\n                    }\n                }\n                // 处理排序（不能用于树形结构）\n                // 支持单列、多列、组合排序\n                if (!allRemoteSort && orderColumns.length) {\n                    if (treeConfig && transform) {\n                        // 虚拟树和列表一样，只能排序根级节点\n                        if (allSortMethod) {\n                            const sortRests = allSortMethod({ data: tableTree, sortList: orderColumns, $table: $xeTable });\n                            tableTree = XEUtils.isArray(sortRests) ? sortRests : tableTree;\n                        }\n                        else {\n                            tableTree = XEUtils.orderBy(tableTree, orderColumns.map(({ column, order }) => [getOrderField(column), order]));\n                        }\n                        tableData = tableTree;\n                    }\n                    else {\n                        if (allSortMethod) {\n                            const sortRests = allSortMethod({ data: tableData, sortList: orderColumns, $table: $xeTable });\n                            tableData = XEUtils.isArray(sortRests) ? sortRests : tableData;\n                        }\n                        else {\n                            tableData = XEUtils.orderBy(tableData, orderColumns.map(({ column, order }) => [getOrderField(column), order]));\n                        }\n                        tableTree = tableData;\n                    }\n                }\n            }\n            else {\n                if (treeConfig && transform) {\n                    // 还原虚拟树\n                    tableTree = XEUtils.searchTree(tableFullTreeData, () => true, Object.assign(Object.assign({}, treeOpts), { original: true }));\n                    tableData = tableTree;\n                }\n                else {\n                    tableData = treeConfig ? tableFullTreeData.slice(0) : tableFullData.slice(0);\n                    tableTree = tableData;\n                }\n            }\n            internalData.afterFullData = tableData;\n            internalData.afterTreeFullData = tableTree;\n            updateAfterDataIndex();\n        };\n        const updateStyle = () => {\n            const { border, showFooter, showOverflow: allColumnOverflow, showHeaderOverflow: allColumnHeaderOverflow, showFooterOverflow: allColumnFooterOverflow, mouseConfig, spanMethod, footerSpanMethod, keyboardConfig } = props;\n            const { isGroup, currentRow, tableColumn, scrollXLoad, scrollYLoad, scrollbarWidth, scrollbarHeight, columnStore, editStore, mergeList, mergeFooterList, isAllOverflow } = reactData;\n            let { visibleColumn, fullColumnIdData, tableHeight, tableWidth, headerHeight, footerHeight, elemStore, customHeight, customMinHeight, customMaxHeight } = internalData;\n            const containerList = ['main', 'left', 'right'];\n            const emptyPlaceholderElem = refEmptyPlaceholder.value;\n            const cellOffsetWidth = computeCellOffsetWidth.value;\n            const mouseOpts = computeMouseOpts.value;\n            const keyboardOpts = computeKeyboardOpts.value;\n            const bodyWrapperRef = elemStore['main-body-wrapper'];\n            const bodyWrapperElem = bodyWrapperRef ? bodyWrapperRef.value : null;\n            if (emptyPlaceholderElem) {\n                emptyPlaceholderElem.style.top = `${headerHeight}px`;\n                emptyPlaceholderElem.style.height = bodyWrapperElem ? `${bodyWrapperElem.offsetHeight - scrollbarHeight}px` : '';\n            }\n            if (customHeight > 0) {\n                if (showFooter) {\n                    customHeight += scrollbarHeight;\n                }\n            }\n            containerList.forEach((name, index) => {\n                const fixedType = index > 0 ? name : '';\n                const layoutList = ['header', 'body', 'footer'];\n                const isFixedLeft = fixedType === 'left';\n                let fixedColumn = [];\n                let fixedWrapperElem;\n                if (fixedType) {\n                    fixedColumn = isFixedLeft ? columnStore.leftList : columnStore.rightList;\n                    fixedWrapperElem = isFixedLeft ? refLeftContainer.value : refRightContainer.value;\n                }\n                layoutList.forEach(layout => {\n                    const wrapperRef = elemStore[`${name}-${layout}-wrapper`];\n                    const wrapperElem = wrapperRef ? wrapperRef.value : null;\n                    const tableRef = elemStore[`${name}-${layout}-table`];\n                    const tableElem = tableRef ? tableRef.value : null;\n                    if (layout === 'header') {\n                        // 表头体样式处理\n                        // 横向滚动渲染\n                        let tWidth = tableWidth;\n                        let renderColumnList = tableColumn;\n                        if (isGroup) {\n                            renderColumnList = visibleColumn;\n                        }\n                        else {\n                            // 如果是使用优化模式\n                            if (fixedType) {\n                                if (scrollXLoad || allColumnHeaderOverflow) {\n                                    renderColumnList = fixedColumn;\n                                }\n                            }\n                        }\n                        tWidth = renderColumnList.reduce((previous, column) => previous + column.renderWidth, 0);\n                        if (tableElem) {\n                            tableElem.style.width = tWidth ? `${tWidth + scrollbarWidth}px` : '';\n                        }\n                        const repairRef = elemStore[`${name}-${layout}-repair`];\n                        const repairElem = repairRef ? repairRef.value : null;\n                        if (repairElem) {\n                            repairElem.style.width = `${tableWidth}px`;\n                        }\n                        const listRef = elemStore[`${name}-${layout}-list`];\n                        const listElem = listRef ? listRef.value : null;\n                        if (isGroup && listElem) {\n                            XEUtils.arrayEach(listElem.querySelectorAll('.col--group'), (thElem) => {\n                                const colNode = tableMethods.getColumnNode(thElem);\n                                if (colNode) {\n                                    const column = colNode.item;\n                                    const { showHeaderOverflow } = column;\n                                    const cellOverflow = XEUtils.isBoolean(showHeaderOverflow) ? showHeaderOverflow : allColumnHeaderOverflow;\n                                    const showEllipsis = cellOverflow === 'ellipsis';\n                                    const showTitle = cellOverflow === 'title';\n                                    const showTooltip = cellOverflow === true || cellOverflow === 'tooltip';\n                                    const hasEllipsis = showTitle || showTooltip || showEllipsis;\n                                    let childWidth = 0;\n                                    let countChild = 0;\n                                    if (hasEllipsis) {\n                                        XEUtils.eachTree(column.children, (item) => {\n                                            if (!item.children || !column.children.length) {\n                                                countChild++;\n                                            }\n                                            childWidth += item.renderWidth;\n                                        }, { children: 'children' });\n                                    }\n                                    thElem.style.width = hasEllipsis ? `${childWidth - countChild - (border ? 2 : 0)}px` : '';\n                                }\n                            });\n                        }\n                    }\n                    else if (layout === 'body') {\n                        const emptyBlockRef = elemStore[`${name}-${layout}-emptyBlock`];\n                        const emptyBlockElem = emptyBlockRef ? emptyBlockRef.value : null;\n                        if (isNodeElement(wrapperElem)) {\n                            let bodyMaxHeight = 0;\n                            const bodyMinHeight = customMinHeight - headerHeight - footerHeight;\n                            if (customMaxHeight) {\n                                bodyMaxHeight = customMaxHeight - headerHeight - footerHeight;\n                                // 如果是固定列\n                                if (fixedType) {\n                                    bodyMaxHeight -= (showFooter ? 0 : scrollbarHeight);\n                                }\n                                bodyMaxHeight = Math.max(bodyMinHeight, bodyMaxHeight);\n                                wrapperElem.style.maxHeight = `${bodyMaxHeight}px`;\n                            }\n                            if (customHeight) {\n                                let bodyHeight = customHeight - headerHeight - footerHeight;\n                                // 如果是固定列\n                                if (fixedType) {\n                                    bodyHeight -= (showFooter ? 0 : scrollbarHeight);\n                                }\n                                if (bodyMaxHeight) {\n                                    bodyHeight = Math.min(bodyMaxHeight, bodyHeight);\n                                }\n                                wrapperElem.style.height = `${Math.max(bodyMinHeight, bodyHeight)}px`;\n                            }\n                            else {\n                                wrapperElem.style.height = '';\n                            }\n                            wrapperElem.style.minHeight = `${bodyMinHeight}px`;\n                        }\n                        // 如果是固定列\n                        if (fixedWrapperElem) {\n                            if (isNodeElement(wrapperElem)) {\n                                wrapperElem.style.top = `${headerHeight}px`;\n                            }\n                            fixedWrapperElem.style.height = `${(customHeight > 0 ? customHeight - headerHeight - footerHeight : tableHeight) + headerHeight + footerHeight - scrollbarHeight * (showFooter ? 2 : 1)}px`;\n                            fixedWrapperElem.style.width = `${fixedColumn.reduce((previous, column) => previous + column.renderWidth, isFixedLeft ? 0 : scrollbarWidth)}px`;\n                        }\n                        let tWidth = tableWidth;\n                        let renderColumnList = tableColumn;\n                        // 如果是使用优化模式\n                        if (fixedType) {\n                            // 如果存在展开行使用全量渲染\n                            if (!reactData.expandColumn && (scrollYLoad || (allColumnOverflow ? isAllOverflow : allColumnOverflow))) {\n                                if (!mergeList.length && !spanMethod && !(keyboardConfig && keyboardOpts.isMerge)) {\n                                    renderColumnList = fixedColumn;\n                                }\n                                else {\n                                    renderColumnList = visibleColumn;\n                                }\n                            }\n                            else {\n                                renderColumnList = visibleColumn;\n                            }\n                        }\n                        tWidth = renderColumnList.reduce((previous, column) => previous + column.renderWidth, 0);\n                        if (tableElem) {\n                            tableElem.style.width = tWidth ? `${tWidth}px` : '';\n                            // 兼容性处理\n                            tableElem.style.paddingRight = scrollbarWidth && fixedType && (browse['-moz'] || browse.safari) ? `${scrollbarWidth}px` : '';\n                        }\n                        if (emptyBlockElem) {\n                            emptyBlockElem.style.width = tWidth ? `${tWidth}px` : '';\n                        }\n                    }\n                    else if (layout === 'footer') {\n                        let tWidth = tableWidth;\n                        let renderColumnList = tableColumn;\n                        // 如果是使用优化模式\n                        if (fixedType) {\n                            // 如果存在展开行使用全量渲染\n                            if (!reactData.expandColumn && (scrollXLoad || allColumnFooterOverflow)) {\n                                if (!mergeFooterList.length || !footerSpanMethod) {\n                                    renderColumnList = fixedColumn;\n                                }\n                                else {\n                                    renderColumnList = visibleColumn;\n                                }\n                            }\n                            else {\n                                renderColumnList = visibleColumn;\n                            }\n                        }\n                        tWidth = renderColumnList.reduce((previous, column) => previous + column.renderWidth, 0);\n                        if (isNodeElement(wrapperElem)) {\n                            // 如果是固定列\n                            if (fixedWrapperElem) {\n                                wrapperElem.style.top = `${customHeight > 0 ? customHeight - footerHeight : tableHeight + headerHeight}px`;\n                            }\n                            wrapperElem.style.marginTop = `${-Math.max(1, scrollbarHeight)}px`;\n                        }\n                        if (tableElem) {\n                            tableElem.style.width = tWidth ? `${tWidth + scrollbarWidth}px` : '';\n                        }\n                    }\n                    const colgroupRef = elemStore[`${name}-${layout}-colgroup`];\n                    const colgroupElem = colgroupRef ? colgroupRef.value : null;\n                    if (colgroupElem) {\n                        XEUtils.arrayEach(colgroupElem.children, (colElem) => {\n                            const colid = colElem.getAttribute('name');\n                            if (colid === 'col_gutter') {\n                                colElem.style.width = `${scrollbarWidth}px`;\n                            }\n                            if (fullColumnIdData[colid]) {\n                                const column = fullColumnIdData[colid].column;\n                                const { showHeaderOverflow, showFooterOverflow, showOverflow } = column;\n                                let cellOverflow;\n                                colElem.style.width = `${column.renderWidth}px`;\n                                if (layout === 'header') {\n                                    cellOverflow = XEUtils.isUndefined(showHeaderOverflow) || XEUtils.isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow;\n                                }\n                                else if (layout === 'footer') {\n                                    cellOverflow = XEUtils.isUndefined(showFooterOverflow) || XEUtils.isNull(showFooterOverflow) ? allColumnFooterOverflow : showFooterOverflow;\n                                }\n                                else {\n                                    cellOverflow = XEUtils.isUndefined(showOverflow) || XEUtils.isNull(showOverflow) ? allColumnOverflow : showOverflow;\n                                }\n                                const showEllipsis = cellOverflow === 'ellipsis';\n                                const showTitle = cellOverflow === 'title';\n                                const showTooltip = cellOverflow === true || cellOverflow === 'tooltip';\n                                let hasEllipsis = showTitle || showTooltip || showEllipsis;\n                                const listRef = elemStore[`${name}-${layout}-list`];\n                                const listElem = listRef ? listRef.value : null;\n                                // 纵向虚拟滚动不支持动态行高\n                                if (scrollYLoad && !hasEllipsis) {\n                                    hasEllipsis = true;\n                                }\n                                if (listElem) {\n                                    XEUtils.arrayEach(listElem.querySelectorAll(`.${column.id}`), (elem) => {\n                                        const colspan = parseInt(elem.getAttribute('colspan') || 1);\n                                        const cellElem = elem.querySelector('.vxe-cell');\n                                        let colWidth = column.renderWidth;\n                                        if (cellElem) {\n                                            if (colspan > 1) {\n                                                const columnIndex = tableMethods.getColumnIndex(column);\n                                                for (let index = 1; index < colspan; index++) {\n                                                    const nextColumn = tableMethods.getColumns(columnIndex + index);\n                                                    if (nextColumn) {\n                                                        colWidth += nextColumn.renderWidth;\n                                                    }\n                                                }\n                                            }\n                                            cellElem.style.width = hasEllipsis ? `${colWidth - (cellOffsetWidth * colspan)}px` : '';\n                                        }\n                                    });\n                                }\n                            }\n                        });\n                    }\n                });\n            });\n            if (currentRow) {\n                tableMethods.setCurrentRow(currentRow);\n            }\n            if (mouseConfig && mouseOpts.selected && editStore.selected.row && editStore.selected.column) {\n                $xeTable.addCellSelectedClass();\n            }\n            return nextTick();\n        };\n        const checkValidate = (type) => {\n            if ($xeTable.triggerValidate) {\n                return $xeTable.triggerValidate(type);\n            }\n            return nextTick();\n        };\n        /**\n         * 当单元格发生改变时\n         * 如果存在规则，则校验\n         */\n        const handleChangeCell = (evnt, params) => {\n            checkValidate('blur')\n                .catch((e) => e)\n                .then(() => {\n                $xeTable.handleActived(params, evnt)\n                    .then(() => checkValidate('change'))\n                    .catch((e) => e);\n            });\n        };\n        const handleDefaultSort = () => {\n            const { sortConfig } = props;\n            if (sortConfig) {\n                const sortOpts = computeSortOpts.value;\n                let { defaultSort } = sortOpts;\n                if (defaultSort) {\n                    if (!XEUtils.isArray(defaultSort)) {\n                        defaultSort = [defaultSort];\n                    }\n                    if (defaultSort.length) {\n                        (sortConfig.multiple ? defaultSort : defaultSort.slice(0, 1)).forEach((item, index) => {\n                            const { field, order } = item;\n                            if (field && order) {\n                                const column = tableMethods.getColumnByField(field);\n                                if (column && column.sortable) {\n                                    column.order = order;\n                                    column.sortTime = Date.now() + index;\n                                }\n                            }\n                        });\n                        if (!sortOpts.remote) {\n                            tablePrivateMethods.handleTableData(true).then(updateStyle);\n                        }\n                    }\n                }\n            }\n        };\n        /**\n         * 处理默认勾选\n         */\n        const handleDefaultSelectionChecked = () => {\n            const { checkboxConfig } = props;\n            if (checkboxConfig) {\n                const { fullDataRowIdData } = internalData;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const { checkAll, checkRowKeys } = checkboxOpts;\n                if (checkAll) {\n                    handleCheckedAllCheckboxRow(true, true);\n                }\n                else if (checkRowKeys) {\n                    const defSelection = [];\n                    checkRowKeys.forEach((rowid) => {\n                        if (fullDataRowIdData[rowid]) {\n                            defSelection.push(fullDataRowIdData[rowid].row);\n                        }\n                    });\n                    handleCheckedCheckboxRow(defSelection, true, true);\n                }\n            }\n        };\n        /**\n         * 处理单选框默认勾选\n         */\n        const handleDefaultRadioChecked = () => {\n            const { radioConfig } = props;\n            if (radioConfig) {\n                const { fullDataRowIdData } = internalData;\n                const radioOpts = computeRadioOpts.value;\n                const { checkRowKey: rowid, reserve } = radioOpts;\n                if (rowid) {\n                    if (fullDataRowIdData[rowid]) {\n                        handleCheckedRadioRow(fullDataRowIdData[rowid].row, true);\n                    }\n                    if (reserve) {\n                        const rowkey = getRowkey($xeTable);\n                        internalData.radioReserveRow = { [rowkey]: rowid };\n                    }\n                }\n            }\n        };\n        /**\n         * 处理默认展开行\n         */\n        const handleDefaultRowExpand = () => {\n            const { expandConfig } = props;\n            if (expandConfig) {\n                const { fullDataRowIdData } = internalData;\n                const expandOpts = computeExpandOpts.value;\n                const { expandAll, expandRowKeys } = expandOpts;\n                if (expandAll) {\n                    tableMethods.setAllRowExpand(true);\n                }\n                else if (expandRowKeys) {\n                    const defExpandeds = [];\n                    expandRowKeys.forEach((rowid) => {\n                        if (fullDataRowIdData[rowid]) {\n                            defExpandeds.push(fullDataRowIdData[rowid].row);\n                        }\n                    });\n                    tableMethods.setRowExpand(defExpandeds, true);\n                }\n            }\n        };\n        const handleRadioReserveRow = (row) => {\n            const radioOpts = computeRadioOpts.value;\n            if (radioOpts.reserve) {\n                internalData.radioReserveRow = row;\n            }\n        };\n        const handleCheckboxReserveRow = (row, checked) => {\n            const { checkboxReserveRowMap } = internalData;\n            const checkboxOpts = computeCheckboxOpts.value;\n            if (checkboxOpts.reserve) {\n                const rowid = getRowid($xeTable, row);\n                if (checked) {\n                    checkboxReserveRowMap[rowid] = row;\n                }\n                else if (checkboxReserveRowMap[rowid]) {\n                    delete checkboxReserveRowMap[rowid];\n                }\n            }\n        };\n        const handleCheckedRadioRow = (row, isForce) => {\n            const radioOpts = computeRadioOpts.value;\n            const { checkMethod } = radioOpts;\n            if (row && (isForce || (!checkMethod || checkMethod({ row })))) {\n                reactData.selectRadioRow = row;\n                handleRadioReserveRow(row);\n            }\n            return nextTick();\n        };\n        const handleCheckedCheckboxRow = (rows, value, isForce) => {\n            if (rows && !XEUtils.isArray(rows)) {\n                rows = [rows];\n            }\n            rows.forEach((row) => tablePrivateMethods.handleSelectRow({ row }, !!value, isForce));\n            return nextTick();\n        };\n        const handleCheckedAllCheckboxRow = (value, isForce) => {\n            const { treeConfig } = props;\n            const { selectCheckboxMaps } = reactData;\n            const { afterFullData, afterFullRowMaps, checkboxReserveRowMap } = internalData;\n            const treeOpts = computeTreeOpts.value;\n            const childrenField = treeOpts.children || treeOpts.childrenField;\n            const checkboxOpts = computeCheckboxOpts.value;\n            const { checkField, reserve, checkStrictly, checkMethod } = checkboxOpts;\n            const indeterminateField = checkboxOpts.indeterminateField || checkboxOpts.halfField;\n            const selectRowMaps = {};\n            // 疑惑！\n            if (!treeConfig) {\n                XEUtils.each(selectCheckboxMaps, (row, rowid) => {\n                    if (!afterFullRowMaps[rowid]) {\n                        selectRowMaps[rowid] = row;\n                    }\n                });\n            }\n            // 疑惑！\n            if (checkStrictly) {\n                reactData.isAllSelected = value;\n            }\n            else {\n                /**\n                 * 绑定属性方式（高性能，有污染）\n                 * 必须在行数据存在对应的属性，否则将不响应\n                 */\n                if (checkField) {\n                    const checkValFn = (row) => {\n                        if (isForce || (!checkMethod || checkMethod({ row }))) {\n                            if (value) {\n                                selectRowMaps[getRowid($xeTable, row)] = row;\n                            }\n                            XEUtils.set(row, checkField, value);\n                        }\n                        if (treeConfig && indeterminateField) {\n                            XEUtils.set(row, indeterminateField, false);\n                        }\n                    };\n                    // 如果存在选中方法\n                    // 如果方法成立，则更新值，否则忽略该数据\n                    if (treeConfig) {\n                        XEUtils.eachTree(afterFullData, checkValFn, { children: childrenField });\n                    }\n                    else {\n                        afterFullData.forEach(checkValFn);\n                    }\n                }\n                else {\n                    /**\n                     * 默认方式（低性能，无污染）\n                     * 无需任何属性，直接绑定\n                     */\n                    if (treeConfig) {\n                        if (value) {\n                            /**\n                             * 如果是树勾选\n                             * 如果方法成立，则添加到临时集合中\n                             */\n                            XEUtils.eachTree(afterFullData, (row) => {\n                                if (isForce || (!checkMethod || checkMethod({ row }))) {\n                                    selectRowMaps[getRowid($xeTable, row)] = row;\n                                }\n                            }, { children: childrenField });\n                        }\n                        else {\n                            /**\n                             * 如果是树取消\n                             * 如果方法成立，则不添加到临时集合中\n                             */\n                            if (!isForce && checkMethod) {\n                                XEUtils.eachTree(afterFullData, (row) => {\n                                    const rowid = getRowid($xeTable, row);\n                                    if (checkMethod({ row }) ? 0 : selectCheckboxMaps[rowid]) {\n                                        selectRowMaps[rowid] = row;\n                                    }\n                                }, { children: childrenField });\n                            }\n                        }\n                    }\n                    else {\n                        if (value) {\n                            /**\n                             * 如果是行勾选\n                             * 如果存在选中方法且成立或者本身已勾选，则添加到临时集合中\n                             * 如果不存在选中方法，则添加所有数据到临时集合中\n                             */\n                            if (!isForce && checkMethod) {\n                                afterFullData.forEach((row) => {\n                                    const rowid = getRowid($xeTable, row);\n                                    if (selectCheckboxMaps[rowid] || checkMethod({ row })) {\n                                        selectRowMaps[rowid] = row;\n                                    }\n                                });\n                            }\n                            else {\n                                afterFullData.forEach(row => {\n                                    selectRowMaps[getRowid($xeTable, row)] = row;\n                                });\n                            }\n                        }\n                        else {\n                            /**\n                             * 如果是行取消\n                             * 如果方法成立，则不添加到临时集合中；如果方法不成立则判断当前是否已勾选，如果已被勾选则添加到新集合中\n                             * 如果不存在选中方法，无需处理，临时集合默认为空\n                             */\n                            if (!isForce && checkMethod) {\n                                afterFullData.forEach((row) => {\n                                    const rowid = getRowid($xeTable, row);\n                                    if (checkMethod({ row }) ? 0 : selectCheckboxMaps[rowid]) {\n                                        selectRowMaps[rowid] = row;\n                                    }\n                                });\n                            }\n                        }\n                    }\n                }\n                if (reserve) {\n                    if (value) {\n                        XEUtils.each(selectRowMaps, (row, rowid) => {\n                            checkboxReserveRowMap[rowid] = row;\n                        });\n                    }\n                    else {\n                        afterFullData.forEach((row) => handleCheckboxReserveRow(row, false));\n                    }\n                }\n                reactData.selectCheckboxMaps = checkField ? {} : selectRowMaps;\n            }\n            reactData.treeIndeterminateMaps = {};\n            internalData.treeIndeterminateRowMaps = {};\n            tablePrivateMethods.checkSelectionStatus();\n            return nextTick();\n        };\n        // 还原展开、选中等相关状态\n        const handleReserveStatus = () => {\n            const { treeConfig } = props;\n            const { expandColumn, currentRow, selectCheckboxMaps, selectRadioRow, rowExpandedMaps, treeExpandedMaps } = reactData;\n            const { fullDataRowIdData, fullAllDataRowIdData, radioReserveRow } = internalData;\n            const expandOpts = computeExpandOpts.value;\n            const treeOpts = computeTreeOpts.value;\n            const radioOpts = computeRadioOpts.value;\n            const checkboxOpts = computeCheckboxOpts.value;\n            // 单选框\n            if (selectRadioRow && !fullAllDataRowIdData[getRowid($xeTable, selectRadioRow)]) {\n                reactData.selectRadioRow = null; // 刷新单选行状态\n            }\n            // 还原保留选中状态\n            if (radioOpts.reserve && radioReserveRow) {\n                const rowid = getRowid($xeTable, radioReserveRow);\n                if (fullDataRowIdData[rowid]) {\n                    handleCheckedRadioRow(fullDataRowIdData[rowid].row, true);\n                }\n            }\n            // 复选框\n            reactData.selectCheckboxMaps = getRecoverRowMaps(selectCheckboxMaps); // 刷新多选行状态\n            // 还原保留选中状态\n            if (checkboxOpts.reserve) {\n                handleCheckedCheckboxRow(handleReserveRow(internalData.checkboxReserveRowMap), true, true);\n            }\n            if (currentRow && !fullAllDataRowIdData[getRowid($xeTable, currentRow)]) {\n                reactData.currentRow = null; // 刷新当前行状态\n            }\n            // 行展开\n            reactData.rowExpandedMaps = expandColumn ? getRecoverRowMaps(rowExpandedMaps) : {}; // 刷新行展开状态\n            // 还原保留状态\n            if (expandColumn && expandOpts.reserve) {\n                tableMethods.setRowExpand(handleReserveRow(internalData.rowExpandedReserveRowMap), true);\n            }\n            // 树展开\n            reactData.treeExpandedMaps = treeConfig ? getRecoverRowMaps(treeExpandedMaps) : {}; // 刷新树展开状态\n            if (treeConfig && treeOpts.reserve) {\n                tableMethods.setTreeExpand(handleReserveRow(internalData.treeExpandedReserveRowMap), true);\n            }\n        };\n        /**\n         * 处理默认展开树节点\n         */\n        const handleDefaultTreeExpand = () => {\n            const { treeConfig } = props;\n            if (treeConfig) {\n                const { tableFullData } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const { expandAll, expandRowKeys } = treeOpts;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                if (expandAll) {\n                    tableMethods.setAllTreeExpand(true);\n                }\n                else if (expandRowKeys) {\n                    const defExpandeds = [];\n                    const rowkey = getRowkey($xeTable);\n                    expandRowKeys.forEach((rowid) => {\n                        const matchObj = XEUtils.findTree(tableFullData, item => rowid === XEUtils.get(item, rowkey), { children: childrenField });\n                        if (matchObj) {\n                            defExpandeds.push(matchObj.item);\n                        }\n                    });\n                    tableMethods.setTreeExpand(defExpandeds, true);\n                }\n            }\n        };\n        const handleAsyncTreeExpandChilds = (row) => {\n            const treeOpts = computeTreeOpts.value;\n            const checkboxOpts = computeCheckboxOpts.value;\n            const { transform, loadMethod } = treeOpts;\n            const { checkStrictly } = checkboxOpts;\n            return new Promise(resolve => {\n                if (loadMethod) {\n                    const { treeExpandLazyLoadedMaps } = reactData;\n                    const { fullAllDataRowIdData } = internalData;\n                    const rowid = getRowid($xeTable, row);\n                    const rest = fullAllDataRowIdData[rowid];\n                    treeExpandLazyLoadedMaps[rowid] = row;\n                    Promise.resolve(loadMethod({ $table: $xeTable, row })).then((childRecords) => {\n                        rest.treeLoaded = true;\n                        if (treeExpandLazyLoadedMaps[rowid]) {\n                            delete treeExpandLazyLoadedMaps[rowid];\n                        }\n                        if (!XEUtils.isArray(childRecords)) {\n                            childRecords = [];\n                        }\n                        if (childRecords) {\n                            return tableMethods.loadTreeChildren(row, childRecords).then(childRows => {\n                                const { treeExpandedMaps } = reactData;\n                                if (childRows.length && !treeExpandedMaps[rowid]) {\n                                    treeExpandedMaps[rowid] = row;\n                                }\n                                // 如果当前节点已选中，则展开后子节点也被选中\n                                if (!checkStrictly && tableMethods.isCheckedByCheckboxRow(row)) {\n                                    handleCheckedCheckboxRow(childRows, true);\n                                }\n                                return nextTick().then(() => {\n                                    if (transform) {\n                                        return tablePrivateMethods.handleTableData();\n                                    }\n                                });\n                            });\n                        }\n                    }).catch(() => {\n                        const { treeExpandLazyLoadedMaps } = reactData;\n                        rest.treeLoaded = false;\n                        if (treeExpandLazyLoadedMaps[rowid]) {\n                            delete treeExpandLazyLoadedMaps[rowid];\n                        }\n                    }).finally(() => {\n                        nextTick().then(() => tableMethods.recalculate()).then(() => resolve());\n                    });\n                }\n                else {\n                    resolve();\n                }\n            });\n        };\n        const handleTreeExpandReserve = (row, expanded) => {\n            const { treeExpandedReserveRowMap } = internalData;\n            const treeOpts = computeTreeOpts.value;\n            if (treeOpts.reserve) {\n                const rowid = getRowid($xeTable, row);\n                if (expanded) {\n                    treeExpandedReserveRowMap[rowid] = row;\n                }\n                else if (treeExpandedReserveRowMap[rowid]) {\n                    delete treeExpandedReserveRowMap[rowid];\n                }\n            }\n        };\n        const handleAsyncRowExpand = (row) => {\n            return new Promise(resolve => {\n                const expandOpts = computeExpandOpts.value;\n                const { loadMethod } = expandOpts;\n                if (loadMethod) {\n                    const { fullAllDataRowIdData } = internalData;\n                    const { rowExpandLazyLoadedMaps } = reactData;\n                    const rowid = getRowid($xeTable, row);\n                    const rest = fullAllDataRowIdData[rowid];\n                    rowExpandLazyLoadedMaps[rowid] = row;\n                    loadMethod({ $table: $xeTable, row, rowIndex: tableMethods.getRowIndex(row), $rowIndex: tableMethods.getVMRowIndex(row) }).then(() => {\n                        const { rowExpandedMaps } = reactData;\n                        rest.expandLoaded = true;\n                        rowExpandedMaps[rowid] = row;\n                    }).catch(() => {\n                        rest.expandLoaded = false;\n                    }).finally(() => {\n                        const { rowExpandLazyLoadedMaps } = reactData;\n                        if (rowExpandLazyLoadedMaps[rowid]) {\n                            delete rowExpandLazyLoadedMaps[rowid];\n                        }\n                        nextTick().then(() => tableMethods.recalculate()).then(() => resolve());\n                    });\n                }\n                else {\n                    resolve();\n                }\n            });\n        };\n        const handleRowExpandReserve = (row, expanded) => {\n            const { rowExpandedReserveRowMap } = internalData;\n            const expandOpts = computeExpandOpts.value;\n            if (expandOpts.reserve) {\n                const rowid = getRowid($xeTable, row);\n                if (expanded) {\n                    rowExpandedReserveRowMap[rowid] = row;\n                }\n                else if (rowExpandedReserveRowMap[rowid]) {\n                    delete rowExpandedReserveRowMap[rowid];\n                }\n            }\n        };\n        const handleDefaultMergeCells = () => {\n            const { mergeCells } = props;\n            if (mergeCells) {\n                tableMethods.setMergeCells(mergeCells);\n            }\n        };\n        const handleDefaultMergeFooterItems = () => {\n            const { mergeFooterItems } = props;\n            if (mergeFooterItems) {\n                tableMethods.setMergeFooterItems(mergeFooterItems);\n            }\n        };\n        // 计算可视渲染相关数据\n        const computeScrollLoad = () => {\n            return nextTick().then(() => {\n                const { scrollXLoad, scrollYLoad } = reactData;\n                const { scrollXStore, scrollYStore } = internalData;\n                const sYOpts = computeSYOpts.value;\n                const sXOpts = computeSXOpts.value;\n                // 计算 X 逻辑\n                if (scrollXLoad) {\n                    const { visibleSize: visibleXSize } = computeVirtualX();\n                    const offsetXSize = sXOpts.oSize ? XEUtils.toNumber(sXOpts.oSize) : (browse.edge ? 5 : 0);\n                    scrollXStore.offsetSize = offsetXSize;\n                    scrollXStore.visibleSize = visibleXSize;\n                    scrollXStore.endIndex = Math.max(scrollXStore.startIndex + scrollXStore.visibleSize + offsetXSize, scrollXStore.endIndex);\n                    tablePrivateMethods.updateScrollXData();\n                }\n                else {\n                    tablePrivateMethods.updateScrollXSpace();\n                }\n                // 计算 Y 逻辑\n                const { rowHeight, visibleSize: visibleYSize } = computeVirtualY();\n                scrollYStore.rowHeight = rowHeight;\n                if (scrollYLoad) {\n                    const offsetYSize = sYOpts.oSize ? XEUtils.toNumber(sYOpts.oSize) : (browse.edge ? 10 : 0);\n                    scrollYStore.offsetSize = offsetYSize;\n                    scrollYStore.visibleSize = visibleYSize;\n                    scrollYStore.endIndex = Math.max(scrollYStore.startIndex + visibleYSize + offsetYSize, scrollYStore.endIndex);\n                    tablePrivateMethods.updateScrollYData();\n                }\n                else {\n                    tablePrivateMethods.updateScrollYSpace();\n                }\n                reactData.rowHeight = rowHeight;\n                nextTick(updateStyle);\n            });\n        };\n        /**\n         * 加载表格数据\n         * @param {Array} datas 数据\n         */\n        const loadTableData = (datas) => {\n            const { keepSource, treeConfig } = props;\n            const { editStore, scrollYLoad: oldScrollYLoad } = reactData;\n            const { scrollYStore, scrollXStore, lastScrollLeft, lastScrollTop } = internalData;\n            const treeOpts = computeTreeOpts.value;\n            const { transform } = treeOpts;\n            const childrenField = treeOpts.children || treeOpts.childrenField;\n            let treeData = [];\n            let fullData = reactive(datas ? datas.slice(0) : []); // 转为响应式\n            if (treeConfig) {\n                if (transform) {\n                    // 树结构自动转换\n                    if (process.env.NODE_ENV === 'development') {\n                        if (!treeOpts.rowField) {\n                            errLog('vxe.error.reqProp', ['tree-config.rowField']);\n                        }\n                        if (!treeOpts.parentField) {\n                            errLog('vxe.error.reqProp', ['tree-config.parentField']);\n                        }\n                        if (!childrenField) {\n                            errLog('vxe.error.reqProp', ['tree-config.childrenField']);\n                        }\n                        if (!treeOpts.mapChildrenField) {\n                            errLog('vxe.error.reqProp', ['tree-config.mapChildrenField']);\n                        }\n                        if (childrenField === treeOpts.mapChildrenField) {\n                            errLog('vxe.error.errConflicts', ['tree-config.childrenField', 'tree-config.mapChildrenField']);\n                        }\n                        // fullData.forEach(row => {\n                        //   if (row[treeOpts.children] && row[treeOpts.children].length) {\n                        //     warnLog('vxe.error.errConflicts', ['tree-config.transform', `row.${treeOpts.children}`])\n                        //   }\n                        // })\n                    }\n                    treeData = XEUtils.toArrayTree(fullData, {\n                        key: treeOpts.rowField,\n                        parentKey: treeOpts.parentField,\n                        children: childrenField,\n                        mapChildren: treeOpts.mapChildrenField\n                    });\n                    fullData = treeData.slice(0);\n                }\n                else {\n                    treeData = fullData.slice(0);\n                }\n            }\n            scrollYStore.startIndex = 0;\n            scrollYStore.endIndex = 1;\n            scrollXStore.startIndex = 0;\n            scrollXStore.endIndex = 1;\n            reactData.scrollVMLoading = false;\n            editStore.insertMaps = {};\n            editStore.removeMaps = {};\n            const sYLoad = updateScrollYStatus(fullData);\n            reactData.scrollYLoad = sYLoad;\n            // 全量数据\n            internalData.tableFullData = fullData;\n            internalData.tableFullTreeData = treeData;\n            // 缓存数据\n            tablePrivateMethods.cacheRowMap(true);\n            // 原始数据\n            internalData.tableSynchData = datas;\n            // 克隆原数据，用于显示编辑状态，与编辑值做对比\n            if (keepSource) {\n                tablePrivateMethods.cacheSourceMap(fullData);\n            }\n            if (process.env.NODE_ENV === 'development') {\n                if (sYLoad) {\n                    if (!(props.height || props.maxHeight)) {\n                        errLog('vxe.error.reqProp', ['table.height | table.max-height | table.scroll-y={enabled: false}']);\n                    }\n                    if (!props.showOverflow) {\n                        warnLog('vxe.error.reqProp', ['table.show-overflow']);\n                    }\n                    if (props.spanMethod) {\n                        warnLog('vxe.error.scrollErrProp', ['table.span-method']);\n                    }\n                }\n            }\n            if ($xeTable.clearCellAreas && props.mouseConfig) {\n                $xeTable.clearCellAreas();\n                $xeTable.clearCopyCellArea();\n            }\n            tableMethods.clearMergeCells();\n            tableMethods.clearMergeFooterItems();\n            tablePrivateMethods.handleTableData(true);\n            tableMethods.updateFooter();\n            return nextTick().then(() => {\n                updateHeight();\n                updateStyle();\n            }).then(() => {\n                computeScrollLoad();\n            }).then(() => {\n                // 是否启用了虚拟滚动\n                if (sYLoad) {\n                    scrollYStore.endIndex = scrollYStore.visibleSize;\n                }\n                handleReserveStatus();\n                tablePrivateMethods.checkSelectionStatus();\n                return new Promise(resolve => {\n                    nextTick()\n                        .then(() => tableMethods.recalculate())\n                        .then(() => {\n                        let targetScrollLeft = lastScrollLeft;\n                        let targetScrollTop = lastScrollTop;\n                        const sXOpts = computeSXOpts.value;\n                        const sYOpts = computeSYOpts.value;\n                        // 是否在更新数据之后自动滚动重置滚动条\n                        if (sXOpts.scrollToLeftOnChange) {\n                            targetScrollLeft = 0;\n                        }\n                        if (sYOpts.scrollToTopOnChange) {\n                            targetScrollTop = 0;\n                        }\n                        // 是否变更虚拟滚动\n                        if (oldScrollYLoad === sYLoad) {\n                            restoreScrollLocation($xeTable, targetScrollLeft, targetScrollTop).then(resolve);\n                        }\n                        else {\n                            setTimeout(() => restoreScrollLocation($xeTable, targetScrollLeft, targetScrollTop).then(resolve));\n                        }\n                    });\n                });\n            });\n        };\n        /**\n         * 处理数据加载默认行为\n         * 默认执行一次，除非被重置\n         */\n        const handleLoadDefaults = () => {\n            handleDefaultSelectionChecked();\n            handleDefaultRadioChecked();\n            handleDefaultRowExpand();\n            handleDefaultTreeExpand();\n            handleDefaultMergeCells();\n            handleDefaultMergeFooterItems();\n            nextTick(() => setTimeout(() => tableMethods.recalculate()));\n        };\n        /**\n         * 处理初始化的默认行为\n         * 只会执行一次\n         */\n        const handleInitDefaults = () => {\n            handleDefaultSort();\n        };\n        const handleTableColumn = () => {\n            const { scrollXLoad } = reactData;\n            const { visibleColumn, scrollXStore, fullColumnIdData } = internalData;\n            const tableColumn = scrollXLoad ? visibleColumn.slice(scrollXStore.startIndex, scrollXStore.endIndex) : visibleColumn.slice(0);\n            tableColumn.forEach((column, $index) => {\n                const colid = column.id;\n                const rest = fullColumnIdData[colid];\n                if (rest) {\n                    rest.$index = $index;\n                }\n            });\n            reactData.tableColumn = tableColumn;\n        };\n        const loadScrollXData = () => {\n            const { mergeList, mergeFooterList } = reactData;\n            const { scrollXStore } = internalData;\n            const { startIndex, endIndex, offsetSize } = scrollXStore;\n            const { toVisibleIndex, visibleSize } = computeVirtualX();\n            const offsetItem = {\n                startIndex: Math.max(0, toVisibleIndex - 1 - offsetSize),\n                endIndex: toVisibleIndex + visibleSize + offsetSize\n            };\n            calculateMergerOffserIndex(mergeList.concat(mergeFooterList), offsetItem, 'col');\n            const { startIndex: offsetStartIndex, endIndex: offsetEndIndex } = offsetItem;\n            if (toVisibleIndex <= startIndex || toVisibleIndex >= endIndex - visibleSize - 1) {\n                if (startIndex !== offsetStartIndex || endIndex !== offsetEndIndex) {\n                    scrollXStore.startIndex = offsetStartIndex;\n                    scrollXStore.endIndex = offsetEndIndex;\n                    tablePrivateMethods.updateScrollXData();\n                }\n            }\n            tableMethods.closeTooltip();\n        };\n        // 获取所有的列，排除分组\n        const getColumnList = (columns) => {\n            const result = [];\n            columns.forEach((column) => {\n                result.push(...(column.children && column.children.length ? getColumnList(column.children) : [column]));\n            });\n            return result;\n        };\n        const parseColumns = () => {\n            const leftList = [];\n            const centerList = [];\n            const rightList = [];\n            const { isGroup, columnStore } = reactData;\n            const sXOpts = computeSXOpts.value;\n            const { collectColumn, tableFullColumn, scrollXStore, fullColumnIdData } = internalData;\n            // 如果是分组表头，如果子列全部被隐藏，则根列也隐藏\n            if (isGroup) {\n                const leftGroupList = [];\n                const centerGroupList = [];\n                const rightGroupList = [];\n                XEUtils.eachTree(collectColumn, (column, index, items, path, parent) => {\n                    const isColGroup = hasChildrenList(column);\n                    // 如果是分组，必须按组设置固定列，不允许给子列设置固定\n                    if (parent && parent.fixed) {\n                        column.fixed = parent.fixed;\n                    }\n                    if (parent && column.fixed !== parent.fixed) {\n                        errLog('vxe.error.groupFixed');\n                    }\n                    if (isColGroup) {\n                        column.visible = !!XEUtils.findTree(column.children, (subColumn) => hasChildrenList(subColumn) ? false : subColumn.visible);\n                    }\n                    else if (column.visible) {\n                        if (column.fixed === 'left') {\n                            leftList.push(column);\n                        }\n                        else if (column.fixed === 'right') {\n                            rightList.push(column);\n                        }\n                        else {\n                            centerList.push(column);\n                        }\n                    }\n                });\n                collectColumn.forEach((column) => {\n                    if (column.visible) {\n                        if (column.fixed === 'left') {\n                            leftGroupList.push(column);\n                        }\n                        else if (column.fixed === 'right') {\n                            rightGroupList.push(column);\n                        }\n                        else {\n                            centerGroupList.push(column);\n                        }\n                    }\n                });\n                reactData.tableGroupColumn = leftGroupList.concat(centerGroupList).concat(rightGroupList);\n            }\n            else {\n                // 重新分配列\n                tableFullColumn.forEach((column) => {\n                    if (column.visible) {\n                        if (column.fixed === 'left') {\n                            leftList.push(column);\n                        }\n                        else if (column.fixed === 'right') {\n                            rightList.push(column);\n                        }\n                        else {\n                            centerList.push(column);\n                        }\n                    }\n                });\n            }\n            const visibleColumn = leftList.concat(centerList).concat(rightList);\n            // 如果gt为0，则总是启用\n            const scrollXLoad = !!sXOpts.enabled && sXOpts.gt > -1 && (sXOpts.gt === 0 || sXOpts.gt < tableFullColumn.length);\n            reactData.hasFixedColumn = leftList.length > 0 || rightList.length > 0;\n            Object.assign(columnStore, { leftList, centerList, rightList });\n            if (scrollXLoad) {\n                if (process.env.NODE_ENV === 'development') {\n                    // if (props.showHeader && !props.showHeaderOverflow) {\n                    //   warnLog('vxe.error.reqProp', ['show-header-overflow'])\n                    // }\n                    // if (props.showFooter && !props.showFooterOverflow) {\n                    //   warnLog('vxe.error.reqProp', ['show-footer-overflow'])\n                    // }\n                    if (props.spanMethod) {\n                        warnLog('vxe.error.scrollErrProp', ['span-method']);\n                    }\n                    if (props.footerSpanMethod) {\n                        warnLog('vxe.error.scrollErrProp', ['footer-span-method']);\n                    }\n                }\n                const { visibleSize } = computeVirtualX();\n                scrollXStore.startIndex = 0;\n                scrollXStore.endIndex = visibleSize;\n                scrollXStore.visibleSize = visibleSize;\n            }\n            // 如果列被显示/隐藏，则清除合并状态\n            // 如果列被设置为固定，则清除合并状态\n            if (visibleColumn.length !== internalData.visibleColumn.length || !internalData.visibleColumn.every((column, index) => column === visibleColumn[index])) {\n                tableMethods.clearMergeCells();\n                tableMethods.clearMergeFooterItems();\n            }\n            reactData.scrollXLoad = scrollXLoad;\n            visibleColumn.forEach((column, index) => {\n                const colid = column.id;\n                const rest = fullColumnIdData[colid];\n                if (rest) {\n                    rest._index = index;\n                }\n            });\n            internalData.visibleColumn = visibleColumn;\n            handleTableColumn();\n            return tableMethods.updateFooter().then(() => {\n                return tableMethods.recalculate();\n            }).then(() => {\n                tableMethods.updateCellAreas();\n                return tableMethods.recalculate();\n            });\n        };\n        const initColumnSort = () => {\n            const { collectColumn } = internalData;\n            collectColumn.forEach((column, index) => {\n                const sortIndex = index + 1;\n                column.sortNumber = sortIndex;\n                column.renderSortNumber = sortIndex;\n            });\n        };\n        const handleColumn = (collectColumn) => {\n            internalData.collectColumn = collectColumn;\n            const tableFullColumn = getColumnList(collectColumn);\n            internalData.tableFullColumn = tableFullColumn;\n            reactData._isLoading = true;\n            initColumnSort();\n            return Promise.resolve(restoreCustomStorage()).then(() => {\n                reactData._isLoading = false;\n                cacheColumnMap();\n                parseColumns().then(() => {\n                    if (reactData.scrollXLoad) {\n                        loadScrollXData();\n                    }\n                });\n                tableMethods.clearMergeCells();\n                tableMethods.clearMergeFooterItems();\n                tablePrivateMethods.handleTableData(true);\n                if (process.env.NODE_ENV === 'development') {\n                    if ((reactData.scrollXLoad || reactData.scrollYLoad) && reactData.expandColumn) {\n                        warnLog('vxe.error.scrollErrProp', ['column.type=expand']);\n                    }\n                }\n                return nextTick().then(() => {\n                    if ($xeToolbar) {\n                        $xeToolbar.syncUpdate({ collectColumn, $table: $xeTable });\n                    }\n                    return tableMethods.recalculate();\n                });\n            });\n        };\n        const updateScrollYStatus = (fullData) => {\n            const { treeConfig } = props;\n            const sYOpts = computeSYOpts.value;\n            const treeOpts = computeTreeOpts.value;\n            const { transform } = treeOpts;\n            const allList = fullData || internalData.tableFullData;\n            // 如果gt为0，则总是启用\n            const scrollYLoad = (transform || !treeConfig) && !!sYOpts.enabled && sYOpts.gt > -1 && (sYOpts.gt === 0 || sYOpts.gt < allList.length);\n            reactData.scrollYLoad = scrollYLoad;\n            return scrollYLoad;\n        };\n        /**\n         * 展开与收起树节点\n         * @param rows\n         * @param expanded\n         * @returns\n         */\n        const handleBaseTreeExpand = (rows, expanded) => {\n            const { treeExpandedMaps, treeExpandLazyLoadedMaps, treeNodeColumn } = reactData;\n            const treeTempExpandedMaps = Object.assign({}, treeExpandedMaps);\n            const { fullAllDataRowIdData, tableFullData } = internalData;\n            const treeOpts = computeTreeOpts.value;\n            const { reserve, lazy, accordion, toggleMethod } = treeOpts;\n            const childrenField = treeOpts.children || treeOpts.childrenField;\n            const hasChildField = treeOpts.hasChild || treeOpts.hasChildField;\n            const result = [];\n            const columnIndex = tableMethods.getColumnIndex(treeNodeColumn);\n            const $columnIndex = tableMethods.getVMColumnIndex(treeNodeColumn);\n            let validRows = toggleMethod ? rows.filter((row) => toggleMethod({ $table: $xeTable, expanded, column: treeNodeColumn, columnIndex, $columnIndex, row })) : rows;\n            if (accordion) {\n                validRows = validRows.length ? [validRows[validRows.length - 1]] : [];\n                // 同一级只能展开一个\n                const matchObj = XEUtils.findTree(tableFullData, item => item === validRows[0], { children: childrenField });\n                if (matchObj) {\n                    matchObj.items.forEach(item => {\n                        const rowid = getRowid($xeTable, item);\n                        if (treeTempExpandedMaps[rowid]) {\n                            delete treeTempExpandedMaps[rowid];\n                        }\n                    });\n                }\n            }\n            if (expanded) {\n                validRows.forEach((row) => {\n                    const rowid = getRowid($xeTable, row);\n                    if (!treeTempExpandedMaps[rowid]) {\n                        const rest = fullAllDataRowIdData[rowid];\n                        const isLoad = lazy && row[hasChildField] && !rest.treeLoaded && !treeExpandLazyLoadedMaps[rowid];\n                        // 是否使用懒加载\n                        if (isLoad) {\n                            result.push(handleAsyncTreeExpandChilds(row));\n                        }\n                        else {\n                            if (row[childrenField] && row[childrenField].length) {\n                                treeTempExpandedMaps[rowid] = row;\n                            }\n                        }\n                    }\n                });\n            }\n            else {\n                validRows.forEach(item => {\n                    const rowid = getRowid($xeTable, item);\n                    if (treeTempExpandedMaps[rowid]) {\n                        delete treeTempExpandedMaps[rowid];\n                    }\n                });\n            }\n            if (reserve) {\n                validRows.forEach((row) => handleTreeExpandReserve(row, expanded));\n            }\n            reactData.treeExpandedMaps = treeTempExpandedMaps;\n            return Promise.all(result).then(() => {\n                return tableMethods.recalculate();\n            });\n        };\n        /**\n         * 虚拟树的展开与收起\n         * @param rows\n         * @param expanded\n         * @returns\n         */\n        const handleVirtualTreeExpand = (rows, expanded) => {\n            return handleBaseTreeExpand(rows, expanded).then(() => {\n                handleVirtualTreeToList();\n                return tablePrivateMethods.handleTableData();\n            }).then(() => {\n                return tableMethods.recalculate();\n            });\n        };\n        const handleCheckAllEvent = (evnt, value) => {\n            handleCheckedAllCheckboxRow(value);\n            if (evnt) {\n                tableMethods.dispatchEvent('checkbox-all', {\n                    records: tableMethods.getCheckboxRecords(),\n                    reserves: tableMethods.getCheckboxReserveRecords(),\n                    indeterminates: tableMethods.getCheckboxIndeterminateRecords(),\n                    checked: value\n                }, evnt);\n            }\n        };\n        /**\n         * 纵向 Y 可视渲染处理\n         */\n        const loadScrollYData = (evnt) => {\n            const { mergeList } = reactData;\n            const { scrollYStore } = internalData;\n            const { startIndex, endIndex, visibleSize, offsetSize, rowHeight } = scrollYStore;\n            const scrollBodyElem = (evnt.currentTarget || evnt.target);\n            const scrollTop = scrollBodyElem.scrollTop;\n            const toVisibleIndex = Math.floor(scrollTop / rowHeight);\n            const offsetItem = {\n                startIndex: Math.max(0, toVisibleIndex - 1 - offsetSize),\n                endIndex: toVisibleIndex + visibleSize + offsetSize\n            };\n            calculateMergerOffserIndex(mergeList, offsetItem, 'row');\n            const { startIndex: offsetStartIndex, endIndex: offsetEndIndex } = offsetItem;\n            if (toVisibleIndex <= startIndex || toVisibleIndex >= endIndex - visibleSize - 1) {\n                if (startIndex !== offsetStartIndex || endIndex !== offsetEndIndex) {\n                    scrollYStore.startIndex = offsetStartIndex;\n                    scrollYStore.endIndex = offsetEndIndex;\n                    tablePrivateMethods.updateScrollYData();\n                }\n            }\n        };\n        const createGetRowCacheProp = (prop) => {\n            return function (row) {\n                const { fullAllDataRowIdData } = internalData;\n                if (row) {\n                    const rowid = getRowid($xeTable, row);\n                    const rest = fullAllDataRowIdData[rowid];\n                    if (rest) {\n                        return rest[prop];\n                    }\n                }\n                return -1;\n            };\n        };\n        const createGetColumnCacheProp = (prop) => {\n            return function (column) {\n                const { fullColumnIdData } = internalData;\n                if (column) {\n                    const rest = fullColumnIdData[column.id];\n                    if (rest) {\n                        return rest[prop];\n                    }\n                }\n                return -1;\n            };\n        };\n        const debounceScrollY = XEUtils.debounce(function (evnt) {\n            loadScrollYData(evnt);\n        }, 20, { leading: false, trailing: true });\n        let keyCtxTimeout;\n        tableMethods = {\n            dispatchEvent(type, params, evnt) {\n                emit(type, createEvent(evnt, { $table: $xeTable, $grid: $xeGrid }, params));\n            },\n            /**\n             * 重置表格的一切数据状态\n             */\n            clearAll() {\n                return clearTableAllStatus($xeTable);\n            },\n            /**\n             * 同步 data 数据（即将废弃）\n             * 如果用了该方法，那么组件将不再记录增删改的状态，只能自行实现对应逻辑\n             * 对于某些特殊的场景，比如深层树节点元素发生变动时可能会用到\n             */\n            syncData() {\n                warnLog('vxe.error.delFunc', ['syncData', 'getData']);\n                return nextTick().then(() => {\n                    reactData.tableData = [];\n                    emit('update:data', internalData.tableFullData);\n                    return nextTick();\n                });\n            },\n            /**\n             * 手动处理数据，用于手动排序与筛选\n             * 对于手动更改了排序、筛选...等条件后需要重新处理数据时可能会用到\n             */\n            updateData() {\n                const { scrollXLoad, scrollYLoad } = reactData;\n                return tablePrivateMethods.handleTableData(true).then(() => {\n                    tableMethods.updateFooter();\n                    if (scrollXLoad || scrollYLoad) {\n                        if (scrollXLoad) {\n                            tablePrivateMethods.updateScrollXSpace();\n                        }\n                        if (scrollYLoad) {\n                            tablePrivateMethods.updateScrollYSpace();\n                        }\n                        return tableMethods.refreshScroll();\n                    }\n                }).then(() => {\n                    tableMethods.updateCellAreas();\n                    return tableMethods.recalculate(true);\n                }).then(() => {\n                    // 存在滚动行为未结束情况\n                    setTimeout(() => $xeTable.recalculate(), 50);\n                });\n            },\n            /**\n             * 重新加载数据，不会清空表格状态\n             * @param {Array} datas 数据\n             */\n            loadData(datas) {\n                const { inited, initStatus } = internalData;\n                return loadTableData(datas).then(() => {\n                    internalData.inited = true;\n                    internalData.initStatus = true;\n                    if (!initStatus) {\n                        handleLoadDefaults();\n                    }\n                    if (!inited) {\n                        handleInitDefaults();\n                    }\n                    return tableMethods.recalculate();\n                });\n            },\n            /**\n             * 重新加载数据，会清空表格状态\n             * @param {Array} datas 数据\n             */\n            reloadData(datas) {\n                const { inited } = internalData;\n                return tableMethods.clearAll()\n                    .then(() => {\n                    internalData.inited = true;\n                    internalData.initStatus = true;\n                    return loadTableData(datas);\n                })\n                    .then(() => {\n                    handleLoadDefaults();\n                    if (!inited) {\n                        handleInitDefaults();\n                    }\n                    return tableMethods.recalculate();\n                });\n            },\n            /**\n             * 修改行数据\n             */\n            setRow(rows, record) {\n                if (rows && record) {\n                    let rest = rows;\n                    if (!XEUtils.isArray(rows)) {\n                        rest = [rows];\n                    }\n                    rest.forEach(item => Object.assign(item, record));\n                }\n                return nextTick();\n            },\n            /**\n             * 局部加载行数据并恢复到初始状态\n             * 对于行数据需要局部更改的场景中可能会用到\n             * @param {Row} row 行对象\n             * @param {Object} record 新数据\n             * @param {String} field 字段名\n             */\n            reloadRow(row, record, field) {\n                const { keepSource } = props;\n                const { tableData } = reactData;\n                const { tableSourceData } = internalData;\n                if (keepSource) {\n                    const rowIndex = tableMethods.getRowIndex(row);\n                    const oRow = tableSourceData[rowIndex];\n                    if (oRow && row) {\n                        if (field) {\n                            const newValue = XEUtils.get(record || row, field);\n                            XEUtils.set(row, field, newValue);\n                            XEUtils.set(oRow, field, newValue);\n                        }\n                        else {\n                            const newRecord = XEUtils.clone(Object.assign({}, record), true);\n                            XEUtils.destructuring(oRow, Object.assign(row, newRecord));\n                        }\n                    }\n                    reactData.tableData = tableData.slice(0);\n                }\n                else {\n                    if (process.env.NODE_ENV === 'development') {\n                        warnLog('vxe.error.reqProp', ['keep-source']);\n                    }\n                }\n                return nextTick();\n            },\n            getParams() {\n                return props.params;\n            },\n            /**\n             * 用于树结构，给行数据加载子节点\n             */\n            loadTreeChildren(row, childRecords) {\n                const { keepSource } = props;\n                const { tableSourceData, fullDataRowIdData, fullAllDataRowIdData, sourceDataRowIdData } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const { transform, mapChildrenField } = treeOpts;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                const parentRest = fullAllDataRowIdData[getRowid($xeTable, row)];\n                const parentLevel = parentRest ? parentRest.level : 0;\n                return tableMethods.createData(childRecords).then((rows) => {\n                    if (keepSource) {\n                        const rowid = getRowid($xeTable, row);\n                        const matchObj = XEUtils.findTree(tableSourceData, (item) => rowid === getRowid($xeTable, item), { children: childrenField });\n                        if (matchObj) {\n                            matchObj.item[childrenField] = XEUtils.clone(rows, true);\n                        }\n                        rows.forEach(childRow => {\n                            const rowid = getRowid($xeTable, childRow);\n                            sourceDataRowIdData[rowid] = XEUtils.clone(childRow, true);\n                        });\n                    }\n                    XEUtils.eachTree(rows, (childRow, index, items, path, parent, nodes) => {\n                        const rowid = getRowid($xeTable, childRow);\n                        const parentRow = parent || parentRest.row;\n                        const rest = { row: childRow, rowid, seq: -1, index, _index: -1, $index: -1, items, parent: parentRow, level: parentLevel + nodes.length };\n                        fullDataRowIdData[rowid] = rest;\n                        fullAllDataRowIdData[rowid] = rest;\n                    }, { children: childrenField });\n                    row[childrenField] = rows;\n                    if (transform) {\n                        row[mapChildrenField] = XEUtils.clone(rows, false);\n                    }\n                    updateAfterDataIndex();\n                    return rows;\n                });\n            },\n            /**\n             * 加载列配置\n             * 对于表格列需要重载、局部递增场景下可能会用到\n             * @param {ColumnInfo} columns 列配置\n             */\n            loadColumn(columns) {\n                const collectColumn = XEUtils.mapTree(columns, column => reactive(Cell.createColumn($xeTable, column)));\n                return handleColumn(collectColumn);\n            },\n            /**\n             * 加载列配置并恢复到初始状态\n             * 对于表格列需要重载、局部递增场景下可能会用到\n             * @param {ColumnInfo} columns 列配置\n             */\n            reloadColumn(columns) {\n                return tableMethods.clearAll().then(() => {\n                    return tableMethods.loadColumn(columns);\n                });\n            },\n            /**\n             * 根据 tr 元素获取对应的 row 信息\n             * @param {Element} tr 元素\n             */\n            getRowNode(tr) {\n                if (tr) {\n                    const { fullAllDataRowIdData } = internalData;\n                    const rowid = tr.getAttribute('rowid');\n                    if (rowid) {\n                        const rest = fullAllDataRowIdData[rowid];\n                        if (rest) {\n                            return { rowid: rest.rowid, item: rest.row, index: rest.index, items: rest.items, parent: rest.parent };\n                        }\n                    }\n                }\n                return null;\n            },\n            /**\n             * 根据 th/td 元素获取对应的 column 信息\n             * @param {Element} cell 元素\n             */\n            getColumnNode(cell) {\n                if (cell) {\n                    const { fullColumnIdData } = internalData;\n                    const colid = cell.getAttribute('colid');\n                    if (colid) {\n                        const rest = fullColumnIdData[colid];\n                        if (rest) {\n                            return { colid: rest.colid, item: rest.column, index: rest.index, items: rest.items, parent: rest.parent };\n                        }\n                    }\n                }\n                return null;\n            },\n            /**\n             * 根据 row 获取序号\n             * @param {Row} row 行对象\n             */\n            getRowSeq: createGetRowCacheProp('seq'),\n            /**\n             * 根据 row 获取相对于 data 中的索引\n             * @param {Row} row 行对象\n             */\n            getRowIndex: createGetRowCacheProp('index'),\n            /**\n             * 根据 row 获取相对于当前数据中的索引\n             * @param {Row} row 行对象\n             */\n            getVTRowIndex: createGetRowCacheProp('_index'),\n            /**\n             * 根据 row 获取渲染中的虚拟索引\n             * @param {Row} row 行对象\n             */\n            getVMRowIndex: createGetRowCacheProp('$index'),\n            /**\n             * 根据 column 获取相对于 columns 中的索引\n             * @param {ColumnInfo} column 列配置\n             */\n            getColumnIndex: createGetColumnCacheProp('index'),\n            /**\n             * 根据 column 获取相对于当前表格列中的索引\n             * @param {ColumnInfo} column 列配置\n             */\n            getVTColumnIndex: createGetColumnCacheProp('_index'),\n            /**\n             * 根据 column 获取渲染中的虚拟索引\n             * @param {ColumnInfo} column 列配置\n             */\n            getVMColumnIndex: createGetColumnCacheProp('$index'),\n            /**\n             * 创建 data 对象\n             * 对于某些特殊场景可能会用到，会自动对数据的字段名进行检测，如果不存在就自动定义\n             * @param {Array} records 新数据\n             */\n            createData(records) {\n                return nextTick().then(() => {\n                    return reactive(tablePrivateMethods.defineField(records));\n                });\n            },\n            /**\n             * 创建 Row|Rows 对象\n             * 对于某些特殊场景需要对数据进行手动插入时可能会用到\n             * @param {Array/Object} records 新数据\n             */\n            createRow(records) {\n                const isArr = XEUtils.isArray(records);\n                if (!isArr) {\n                    records = [records || {}];\n                }\n                return tableMethods.createData(records).then((rows) => isArr ? rows : rows[0]);\n            },\n            /**\n             * 还原数据\n             * 如果不传任何参数，则还原整个表格\n             * 如果传 row 则还原一行\n             * 如果传 rows 则还原多行\n             * 如果还额外传了 field 则还原指定的单元格数据\n             */\n            revertData(rows, field) {\n                const { keepSource } = props;\n                const { tableSourceData, sourceDataRowIdData } = internalData;\n                if (!keepSource) {\n                    if (process.env.NODE_ENV === 'development') {\n                        warnLog('vxe.error.reqProp', ['keep-source']);\n                    }\n                    return nextTick();\n                }\n                let targetRows = rows;\n                if (rows) {\n                    if (!XEUtils.isArray(rows)) {\n                        targetRows = [rows];\n                    }\n                }\n                else {\n                    targetRows = XEUtils.toArray($xeTable.getUpdateRecords());\n                }\n                if (targetRows.length) {\n                    targetRows.forEach((row) => {\n                        if (!tableMethods.isInsertByRow(row)) {\n                            const rowid = getRowid($xeTable, row);\n                            const oRow = sourceDataRowIdData[rowid];\n                            if (oRow && row) {\n                                if (field) {\n                                    XEUtils.set(row, field, XEUtils.clone(XEUtils.get(oRow, field), true));\n                                }\n                                else {\n                                    XEUtils.destructuring(row, XEUtils.clone(oRow, true));\n                                }\n                            }\n                        }\n                    });\n                }\n                if (rows) {\n                    return nextTick();\n                }\n                return tableMethods.reloadData(tableSourceData);\n            },\n            /**\n             * 清空单元格内容\n             * 如果不创参数，则清空整个表格内容\n             * 如果传 row 则清空一行内容\n             * 如果传 rows 则清空多行内容\n             * 如果还额外传了 field 则清空指定单元格内容\n             * @param {Array/Row} rows 行数据\n             * @param {String} field 字段名\n             */\n            clearData(rows, field) {\n                const { tableFullData, visibleColumn } = internalData;\n                if (!arguments.length) {\n                    rows = tableFullData;\n                }\n                else if (rows && !XEUtils.isArray(rows)) {\n                    rows = [rows];\n                }\n                if (field) {\n                    rows.forEach((row) => XEUtils.set(row, field, null));\n                }\n                else {\n                    rows.forEach((row) => {\n                        visibleColumn.forEach((column) => {\n                            if (column.field) {\n                                setCellValue(row, column, null);\n                            }\n                        });\n                    });\n                }\n                return nextTick();\n            },\n            getCellElement(row, fieldOrColumn) {\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                if (!column) {\n                    return null;\n                }\n                const rowid = getRowid($xeTable, row);\n                const tableBody = refTableBody.value;\n                const leftBody = refTableLeftBody.value;\n                const rightBody = refTableRightBody.value;\n                let bodyElem;\n                if (column) {\n                    if (column.fixed) {\n                        if (column.fixed === 'left') {\n                            if (leftBody) {\n                                bodyElem = leftBody.$el;\n                            }\n                        }\n                        else {\n                            if (rightBody) {\n                                bodyElem = rightBody.$el;\n                            }\n                        }\n                    }\n                    if (!bodyElem) {\n                        bodyElem = tableBody.$el;\n                    }\n                    if (bodyElem) {\n                        return bodyElem.querySelector(`.vxe-body--row[rowid=\"${rowid}\"] .${column.id}`);\n                    }\n                }\n                return null;\n            },\n            getCellLabel(row, fieldOrColumn) {\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                if (!column) {\n                    return null;\n                }\n                const formatter = column.formatter;\n                const cellValue = getCellValue(row, column);\n                let cellLabel = cellValue;\n                if (formatter) {\n                    let formatData;\n                    const { fullAllDataRowIdData } = internalData;\n                    const rowid = getRowid($xeTable, row);\n                    const colid = column.id;\n                    const rest = fullAllDataRowIdData[rowid];\n                    if (rest) {\n                        formatData = rest.formatData;\n                        if (!formatData) {\n                            formatData = fullAllDataRowIdData[rowid].formatData = {};\n                        }\n                        if (rest && formatData[colid]) {\n                            if (formatData[colid].value === cellValue) {\n                                return formatData[colid].label;\n                            }\n                        }\n                    }\n                    const formatParams = { cellValue, row, rowIndex: tableMethods.getRowIndex(row), column, columnIndex: tableMethods.getColumnIndex(column) };\n                    if (XEUtils.isString(formatter)) {\n                        const gFormatOpts = formats.get(formatter);\n                        const tcFormatMethod = gFormatOpts ? (gFormatOpts.tableCellFormatMethod || gFormatOpts.cellFormatMethod) : null;\n                        cellLabel = tcFormatMethod ? tcFormatMethod(formatParams) : '';\n                    }\n                    else if (XEUtils.isArray(formatter)) {\n                        const gFormatOpts = formats.get(formatter[0]);\n                        const tcFormatMethod = gFormatOpts ? (gFormatOpts.tableCellFormatMethod || gFormatOpts.cellFormatMethod) : null;\n                        cellLabel = tcFormatMethod ? tcFormatMethod(formatParams, ...formatter.slice(1)) : '';\n                    }\n                    else {\n                        cellLabel = formatter(formatParams);\n                    }\n                    if (formatData) {\n                        formatData[colid] = { value: cellValue, label: cellLabel };\n                    }\n                }\n                return cellLabel;\n            },\n            /**\n             * 检查是否为临时行数据\n             * @param {Row} row 行对象\n             */\n            isInsertByRow(row) {\n                const { editStore } = reactData;\n                const rowid = getRowid($xeTable, row);\n                return editStore.insertMaps[rowid];\n            },\n            /**\n             * 删除所有新增的临时数据\n             * @returns\n             */\n            removeInsertRow() {\n                const { editStore } = reactData;\n                editStore.insertMaps = {};\n                return $xeTable.remove($xeTable.getInsertRecords());\n            },\n            /**\n             * 检查行或列数据是否发生改变\n             * @param {Row} row 行对象\n             * @param {String} field 字段名\n             */\n            isUpdateByRow(row, field) {\n                const { keepSource } = props;\n                const { tableFullColumn, fullDataRowIdData, sourceDataRowIdData } = internalData;\n                if (keepSource) {\n                    const rowid = getRowid($xeTable, row);\n                    // 新增的数据不需要检测\n                    if (!fullDataRowIdData[rowid]) {\n                        return false;\n                    }\n                    const oRow = sourceDataRowIdData[rowid];\n                    if (oRow) {\n                        if (arguments.length > 1) {\n                            return !eqCellValue(oRow, row, field);\n                        }\n                        for (let index = 0, len = tableFullColumn.length; index < len; index++) {\n                            const property = tableFullColumn[index].field;\n                            if (property && !eqCellValue(oRow, row, property)) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n                return false;\n            },\n            /**\n             * 获取表格的可视列，也可以指定索引获取列\n             * @param {Number} columnIndex 索引\n             */\n            getColumns(columnIndex) {\n                const columns = internalData.visibleColumn;\n                return XEUtils.isUndefined(columnIndex) ? columns.slice(0) : columns[columnIndex];\n            },\n            /**\n             * 根据列获取列的唯一主键\n             */\n            getColid(fieldOrColumn) {\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                return column ? column.id : null;\n            },\n            /**\n             * 根据列的唯一主键获取列\n             * @param {String} colid 列主键\n             */\n            getColumnById(colid) {\n                const fullColumnIdData = internalData.fullColumnIdData;\n                return colid && fullColumnIdData[colid] ? fullColumnIdData[colid].column : null;\n            },\n            /**\n             * 根据列的字段名获取列\n             * @param {String} field 字段名\n             */\n            getColumnByField(field) {\n                const fullColumnFieldData = internalData.fullColumnFieldData;\n                return field && fullColumnFieldData[field] ? fullColumnFieldData[field].column : null;\n            },\n            getParentColumn(fieldOrColumn) {\n                const fullColumnIdData = internalData.fullColumnIdData;\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                return column && column.parentId && fullColumnIdData[column.parentId] ? fullColumnIdData[column.parentId].column : null;\n            },\n            /**\n             * 获取当前表格的列\n             * 收集到的全量列、全量表头列、处理条件之后的全量表头列、当前渲染中的表头列\n             */\n            getTableColumn() {\n                return {\n                    collectColumn: internalData.collectColumn.slice(0),\n                    fullColumn: internalData.tableFullColumn.slice(0),\n                    visibleColumn: internalData.visibleColumn.slice(0),\n                    tableColumn: reactData.tableColumn.slice(0)\n                };\n            },\n            /**\n             * 获取数据，和 data 的行为一致，也可以指定索引获取数据\n             */\n            getData(rowIndex) {\n                const tableSynchData = props.data || internalData.tableSynchData;\n                return XEUtils.isUndefined(rowIndex) ? tableSynchData.slice(0) : tableSynchData[rowIndex];\n            },\n            /**\n             * 用于多选行，获取已选中的数据\n             */\n            getCheckboxRecords(isFull) {\n                const { treeConfig } = props;\n                const { tableFullData, afterFullData, afterTreeFullData, tableFullTreeData, fullDataRowIdData, afterFullRowMaps } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const { transform, mapChildrenField } = treeOpts;\n                const { checkField } = checkboxOpts;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                let rowList = [];\n                const currTableData = isFull ? (transform ? tableFullTreeData : tableFullData) : (transform ? afterTreeFullData : afterFullData);\n                if (checkField) {\n                    if (treeConfig) {\n                        rowList = XEUtils.filterTree(currTableData, row => XEUtils.get(row, checkField), { children: transform ? mapChildrenField : childrenField });\n                    }\n                    else {\n                        rowList = currTableData.filter((row) => XEUtils.get(row, checkField));\n                    }\n                }\n                else {\n                    const { selectCheckboxMaps } = reactData;\n                    XEUtils.each(selectCheckboxMaps, (row, rowid) => {\n                        if (isFull) {\n                            if (fullDataRowIdData[rowid]) {\n                                rowList.push(fullDataRowIdData[rowid].row);\n                            }\n                        }\n                        else {\n                            if (afterFullRowMaps[rowid]) {\n                                rowList.push(afterFullRowMaps[rowid]);\n                            }\n                        }\n                    });\n                }\n                return rowList;\n            },\n            /**\n             * 只对 tree-config 有效，获取行的父级\n             */\n            getParentRow(rowOrRowid) {\n                const { treeConfig } = props;\n                const { fullDataRowIdData } = internalData;\n                if (rowOrRowid && treeConfig) {\n                    let rowid;\n                    if (XEUtils.isString(rowOrRowid)) {\n                        rowid = rowOrRowid;\n                    }\n                    else {\n                        rowid = getRowid($xeTable, rowOrRowid);\n                    }\n                    if (rowid) {\n                        const rest = fullDataRowIdData[rowid];\n                        return rest ? rest.parent : null;\n                    }\n                }\n                return null;\n            },\n            /**\n             * 根据行的唯一主键获取行\n             * @param {String/Number} rowid 行主键\n             */\n            getRowById(cellValue) {\n                const { fullDataRowIdData } = internalData;\n                const rowid = XEUtils.eqNull(cellValue) ? '' : encodeURIComponent(cellValue || '');\n                return fullDataRowIdData[rowid] ? fullDataRowIdData[rowid].row : null;\n            },\n            /**\n             * 根据行获取行的唯一主键\n             * @param {Row} row 行对象\n             */\n            getRowid(row) {\n                return getRowid($xeTable, row);\n            },\n            /**\n             * 获取处理后的表格数据\n             * 如果存在筛选条件，继续处理\n             * 如果存在排序，继续处理\n             */\n            getTableData() {\n                const { tableData, footerTableData } = reactData;\n                const { tableFullData, afterFullData, tableFullTreeData } = internalData;\n                return {\n                    fullData: props.treeConfig ? tableFullTreeData.slice(0) : tableFullData.slice(0),\n                    visibleData: afterFullData.slice(0),\n                    tableData: tableData.slice(0),\n                    footerData: footerTableData.slice(0)\n                };\n            },\n            /**\n             * 设置为固定列\n             */\n            setColumnFixed(fieldOrColumn, fixed) {\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                const targetColumn = getRootColumn($xeTable, column);\n                const isMaxFixedColumn = computeIsMaxFixedColumn.value;\n                const columnOpts = computeColumnOpts.value;\n                if (targetColumn && targetColumn.fixed !== fixed) {\n                    // 是否超过最大固定列数量\n                    if (!targetColumn.fixed && isMaxFixedColumn) {\n                        if (VxeUI.modal) {\n                            VxeUI.modal.message({\n                                status: 'error',\n                                content: getI18n('vxe.table.maxFixedCol', [columnOpts.maxFixedSize])\n                            });\n                        }\n                        return nextTick();\n                    }\n                    XEUtils.eachTree([targetColumn], (column) => {\n                        column.fixed = fixed;\n                    });\n                    tablePrivateMethods.saveCustomStore('update:fixed');\n                    return tableMethods.refreshColumn();\n                }\n                return nextTick();\n            },\n            /**\n             * 取消指定固定列\n             */\n            clearColumnFixed(fieldOrColumn) {\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                const targetColumn = getRootColumn($xeTable, column);\n                if (targetColumn && targetColumn.fixed) {\n                    XEUtils.eachTree([targetColumn], (column) => {\n                        column.fixed = null;\n                    });\n                    tablePrivateMethods.saveCustomStore('update:fixed');\n                    return tableMethods.refreshColumn();\n                }\n                return nextTick();\n            },\n            /**\n             * 隐藏指定列\n             */\n            hideColumn(fieldOrColumn) {\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                if (column && column.visible) {\n                    column.visible = false;\n                    return tablePrivateMethods.handleCustom();\n                }\n                return nextTick();\n            },\n            /**\n             * 显示指定列\n             */\n            showColumn(fieldOrColumn) {\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                if (column && !column.visible) {\n                    column.visible = true;\n                    return tablePrivateMethods.handleCustom();\n                }\n                return nextTick();\n            },\n            setColumnWidth(fieldOrColumn, width) {\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                if (column) {\n                    const colWidth = XEUtils.toInteger(width);\n                    let rdWidth = colWidth;\n                    if (isScale(width)) {\n                        const tableBody = refTableBody.value;\n                        const bodyElem = tableBody ? tableBody.$el : null;\n                        const bodyWidth = bodyElem ? bodyElem.clientWidth - 1 : 0;\n                        rdWidth = Math.floor(colWidth * bodyWidth);\n                    }\n                    column.resizeWidth = rdWidth;\n                    return tableMethods.refreshColumn();\n                }\n                return nextTick();\n            },\n            getColumnWidth(fieldOrColumn) {\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                if (column) {\n                    return column.renderWidth;\n                }\n                return 0;\n            },\n            /**\n             * 手动重置列的显示隐藏、列宽拖动的状态、固定列、排序列；\n             * 如果为 true 则重置所有状态\n             * 如果已关联工具栏，则会同步更新\n             */\n            resetColumn(options) {\n                const { collectColumn } = internalData;\n                const customOpts = computeCustomOpts.value;\n                const { checkMethod } = customOpts;\n                const opts = Object.assign({\n                    visible: true,\n                    resizable: options === true,\n                    fixed: options === true,\n                    sort: options === true\n                }, options);\n                XEUtils.eachTree(collectColumn, (column) => {\n                    if (opts.resizable) {\n                        column.resizeWidth = 0;\n                    }\n                    if (opts.fixed) {\n                        column.fixed = column.defaultFixed;\n                    }\n                    if (opts.sort) {\n                        column.renderSortNumber = column.sortNumber;\n                    }\n                    if (!checkMethod || checkMethod({ column })) {\n                        column.visible = column.defaultVisible;\n                    }\n                    column.renderResizeWidth = column.renderWidth;\n                });\n                $xeTable.saveCustomStore('reset');\n                return tablePrivateMethods.handleCustom();\n            },\n            /**\n             * 刷新列信息\n             * 将固定的列左边、右边分别靠边\n             * 如果传 true 则会检查列顺序并排序\n             */\n            refreshColumn(resiveOrder) {\n                if (resiveOrder) {\n                    const columnList = XEUtils.orderBy(internalData.collectColumn, 'renderSortNumber');\n                    internalData.collectColumn = columnList;\n                    const tableFullColumn = getColumnList(columnList);\n                    internalData.tableFullColumn = tableFullColumn;\n                    cacheColumnMap();\n                }\n                return parseColumns().then(() => {\n                    return tableMethods.refreshScroll();\n                }).then(() => {\n                    return tableMethods.recalculate();\n                });\n            },\n            /**\n             * 刷新滚动操作，手动同步滚动相关位置（对于某些特殊的操作，比如滚动条错位、固定列不同步）\n             */\n            refreshScroll() {\n                const { lastScrollLeft, lastScrollTop } = internalData;\n                const tableBody = refTableBody.value;\n                const tableFooter = refTableFooter.value;\n                const leftBody = refTableLeftBody.value;\n                const rightBody = refTableRightBody.value;\n                const tableBodyElem = tableBody ? tableBody.$el : null;\n                const leftBodyElem = leftBody ? leftBody.$el : null;\n                const rightBodyElem = rightBody ? rightBody.$el : null;\n                const tableFooterElem = tableFooter ? tableFooter.$el : null;\n                return new Promise(resolve => {\n                    // 还原滚动条位置\n                    if (lastScrollLeft || lastScrollTop) {\n                        return restoreScrollLocation($xeTable, lastScrollLeft, lastScrollTop).then().then(() => {\n                            // 存在滚动行为未结束情况\n                            setTimeout(resolve, 30);\n                        });\n                    }\n                    // 重置\n                    setScrollTop(tableBodyElem, lastScrollTop);\n                    setScrollTop(leftBodyElem, lastScrollTop);\n                    setScrollTop(rightBodyElem, lastScrollTop);\n                    setScrollLeft(tableFooterElem, lastScrollLeft);\n                    // 存在滚动行为未结束情况\n                    setTimeout(resolve, 30);\n                });\n            },\n            /**\n             * 计算单元格列宽，动态分配可用剩余空间\n             * 支持 width=? width=?px width=?% min-width=? min-width=?px min-width=?%\n             */\n            recalculate(reFull) {\n                const el = refElem.value;\n                if (!el || !el.clientWidth) {\n                    return nextTick();\n                }\n                calcCellWidth();\n                autoCellWidth();\n                if (reFull === true) {\n                    // 初始化时需要在列计算之后再执行优化运算，达到最优显示效果\n                    return computeScrollLoad().then(() => {\n                        autoCellWidth();\n                        return computeScrollLoad();\n                    });\n                }\n                return computeScrollLoad();\n            },\n            openTooltip(target, content) {\n                const $commTip = refCommTooltip.value;\n                if ($commTip && $commTip.open) {\n                    return $commTip.open(target, content);\n                }\n                return nextTick();\n            },\n            /**\n             * 关闭 tooltip\n             */\n            closeTooltip() {\n                const { tooltipStore } = reactData;\n                const $tooltip = refTooltip.value;\n                const $commTip = refCommTooltip.value;\n                if (tooltipStore.visible) {\n                    Object.assign(tooltipStore, {\n                        row: null,\n                        column: null,\n                        content: null,\n                        visible: false,\n                        currOpts: {}\n                    });\n                    if ($tooltip && $tooltip.close) {\n                        $tooltip.close();\n                    }\n                }\n                if ($commTip && $commTip.close) {\n                    $commTip.close();\n                }\n                return nextTick();\n            },\n            /**\n             * 判断列头复选框是否被选中\n             */\n            isAllCheckboxChecked() {\n                return reactData.isAllSelected;\n            },\n            /**\n             * 判断列头复选框是否被半选\n             */\n            isAllCheckboxIndeterminate() {\n                return !reactData.isAllSelected && reactData.isIndeterminate;\n            },\n            /**\n             * 获取复选框半选状态的行数据\n             */\n            getCheckboxIndeterminateRecords(isFull) {\n                const { treeConfig } = props;\n                const { fullDataRowIdData } = internalData;\n                const { treeIndeterminateMaps } = reactData;\n                if (treeConfig) {\n                    const fullRest = [];\n                    const defRest = [];\n                    XEUtils.each(treeIndeterminateMaps, (item, rowid) => {\n                        if (item) {\n                            fullRest.push(item);\n                            if (fullDataRowIdData[rowid]) {\n                                defRest.push(item);\n                            }\n                        }\n                    });\n                    if (isFull) {\n                        return fullRest;\n                    }\n                    return defRest;\n                }\n                return [];\n            },\n            /**\n             * 用于多选行，设置行为选中状态，第二个参数为选中与否\n             * @param {Array/Row} rows 行数据\n             * @param {Boolean} value 是否选中\n             */\n            setCheckboxRow(rows, value) {\n                return handleCheckedCheckboxRow(rows, value, true);\n            },\n            isCheckedByCheckboxRow(row) {\n                const { selectCheckboxMaps } = reactData;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const { checkField } = checkboxOpts;\n                if (checkField) {\n                    return XEUtils.get(row, checkField);\n                }\n                return !!selectCheckboxMaps[getRowid($xeTable, row)];\n            },\n            isIndeterminateByCheckboxRow(row) {\n                const { treeIndeterminateMaps } = reactData;\n                return !!treeIndeterminateMaps[getRowid($xeTable, row)] && !tableMethods.isCheckedByCheckboxRow(row);\n            },\n            /**\n             * 多选，切换某一行的选中状态\n             */\n            toggleCheckboxRow(row) {\n                const { selectCheckboxMaps } = reactData;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const { checkField } = checkboxOpts;\n                const value = checkField ? !XEUtils.get(row, checkField) : !selectCheckboxMaps[getRowid($xeTable, row)];\n                tablePrivateMethods.handleSelectRow({ row }, value, true);\n                return nextTick();\n            },\n            /**\n             * 用于多选行，设置所有行的选中状态\n             * @param {Boolean} value 是否选中\n             */\n            setAllCheckboxRow(value) {\n                return handleCheckedAllCheckboxRow(value, true);\n            },\n            /**\n             * 获取单选框保留选中的行\n             */\n            getRadioReserveRecord(isFull) {\n                const { treeConfig } = props;\n                const { fullDataRowIdData, radioReserveRow, afterFullData } = internalData;\n                const radioOpts = computeRadioOpts.value;\n                const treeOpts = computeTreeOpts.value;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                if (radioOpts.reserve && radioReserveRow) {\n                    const rowid = getRowid($xeTable, radioReserveRow);\n                    if (isFull) {\n                        if (!fullDataRowIdData[rowid]) {\n                            return radioReserveRow;\n                        }\n                    }\n                    else {\n                        const rowkey = getRowkey($xeTable);\n                        if (treeConfig) {\n                            const matchObj = XEUtils.findTree(afterFullData, row => rowid === XEUtils.get(row, rowkey), { children: childrenField });\n                            if (matchObj) {\n                                return radioReserveRow;\n                            }\n                        }\n                        else {\n                            if (!afterFullData.some(row => rowid === XEUtils.get(row, rowkey))) {\n                                return radioReserveRow;\n                            }\n                        }\n                    }\n                }\n                return null;\n            },\n            clearRadioReserve() {\n                internalData.radioReserveRow = null;\n                return nextTick();\n            },\n            /**\n             * 获取复选框保留选中的行\n             */\n            getCheckboxReserveRecords(isFull) {\n                const { treeConfig } = props;\n                const { afterFullData, fullDataRowIdData, checkboxReserveRowMap } = internalData;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const treeOpts = computeTreeOpts.value;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                const reserveSelection = [];\n                if (checkboxOpts.reserve) {\n                    const afterFullIdMaps = {};\n                    if (treeConfig) {\n                        XEUtils.eachTree(afterFullData, row => {\n                            afterFullIdMaps[getRowid($xeTable, row)] = 1;\n                        }, { children: childrenField });\n                    }\n                    else {\n                        afterFullData.forEach(row => {\n                            afterFullIdMaps[getRowid($xeTable, row)] = 1;\n                        });\n                    }\n                    XEUtils.each(checkboxReserveRowMap, (oldRow, oldRowid) => {\n                        if (oldRow) {\n                            if (isFull) {\n                                if (!fullDataRowIdData[oldRowid]) {\n                                    reserveSelection.push(oldRow);\n                                }\n                            }\n                            else {\n                                if (!afterFullIdMaps[oldRowid]) {\n                                    reserveSelection.push(oldRow);\n                                }\n                            }\n                        }\n                    });\n                }\n                return reserveSelection;\n            },\n            clearCheckboxReserve() {\n                internalData.checkboxReserveRowMap = {};\n                return nextTick();\n            },\n            /**\n             * 多选，切换所有行的选中状态\n             */\n            toggleAllCheckboxRow() {\n                handleCheckAllEvent(null, !reactData.isAllSelected);\n                return nextTick();\n            },\n            /**\n             * 用于多选行，手动清空用户的选择\n             * 清空行为不管是否被禁用还是保留记录，都将彻底清空选中状态\n             */\n            clearCheckboxRow() {\n                const { treeConfig } = props;\n                const { tableFullData } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const { checkField, reserve } = checkboxOpts;\n                const indeterminateField = checkboxOpts.indeterminateField || checkboxOpts.halfField;\n                if (checkField) {\n                    const handleClearChecked = (item) => {\n                        if (treeConfig && indeterminateField) {\n                            XEUtils.set(item, indeterminateField, false);\n                        }\n                        XEUtils.set(item, checkField, false);\n                    };\n                    if (treeConfig) {\n                        XEUtils.eachTree(tableFullData, handleClearChecked, { children: childrenField });\n                    }\n                    else {\n                        tableFullData.forEach(handleClearChecked);\n                    }\n                }\n                if (reserve) {\n                    tableFullData.forEach((row) => handleCheckboxReserveRow(row, false));\n                }\n                reactData.isAllSelected = false;\n                reactData.isIndeterminate = false;\n                reactData.selectCheckboxMaps = {};\n                reactData.treeIndeterminateMaps = {};\n                return nextTick();\n            },\n            /**\n             * 用于当前行，设置某一行为高亮状态\n             * @param {Row} row 行对象\n             */\n            setCurrentRow(row) {\n                const rowOpts = computeRowOpts.value;\n                const el = refElem.value;\n                tableMethods.clearCurrentRow();\n                // tableMethods.clearCurrentColumn()\n                reactData.currentRow = row;\n                if (rowOpts.isCurrent || props.highlightCurrentRow) {\n                    if (el) {\n                        XEUtils.arrayEach(el.querySelectorAll(`[rowid=\"${getRowid($xeTable, row)}\"]`), elem => addClass(elem, 'row--current'));\n                    }\n                }\n                return nextTick();\n            },\n            isCheckedByRadioRow(row) {\n                return $xeTable.eqRow(reactData.selectRadioRow, row);\n            },\n            /**\n             * 用于单选行，设置某一行为选中状态\n             * @param {Row} row 行对象\n             */\n            setRadioRow(row) {\n                return handleCheckedRadioRow(row, true);\n            },\n            /**\n             * 用于当前行，手动清空当前高亮的状态\n             */\n            clearCurrentRow() {\n                const el = refElem.value;\n                reactData.currentRow = null;\n                internalData.hoverRow = null;\n                if (el) {\n                    XEUtils.arrayEach(el.querySelectorAll('.row--current'), elem => removeClass(elem, 'row--current'));\n                }\n                return nextTick();\n            },\n            /**\n             * 用于单选行，手动清空用户的选择\n             */\n            clearRadioRow() {\n                reactData.selectRadioRow = null;\n                return nextTick();\n            },\n            /**\n             * 用于当前行，获取当前行的数据\n             */\n            getCurrentRecord() {\n                const rowOpts = computeRowOpts.value;\n                return rowOpts.isCurrent || props.highlightCurrentRow ? reactData.currentRow : null;\n            },\n            /**\n             * 用于单选行，获取当已选中的数据\n             */\n            getRadioRecord(isFull) {\n                const { fullDataRowIdData, afterFullRowMaps } = internalData;\n                const { selectRadioRow } = reactData;\n                if (selectRadioRow) {\n                    const rowid = getRowid($xeTable, selectRadioRow);\n                    if (isFull) {\n                        if (fullDataRowIdData[rowid]) {\n                            return selectRadioRow;\n                        }\n                    }\n                    else {\n                        if (afterFullRowMaps[rowid]) {\n                            return selectRadioRow;\n                        }\n                    }\n                }\n                return null;\n            },\n            getCurrentColumn() {\n                const columnOpts = computeColumnOpts.value;\n                return columnOpts.isCurrent || props.highlightCurrentColumn ? reactData.currentColumn : null;\n            },\n            /**\n             * 用于当前列，设置某列行为高亮状态\n             */\n            setCurrentColumn(fieldOrColumn) {\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                if (column) {\n                    // tableMethods.clearCurrentRow()\n                    tableMethods.clearCurrentColumn();\n                    reactData.currentColumn = column;\n                }\n                return nextTick();\n            },\n            /**\n             * 用于当前列，手动清空当前高亮的状态\n             */\n            clearCurrentColumn() {\n                reactData.currentColumn = null;\n                return nextTick();\n            },\n            setPendingRow(rows, status) {\n                const pendingMaps = Object.assign({}, reactData.pendingRowMaps);\n                const pendingList = [...reactData.pendingRowList];\n                if (rows && !XEUtils.isArray(rows)) {\n                    rows = [rows];\n                }\n                if (status) {\n                    rows.forEach((row) => {\n                        const rowid = getRowid($xeTable, row);\n                        if (rowid && !pendingMaps[rowid]) {\n                            pendingList.push(row);\n                            pendingMaps[rowid] = row;\n                        }\n                    });\n                }\n                else {\n                    rows.forEach((row) => {\n                        const rowid = getRowid($xeTable, row);\n                        if (rowid && pendingMaps[rowid]) {\n                            const pendingIndex = $xeTable.findRowIndexOf(pendingList, row);\n                            if (pendingIndex > -1) {\n                                pendingList.splice(pendingIndex, 1);\n                            }\n                            delete pendingMaps[rowid];\n                        }\n                    });\n                }\n                reactData.pendingRowMaps = pendingMaps;\n                reactData.pendingRowList = pendingList;\n                return nextTick();\n            },\n            togglePendingRow(rows) {\n                const pendingMaps = Object.assign({}, reactData.pendingRowMaps);\n                const pendingList = [...reactData.pendingRowList];\n                if (rows && !XEUtils.isArray(rows)) {\n                    rows = [rows];\n                }\n                rows.forEach((row) => {\n                    const rowid = getRowid($xeTable, row);\n                    if (rowid) {\n                        if (pendingMaps[rowid]) {\n                            const pendingIndex = $xeTable.findRowIndexOf(pendingList, row);\n                            if (pendingIndex > -1) {\n                                pendingList.splice(pendingIndex, 1);\n                            }\n                            delete pendingMaps[rowid];\n                        }\n                        else {\n                            pendingList.push(row);\n                            pendingMaps[rowid] = row;\n                        }\n                    }\n                });\n                reactData.pendingRowMaps = pendingMaps;\n                reactData.pendingRowList = pendingList;\n                return nextTick();\n            },\n            hasPendingByRow(row) {\n                return tableMethods.isPendingByRow(row);\n            },\n            isPendingByRow(row) {\n                const { pendingRowMaps } = reactData;\n                const rowid = getRowid($xeTable, row);\n                return !!pendingRowMaps[rowid];\n            },\n            getPendingRecords() {\n                const { pendingRowList } = reactData;\n                return pendingRowList.slice(0);\n            },\n            clearPendingRow() {\n                reactData.pendingRowMaps = {};\n                reactData.pendingRowList = [];\n                return nextTick();\n            },\n            sort(sortConfs, sortOrder) {\n                const sortOpts = computeSortOpts.value;\n                const { multiple, remote, orders } = sortOpts;\n                if (sortConfs) {\n                    if (XEUtils.isString(sortConfs)) {\n                        sortConfs = [\n                            { field: sortConfs, order: sortOrder }\n                        ];\n                    }\n                }\n                if (!XEUtils.isArray(sortConfs)) {\n                    sortConfs = [sortConfs];\n                }\n                if (sortConfs.length) {\n                    if (!multiple) {\n                        clearAllSort();\n                    }\n                    (multiple ? sortConfs : [sortConfs[0]]).forEach((confs, index) => {\n                        let { field, order } = confs;\n                        let column = field;\n                        if (XEUtils.isString(field)) {\n                            column = tableMethods.getColumnByField(field);\n                        }\n                        if (column && column.sortable) {\n                            if (orders.indexOf(order) === -1) {\n                                order = getNextSortOrder(column);\n                            }\n                            if (column.order !== order) {\n                                column.order = order;\n                            }\n                            column.sortTime = Date.now() + index;\n                        }\n                    });\n                    // 如果是服务端排序，则跳过本地排序处理\n                    if (!remote) {\n                        tablePrivateMethods.handleTableData(true);\n                    }\n                    return nextTick().then(() => {\n                        tableMethods.updateCellAreas();\n                        return updateStyle();\n                    });\n                }\n                return nextTick();\n            },\n            /**\n             * 清空指定列的排序条件\n             * 如果为空则清空所有列的排序条件\n             * @param {String} fieldOrColumn 列或字段名\n             */\n            clearSort(fieldOrColumn) {\n                const sortOpts = computeSortOpts.value;\n                if (fieldOrColumn) {\n                    const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                    if (column) {\n                        column.order = null;\n                    }\n                }\n                else {\n                    clearAllSort();\n                }\n                if (!sortOpts.remote) {\n                    tablePrivateMethods.handleTableData(true);\n                }\n                return nextTick().then(updateStyle);\n            },\n            isSort(fieldOrColumn) {\n                if (fieldOrColumn) {\n                    const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                    return column ? column.sortable && !!column.order : false;\n                }\n                return tableMethods.getSortColumns().length > 0;\n            },\n            getSortColumns() {\n                const sortOpts = computeSortOpts.value;\n                const { multiple, chronological } = sortOpts;\n                const sortList = [];\n                const { tableFullColumn } = internalData;\n                tableFullColumn.forEach((column) => {\n                    const { field, order } = column;\n                    if (column.sortable && order) {\n                        sortList.push({ column, field, property: field, order: order, sortTime: column.sortTime });\n                    }\n                });\n                if (multiple && chronological && sortList.length > 1) {\n                    return XEUtils.orderBy(sortList, 'sortTime');\n                }\n                return sortList;\n            },\n            /**\n             * 关闭筛选\n             * @param {Event} evnt 事件\n             */\n            closeFilter() {\n                const { filterStore } = reactData;\n                const { column, visible } = filterStore;\n                Object.assign(filterStore, {\n                    isAllSelected: false,\n                    isIndeterminate: false,\n                    options: [],\n                    visible: false\n                });\n                if (visible) {\n                    $xeTable.dispatchEvent('filter-visible', { column, property: column.field, field: column.field, filterList: $xeTable.getCheckedFilters(), visible: false }, null);\n                }\n                return nextTick();\n            },\n            /**\n             * 判断指定列是否为筛选状态，如果为空则判断所有列\n             * @param {String} fieldOrColumn 字段名\n             */\n            isActiveFilterByColumn(fieldOrColumn) {\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                if (column) {\n                    return column.filters && column.filters.some((option) => option.checked);\n                }\n                return $xeTable.getCheckedFilters().length > 0;\n            },\n            isFilter(fieldOrColumn) {\n                return tableMethods.isActiveFilterByColumn(fieldOrColumn);\n            },\n            /**\n             * 判断展开行是否懒加载完成\n             * @param {Row} row 行对象\n             */\n            isRowExpandLoaded(row) {\n                const { fullAllDataRowIdData } = internalData;\n                const rest = fullAllDataRowIdData[getRowid($xeTable, row)];\n                return rest && !!rest.expandLoaded;\n            },\n            clearRowExpandLoaded(row) {\n                const { rowExpandLazyLoadedMaps } = reactData;\n                const { fullAllDataRowIdData } = internalData;\n                const expandOpts = computeExpandOpts.value;\n                const { lazy } = expandOpts;\n                const rowid = getRowid($xeTable, row);\n                const rest = fullAllDataRowIdData[rowid];\n                if (lazy && rest) {\n                    rest.expandLoaded = false;\n                    delete rowExpandLazyLoadedMaps[rowid];\n                }\n                return nextTick();\n            },\n            /**\n             * 重新懒加载展开行，并展开内容\n             * @param {Row} row 行对象\n             */\n            reloadRowExpand(row) {\n                const { rowExpandLazyLoadedMaps } = reactData;\n                const expandOpts = computeExpandOpts.value;\n                const { lazy } = expandOpts;\n                const rowid = getRowid($xeTable, row);\n                if (lazy && !rowExpandLazyLoadedMaps[rowid]) {\n                    tableMethods.clearRowExpandLoaded(row)\n                        .then(() => handleAsyncRowExpand(row));\n                }\n                return nextTick();\n            },\n            reloadExpandContent(row) {\n                if (process.env.NODE_ENV === 'development') {\n                    warnLog('vxe.error.delFunc', ['reloadExpandContent', 'reloadRowExpand']);\n                }\n                // 即将废弃\n                return tableMethods.reloadRowExpand(row);\n            },\n            /**\n             * 切换展开行\n             */\n            toggleRowExpand(row) {\n                return tableMethods.setRowExpand(row, !tableMethods.isRowExpandByRow(row));\n            },\n            /**\n             * 设置所有行的展开与否\n             * @param {Boolean} expanded 是否展开\n             */\n            setAllRowExpand(expanded) {\n                const treeOpts = computeTreeOpts.value;\n                const { tableFullData, tableFullTreeData } = internalData;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                let expandedRows = [];\n                if (props.treeConfig) {\n                    XEUtils.eachTree(tableFullTreeData, (row) => {\n                        expandedRows.push(row);\n                    }, { children: childrenField });\n                }\n                else {\n                    expandedRows = tableFullData;\n                }\n                return tableMethods.setRowExpand(expandedRows, expanded);\n            },\n            /**\n             * 设置展开行，二个参数设置这一行展开与否\n             * 支持单行\n             * 支持多行\n             * @param {Array/Row} rows 行数据\n             * @param {Boolean} expanded 是否展开\n             */\n            setRowExpand(rows, expanded) {\n                const { rowExpandedMaps, rowExpandLazyLoadedMaps, expandColumn: column } = reactData;\n                const { fullAllDataRowIdData } = internalData;\n                let rExpandedMaps = Object.assign({}, rowExpandedMaps);\n                const expandOpts = computeExpandOpts.value;\n                const { reserve, lazy, accordion, toggleMethod } = expandOpts;\n                const lazyRests = [];\n                const columnIndex = tableMethods.getColumnIndex(column);\n                const $columnIndex = tableMethods.getVMColumnIndex(column);\n                if (rows) {\n                    if (!XEUtils.isArray(rows)) {\n                        rows = [rows];\n                    }\n                    if (accordion) {\n                        // 只能同时展开一个\n                        rExpandedMaps = {};\n                        rows = rows.slice(rows.length - 1, rows.length);\n                    }\n                    const validRows = toggleMethod ? rows.filter((row) => toggleMethod({ $table: $xeTable, expanded, column, columnIndex, $columnIndex, row, rowIndex: tableMethods.getRowIndex(row), $rowIndex: tableMethods.getVMRowIndex(row) })) : rows;\n                    if (expanded) {\n                        validRows.forEach((row) => {\n                            const rowid = getRowid($xeTable, row);\n                            if (!rExpandedMaps[rowid]) {\n                                const rest = fullAllDataRowIdData[rowid];\n                                const isLoad = lazy && !rest.expandLoaded && !rowExpandLazyLoadedMaps[rowid];\n                                if (isLoad) {\n                                    lazyRests.push(handleAsyncRowExpand(row));\n                                }\n                                else {\n                                    rExpandedMaps[rowid] = row;\n                                }\n                            }\n                        });\n                    }\n                    else {\n                        validRows.forEach(item => {\n                            const rowid = getRowid($xeTable, item);\n                            if (rExpandedMaps[rowid]) {\n                                delete rExpandedMaps[rowid];\n                            }\n                        });\n                    }\n                    if (reserve) {\n                        validRows.forEach((row) => handleRowExpandReserve(row, expanded));\n                    }\n                }\n                reactData.rowExpandedMaps = rExpandedMaps;\n                return Promise.all(lazyRests).then(() => tableMethods.recalculate());\n            },\n            /**\n             * 判断行是否为展开状态\n             * @param {Row} row 行对象\n             */\n            isRowExpandByRow(row) {\n                const { rowExpandedMaps } = reactData;\n                const rowid = getRowid($xeTable, row);\n                return !!rowExpandedMaps[rowid];\n            },\n            isExpandByRow(row) {\n                // 已废弃\n                if (process.env.NODE_ENV === 'development') {\n                    warnLog('vxe.error.delFunc', ['isExpandByRow', 'isRowExpandByRow']);\n                }\n                return tableMethods.isRowExpandByRow(row);\n            },\n            /**\n             * 手动清空展开行状态，数据会恢复成未展开的状态\n             */\n            clearRowExpand() {\n                const { tableFullData } = internalData;\n                const expandOpts = computeExpandOpts.value;\n                const { reserve } = expandOpts;\n                const expList = tableMethods.getRowExpandRecords();\n                reactData.rowExpandedMaps = {};\n                if (reserve) {\n                    tableFullData.forEach((row) => handleRowExpandReserve(row, false));\n                }\n                return nextTick().then(() => {\n                    if (expList.length) {\n                        tableMethods.recalculate();\n                    }\n                });\n            },\n            clearRowExpandReserve() {\n                internalData.rowExpandedReserveRowMap = {};\n                return nextTick();\n            },\n            getRowExpandRecords() {\n                const rest = [];\n                XEUtils.each(reactData.rowExpandedMaps, item => {\n                    if (item) {\n                        rest.push(item);\n                    }\n                });\n                return rest;\n            },\n            getTreeExpandRecords() {\n                const rest = [];\n                XEUtils.each(reactData.treeExpandedMaps, item => {\n                    if (item) {\n                        rest.push(item);\n                    }\n                });\n                return rest;\n            },\n            /**\n             * 判断树节点是否懒加载完成\n             * @param {Row} row 行对象\n             */\n            isTreeExpandLoaded(row) {\n                const { fullAllDataRowIdData } = internalData;\n                const rest = fullAllDataRowIdData[getRowid($xeTable, row)];\n                return rest && !!rest.treeLoaded;\n            },\n            clearTreeExpandLoaded(row) {\n                const { treeExpandedMaps } = reactData;\n                const { fullAllDataRowIdData } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const { transform, lazy } = treeOpts;\n                const rowid = getRowid($xeTable, row);\n                const rest = fullAllDataRowIdData[rowid];\n                if (lazy && rest) {\n                    rest.treeLoaded = false;\n                    if (treeExpandedMaps[rowid]) {\n                        delete treeExpandedMaps[rowid];\n                    }\n                }\n                if (transform) {\n                    handleVirtualTreeToList();\n                    return tablePrivateMethods.handleTableData();\n                }\n                return nextTick();\n            },\n            /**\n             * 重新懒加载树节点，并展开该节点\n             * @param {Row} row 行对象\n             */\n            reloadTreeExpand(row) {\n                const { treeExpandLazyLoadedMaps } = reactData;\n                const treeOpts = computeTreeOpts.value;\n                const hasChildField = treeOpts.hasChild || treeOpts.hasChildField;\n                const { transform, lazy } = treeOpts;\n                const rowid = getRowid($xeTable, row);\n                if (lazy && row[hasChildField] && !treeExpandLazyLoadedMaps[rowid]) {\n                    tableMethods.clearTreeExpandLoaded(row).then(() => {\n                        return handleAsyncTreeExpandChilds(row);\n                    }).then(() => {\n                        if (transform) {\n                            handleVirtualTreeToList();\n                            return tablePrivateMethods.handleTableData();\n                        }\n                    }).then(() => {\n                        return tableMethods.recalculate();\n                    });\n                }\n                return nextTick();\n            },\n            reloadTreeChilds(row) {\n                if (process.env.NODE_ENV === 'development') {\n                    warnLog('vxe.error.delFunc', ['reloadTreeChilds', 'reloadTreeExpand']);\n                }\n                // 即将废弃\n                return tableMethods.reloadTreeExpand(row);\n            },\n            /**\n             * 切换/展开树节点\n             */\n            toggleTreeExpand(row) {\n                return tableMethods.setTreeExpand(row, !tableMethods.isTreeExpandByRow(row));\n            },\n            /**\n             * 设置所有树节点的展开与否\n             * @param {Boolean} expanded 是否展开\n             */\n            setAllTreeExpand(expanded) {\n                const { tableFullData } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const { transform, lazy } = treeOpts;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                const expandeds = [];\n                XEUtils.eachTree(tableFullData, (row) => {\n                    const rowChildren = row[childrenField];\n                    if (lazy || (rowChildren && rowChildren.length)) {\n                        expandeds.push(row);\n                    }\n                }, { children: childrenField });\n                return tableMethods.setTreeExpand(expandeds, expanded).then(() => {\n                    if (transform) {\n                        handleVirtualTreeToList();\n                        return tableMethods.recalculate();\n                    }\n                });\n            },\n            /**\n             * 设置展开树形节点，二个参数设置这一行展开与否\n             * 支持单行\n             * 支持多行\n             * @param {Array/Row} rows 行数据\n             * @param {Boolean} expanded 是否展开\n             */\n            setTreeExpand(rows, expanded) {\n                const treeOpts = computeTreeOpts.value;\n                const { transform } = treeOpts;\n                if (rows) {\n                    if (!XEUtils.isArray(rows)) {\n                        rows = [rows];\n                    }\n                    if (rows.length) {\n                        // 如果为虚拟树\n                        if (transform) {\n                            return handleVirtualTreeExpand(rows, expanded);\n                        }\n                        else {\n                            return handleBaseTreeExpand(rows, expanded);\n                        }\n                    }\n                }\n                return nextTick();\n            },\n            /**\n             * 判断行是否为树形节点展开状态\n             * @param {Row} row 行对象\n             */\n            isTreeExpandByRow(row) {\n                const { treeExpandedMaps } = reactData;\n                return !!treeExpandedMaps[getRowid($xeTable, row)];\n            },\n            /**\n             * 手动清空树形节点的展开状态，数据会恢复成未展开的状态\n             */\n            clearTreeExpand() {\n                const { tableFullTreeData } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                const { transform, reserve } = treeOpts;\n                const expList = tableMethods.getTreeExpandRecords();\n                reactData.treeExpandedMaps = {};\n                if (reserve) {\n                    XEUtils.eachTree(tableFullTreeData, row => handleTreeExpandReserve(row, false), { children: childrenField });\n                }\n                return tablePrivateMethods.handleTableData().then(() => {\n                    if (transform) {\n                        handleVirtualTreeToList();\n                        return tablePrivateMethods.handleTableData();\n                    }\n                }).then(() => {\n                    if (expList.length) {\n                        return tableMethods.recalculate();\n                    }\n                });\n            },\n            clearTreeExpandReserve() {\n                internalData.treeExpandedReserveRowMap = {};\n                return nextTick();\n            },\n            /**\n             * 获取表格的滚动状态\n             */\n            getScroll() {\n                const { scrollXLoad, scrollYLoad } = reactData;\n                const tableBody = refTableBody.value;\n                const bodyElem = tableBody.$el;\n                return {\n                    virtualX: scrollXLoad,\n                    virtualY: scrollYLoad,\n                    scrollTop: bodyElem.scrollTop,\n                    scrollLeft: bodyElem.scrollLeft\n                };\n            },\n            /**\n             * 如果有滚动条，则滚动到对应的位置\n             * @param {Number} scrollLeft 左距离\n             * @param {Number} scrollTop 上距离\n             */\n            scrollTo(scrollLeft, scrollTop) {\n                const tableBody = refTableBody.value;\n                const tableFooter = refTableFooter.value;\n                const rightBody = refTableRightBody.value;\n                const tableBodyElem = tableBody ? tableBody.$el : null;\n                const rightBodyElem = rightBody ? rightBody.$el : null;\n                const tableFooterElem = tableFooter ? tableFooter.$el : null;\n                if (XEUtils.isNumber(scrollLeft)) {\n                    setScrollLeft(tableFooterElem || tableBodyElem, scrollLeft);\n                }\n                if (XEUtils.isNumber(scrollTop)) {\n                    setScrollTop(rightBodyElem || tableBodyElem, scrollTop);\n                }\n                if (reactData.scrollXLoad || reactData.scrollYLoad) {\n                    return new Promise(resolve => {\n                        setTimeout(() => {\n                            nextTick(() => {\n                                resolve();\n                            });\n                        }, 50);\n                    });\n                }\n                return nextTick();\n            },\n            /**\n             * 如果有滚动条，则滚动到对应的行\n             * @param {Row} row 行对象\n             * @param {ColumnInfo} fieldOrColumn 列配置\n             */\n            scrollToRow(row, fieldOrColumn) {\n                const rest = [];\n                if (row) {\n                    if (props.treeConfig) {\n                        rest.push(tablePrivateMethods.scrollToTreeRow(row));\n                    }\n                    else {\n                        rest.push(rowToVisible($xeTable, row));\n                    }\n                }\n                if (fieldOrColumn) {\n                    rest.push(tableMethods.scrollToColumn(fieldOrColumn));\n                }\n                return Promise.all(rest);\n            },\n            /**\n             * 如果有滚动条，则滚动到对应的列\n             */\n            scrollToColumn(fieldOrColumn) {\n                const { fullColumnIdData } = internalData;\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                if (column && fullColumnIdData[column.id]) {\n                    return colToVisible($xeTable, column);\n                }\n                return nextTick();\n            },\n            /**\n             * 手动清除滚动相关信息，还原到初始状态\n             */\n            clearScroll() {\n                const { scrollXStore, scrollYStore } = internalData;\n                const tableBody = refTableBody.value;\n                const tableFooter = refTableFooter.value;\n                const rightBody = refTableRightBody.value;\n                const tableBodyElem = tableBody ? tableBody.$el : null;\n                const rightBodyElem = rightBody ? rightBody.$el : null;\n                const tableFooterElem = tableFooter ? tableFooter.$el : null;\n                if (rightBodyElem) {\n                    restoreScrollListener(rightBodyElem);\n                    rightBodyElem.scrollTop = 0;\n                }\n                if (tableFooterElem) {\n                    tableFooterElem.scrollLeft = 0;\n                }\n                if (tableBodyElem) {\n                    restoreScrollListener(tableBodyElem);\n                    tableBodyElem.scrollTop = 0;\n                    tableBodyElem.scrollLeft = 0;\n                }\n                scrollXStore.startIndex = 0;\n                scrollXStore.endIndex = scrollXStore.visibleSize;\n                scrollYStore.startIndex = 0;\n                scrollYStore.endIndex = scrollYStore.visibleSize;\n                return nextTick();\n            },\n            /**\n             * 更新表尾合计\n             */\n            updateFooter() {\n                const { showFooter, footerData, footerMethod } = props;\n                const { visibleColumn, afterFullData } = internalData;\n                let footData = [];\n                if (showFooter && footerData && footerData.length) {\n                    footData = footerData.slice(0);\n                }\n                else if (showFooter && footerMethod) {\n                    footData = visibleColumn.length ? footerMethod({ columns: visibleColumn, data: afterFullData, $table: $xeTable, $grid: $xeGrid }) : [];\n                }\n                reactData.footerTableData = footData;\n                return nextTick();\n            },\n            /**\n             * 更新列状态 updateStatus({ row, column }, cellValue)\n             * 如果组件值 v-model 发生 change 时，调用改函数用于更新某一列编辑状态\n             * 如果单元格配置了校验规则，则会进行校验\n             */\n            updateStatus(slotParams, cellValue) {\n                const customVal = !XEUtils.isUndefined(cellValue);\n                return nextTick().then(() => {\n                    const { editRules } = props;\n                    const { validStore } = reactData;\n                    const tableBody = refTableBody.value;\n                    if (slotParams && tableBody && editRules) {\n                        const { row, column } = slotParams;\n                        const type = 'change';\n                        if ($xeTable.hasCellRules) {\n                            if ($xeTable.hasCellRules(type, row, column)) {\n                                const cell = tableMethods.getCellElement(row, column);\n                                if (cell) {\n                                    return $xeTable.validCellRules(type, row, column, cellValue)\n                                        .then(() => {\n                                        if (customVal && validStore.visible) {\n                                            setCellValue(row, column, cellValue);\n                                        }\n                                        $xeTable.clearValidate(row, column);\n                                    })\n                                        .catch(({ rule }) => {\n                                        if (customVal) {\n                                            setCellValue(row, column, cellValue);\n                                        }\n                                        $xeTable.showValidTooltip({ rule, row, column, cell });\n                                    });\n                                }\n                            }\n                        }\n                    }\n                });\n            },\n            /**\n             * 设置合并单元格\n             * @param {TableMergeConfig[]} merges { row: Row|number, column: ColumnInfo|number, rowspan: number, colspan: number }\n             */\n            setMergeCells(merges) {\n                if (props.spanMethod) {\n                    errLog('vxe.error.errConflicts', ['merge-cells', 'span-method']);\n                }\n                setMerges(merges, reactData.mergeList, internalData.afterFullData);\n                return nextTick().then(() => {\n                    tableMethods.updateCellAreas();\n                    return updateStyle();\n                });\n            },\n            /**\n             * 移除单元格合并\n             * @param {TableMergeConfig[]} merges 多个或数组 [{row:Row|number, col:ColumnInfo|number}]\n             */\n            removeMergeCells(merges) {\n                if (props.spanMethod) {\n                    errLog('vxe.error.errConflicts', ['merge-cells', 'span-method']);\n                }\n                const rest = removeMerges(merges, reactData.mergeList, internalData.afterFullData);\n                return nextTick().then(() => {\n                    tableMethods.updateCellAreas();\n                    updateStyle();\n                    return rest;\n                });\n            },\n            /**\n             * 获取所有被合并的单元格\n             */\n            getMergeCells() {\n                return reactData.mergeList.slice(0);\n            },\n            /**\n             * 清除所有单元格合并\n             */\n            clearMergeCells() {\n                reactData.mergeList = [];\n                return nextTick().then(() => {\n                    return updateStyle();\n                });\n            },\n            setMergeFooterItems(merges) {\n                if (props.footerSpanMethod) {\n                    errLog('vxe.error.errConflicts', ['merge-footer-items', 'footer-span-method']);\n                }\n                setMerges(merges, reactData.mergeFooterList);\n                return nextTick().then(() => {\n                    tableMethods.updateCellAreas();\n                    return updateStyle();\n                });\n            },\n            removeMergeFooterItems(merges) {\n                if (props.footerSpanMethod) {\n                    errLog('vxe.error.errConflicts', ['merge-footer-items', 'footer-span-method']);\n                }\n                const rest = removeMerges(merges, reactData.mergeFooterList);\n                return nextTick().then(() => {\n                    tableMethods.updateCellAreas();\n                    updateStyle();\n                    return rest;\n                });\n            },\n            /**\n             * 获取所有被合并的表尾\n             */\n            getMergeFooterItems() {\n                return reactData.mergeFooterList.slice(0);\n            },\n            /**\n             * 清除所有表尾合并\n             */\n            clearMergeFooterItems() {\n                reactData.mergeFooterList = [];\n                return nextTick().then(() => {\n                    return updateStyle();\n                });\n            },\n            updateCellAreas() {\n                const { mouseConfig } = props;\n                const mouseOpts = computeMouseOpts.value;\n                if (mouseConfig && mouseOpts.area && $xeTable.handleUpdateCellAreas) {\n                    return $xeTable.handleUpdateCellAreas();\n                }\n                return nextTick();\n            },\n            getCustomStoreData() {\n                const { id } = props;\n                const customOpts = computeCustomOpts.value;\n                const { collectColumn } = internalData;\n                const { checkMethod } = customOpts;\n                const resizableData = {};\n                const sortData = {};\n                const visibleData = {};\n                const fixedData = {};\n                const storeData = {\n                    resizableData: undefined,\n                    sortData: undefined,\n                    visibleData: undefined,\n                    fixedData: undefined\n                };\n                if (!id) {\n                    errLog('vxe.error.reqProp', ['id']);\n                    return storeData;\n                }\n                let hasResizable = 0;\n                let hasSort = 0;\n                let hasFixedt = 0;\n                let hasVisible = 0;\n                XEUtils.eachTree(collectColumn, (column, index, items, path, parent) => {\n                    // 只支持一级\n                    if (!parent) {\n                        collectColumn.forEach((column) => {\n                            const colKey = column.getKey();\n                            if (colKey) {\n                                hasSort = 1;\n                                sortData[colKey] = column.renderSortNumber;\n                            }\n                        });\n                        if (column.fixed && column.fixed !== column.defaultFixed) {\n                            const colKey = column.getKey();\n                            if (colKey) {\n                                hasFixedt = 1;\n                                fixedData[colKey] = column.fixed;\n                            }\n                        }\n                    }\n                    if (column.resizeWidth) {\n                        const colKey = column.getKey();\n                        if (colKey) {\n                            hasResizable = 1;\n                            resizableData[colKey] = column.renderWidth;\n                        }\n                    }\n                    if (!checkMethod || checkMethod({ column })) {\n                        if (!column.visible && column.defaultVisible) {\n                            const colKey = column.getKey();\n                            if (colKey) {\n                                hasVisible = 1;\n                                visibleData[colKey] = false;\n                            }\n                        }\n                        else if (column.visible && !column.defaultVisible) {\n                            const colKey = column.getKey();\n                            if (colKey) {\n                                hasVisible = 1;\n                                visibleData[colKey] = true;\n                            }\n                        }\n                    }\n                });\n                if (hasResizable) {\n                    storeData.resizableData = resizableData;\n                }\n                if (hasSort) {\n                    storeData.sortData = sortData;\n                }\n                if (hasFixedt) {\n                    storeData.fixedData = fixedData;\n                }\n                if (hasVisible) {\n                    storeData.visibleData = visibleData;\n                }\n                return storeData;\n            },\n            focus() {\n                internalData.isActivated = true;\n                return nextTick();\n            },\n            blur() {\n                internalData.isActivated = false;\n                return nextTick();\n            },\n            /**\n             * 连接工具栏\n             * @param $toolbar\n             */\n            connect($toolbar) {\n                if ($toolbar) {\n                    $xeToolbar = $toolbar;\n                    $xeToolbar.syncUpdate({ collectColumn: internalData.collectColumn, $table: $xeTable });\n                }\n                else {\n                    errLog('vxe.error.barUnableLink');\n                }\n                return nextTick();\n            }\n        };\n        /**\n         * 全局按下事件处理\n         */\n        const handleGlobalMousedownEvent = (evnt) => {\n            const { editStore, ctxMenuStore, filterStore, customStore } = reactData;\n            const { mouseConfig, editRules } = props;\n            const el = refElem.value;\n            const editOpts = computeEditOpts.value;\n            const validOpts = computeValidOpts.value;\n            const areaOpts = computeAreaOpts.value;\n            const { actived } = editStore;\n            const $validTooltip = refValidTooltip.value;\n            const tableFilter = refTableFilter.value;\n            const tableCustom = refTableCustom.value;\n            const tableMenu = refTableMenu.value;\n            // 筛选\n            if (tableFilter) {\n                if (getEventTargetNode(evnt, el, 'vxe-cell--filter').flag) {\n                    // 如果点击了筛选按钮\n                }\n                else if (getEventTargetNode(evnt, tableFilter.$el).flag) {\n                    // 如果点击筛选容器\n                }\n                else {\n                    if (!getEventTargetNode(evnt, document.body, 'vxe-table--ignore-clear').flag) {\n                        tablePrivateMethods.preventEvent(evnt, 'event.clearFilter', filterStore.args, tableMethods.closeFilter);\n                    }\n                }\n            }\n            // 自定义列\n            if (tableCustom) {\n                if (customStore.btnEl === evnt.target || getEventTargetNode(evnt, document.body, 'vxe-toolbar-custom-target').flag) {\n                    // 如果点击了自定义列按钮\n                }\n                else if (getEventTargetNode(evnt, tableCustom.$el).flag) {\n                    // 如果点击自定义列容器\n                }\n                else {\n                    if (!getEventTargetNode(evnt, document.body, 'vxe-table--ignore-clear').flag) {\n                        tablePrivateMethods.preventEvent(evnt, 'event.clearCustom', {}, () => {\n                            if ($xeTable.closeCustom) {\n                                $xeTable.closeCustom();\n                            }\n                        });\n                    }\n                }\n            }\n            // 如果已激活了编辑状态\n            if (actived.row) {\n                if (!(editOpts.autoClear === false)) {\n                    // 如果是激活状态，点击了单元格之外\n                    const cell = actived.args.cell;\n                    if ((!cell || !getEventTargetNode(evnt, cell).flag)) {\n                        if ($validTooltip && getEventTargetNode(evnt, $validTooltip.$el).flag) {\n                            // 如果是激活状态，且点击了校验提示框\n                        }\n                        else if (!internalData._lastCallTime || internalData._lastCallTime + 50 < Date.now()) {\n                            // 如果是激活状态，点击了单元格之外\n                            if (!getEventTargetNode(evnt, document.body, 'vxe-table--ignore-clear').flag) {\n                                // 如果手动调用了激活单元格，避免触发源被移除后导致重复关闭\n                                tablePrivateMethods.preventEvent(evnt, 'event.clearEdit', actived.args, () => {\n                                    let isClear;\n                                    if (editOpts.mode === 'row') {\n                                        const rowTargetNode = getEventTargetNode(evnt, el, 'vxe-body--row');\n                                        const rowNodeRest = rowTargetNode.flag ? tableMethods.getRowNode(rowTargetNode.targetElem) : null;\n                                        // row 方式，如果点击了不同行\n                                        isClear = rowNodeRest ? !$xeTable.eqRow(rowNodeRest.item, actived.args.row) : false;\n                                    }\n                                    else {\n                                        // cell 方式，如果是非编辑列\n                                        isClear = !getEventTargetNode(evnt, el, 'col--edit').flag;\n                                    }\n                                    // 如果点击表头行，则清除激活状态\n                                    if (!isClear) {\n                                        isClear = getEventTargetNode(evnt, el, 'vxe-header--row').flag;\n                                    }\n                                    // 如果点击表尾行，则清除激活状态\n                                    if (!isClear) {\n                                        isClear = getEventTargetNode(evnt, el, 'vxe-footer--row').flag;\n                                    }\n                                    // 如果固定了高度且点击了行之外的空白处，则清除激活状态\n                                    if (!isClear && props.height && !reactData.overflowY) {\n                                        const bodyWrapperElem = evnt.target;\n                                        if (hasClass(bodyWrapperElem, 'vxe-table--body-wrapper')) {\n                                            isClear = evnt.offsetY < bodyWrapperElem.clientHeight;\n                                        }\n                                    }\n                                    if (isClear ||\n                                        // 如果点击了当前表格之外\n                                        !getEventTargetNode(evnt, el).flag) {\n                                        setTimeout(() => $xeTable.clearEdit(evnt));\n                                    }\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n            else if (mouseConfig) {\n                if (!getEventTargetNode(evnt, el).flag && !($xeGrid && getEventTargetNode(evnt, $xeGrid.getRefMaps().refElem.value).flag) && !(tableMenu && getEventTargetNode(evnt, tableMenu.getRefMaps().refElem.value).flag) && !($xeToolbar && getEventTargetNode(evnt, $xeToolbar.getRefMaps().refElem.value).flag)) {\n                    if ($xeTable.clearSelected) {\n                        $xeTable.clearSelected();\n                    }\n                    if (areaOpts.autoClear) {\n                        if ($xeTable.getCellAreas) {\n                            const cellAreas = $xeTable.getCellAreas();\n                            if (cellAreas && cellAreas.length && !getEventTargetNode(evnt, document.body, 'vxe-table--ignore-areas-clear').flag) {\n                                tablePrivateMethods.preventEvent(evnt, 'event.clearAreas', {}, () => {\n                                    $xeTable.clearCellAreas();\n                                    $xeTable.clearCopyCellArea();\n                                    $xeTable.dispatchEvent('clear-cell-area-selection', { cellAreas }, evnt);\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n            // 如果配置了快捷菜单且，点击了其他地方则关闭\n            if ($xeTable.closeMenu) {\n                if (ctxMenuStore.visible && tableMenu && !getEventTargetNode(evnt, tableMenu.getRefMaps().refElem.value).flag) {\n                    $xeTable.closeMenu();\n                }\n            }\n            const isActivated = getEventTargetNode(evnt, $xeGrid ? $xeGrid.getRefMaps().refElem.value : el).flag;\n            // 如果存在校验，点击了表格之外则清除\n            if (!isActivated && editRules && validOpts.autoClear) {\n                reactData.validErrorMaps = {};\n            }\n            // 最后激活的表格\n            internalData.isActivated = isActivated;\n        };\n        /**\n         * 窗口失焦事件处理\n         */\n        const handleGlobalBlurEvent = () => {\n            tableMethods.closeFilter();\n            if ($xeTable.closeMenu) {\n                $xeTable.closeMenu();\n            }\n        };\n        /**\n         * 全局滚动事件\n         */\n        const handleGlobalMousewheelEvent = () => {\n            tableMethods.closeTooltip();\n            if ($xeTable.closeMenu) {\n                $xeTable.closeMenu();\n            }\n        };\n        /**\n         * 表格键盘事件\n         */\n        const keydownEvent = (evnt) => {\n            const { mouseConfig, keyboardConfig } = props;\n            const { filterStore, ctxMenuStore, editStore } = reactData;\n            const mouseOpts = computeMouseOpts.value;\n            const keyboardOpts = computeKeyboardOpts.value;\n            const { actived } = editStore;\n            const isEsc = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.ESCAPE);\n            if (isEsc) {\n                tablePrivateMethods.preventEvent(evnt, 'event.keydown', null, () => {\n                    tableMethods.dispatchEvent('keydown-start', {}, evnt);\n                    if (keyboardConfig && mouseConfig && mouseOpts.area && $xeTable.handleKeyboardEvent) {\n                        $xeTable.handleKeyboardEvent(evnt);\n                    }\n                    else if (actived.row || filterStore.visible || ctxMenuStore.visible) {\n                        evnt.stopPropagation();\n                        // 如果按下了 Esc 键，关闭快捷菜单、筛选\n                        if ($xeTable.closeMenu) {\n                            $xeTable.closeMenu();\n                        }\n                        tableMethods.closeFilter();\n                        if (keyboardConfig && keyboardOpts.isEsc) {\n                            // 如果是激活编辑状态，则取消编辑\n                            if (actived.row) {\n                                const params = actived.args;\n                                $xeTable.clearEdit(evnt);\n                                // 如果配置了选中功能，则为选中状态\n                                if (mouseOpts.selected) {\n                                    nextTick(() => $xeTable.handleSelected(params, evnt));\n                                }\n                            }\n                        }\n                    }\n                    tableMethods.dispatchEvent('keydown', {}, evnt);\n                    tableMethods.dispatchEvent('keydown-end', {}, evnt);\n                });\n            }\n        };\n        /**\n         * 全局键盘事件\n         */\n        const handleGlobalKeydownEvent = (evnt) => {\n            // 该行为只对当前激活的表格有效\n            if (internalData.isActivated) {\n                tablePrivateMethods.preventEvent(evnt, 'event.keydown', null, () => {\n                    const { mouseConfig, keyboardConfig, treeConfig, editConfig, highlightCurrentRow } = props;\n                    const { ctxMenuStore, editStore, currentRow } = reactData;\n                    const isMenu = computeIsMenu.value;\n                    const bodyMenu = computeBodyMenu.value;\n                    const keyboardOpts = computeKeyboardOpts.value;\n                    const mouseOpts = computeMouseOpts.value;\n                    const editOpts = computeEditOpts.value;\n                    const treeOpts = computeTreeOpts.value;\n                    const menuList = computeMenuList.value;\n                    const rowOpts = computeRowOpts.value;\n                    const { selected, actived } = editStore;\n                    const childrenField = treeOpts.children || treeOpts.childrenField;\n                    const keyCode = evnt.keyCode;\n                    const isEsc = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.ESCAPE);\n                    const hasBackspaceKey = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.BACKSPACE);\n                    const isTab = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.TAB);\n                    const isEnter = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.ENTER);\n                    const isSpacebar = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.SPACEBAR);\n                    const isLeftArrow = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.ARROW_LEFT);\n                    const isUpArrow = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.ARROW_UP);\n                    const isRightArrow = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.ARROW_RIGHT);\n                    const isDwArrow = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.ARROW_DOWN);\n                    const hasDeleteKey = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.DELETE);\n                    const isF2 = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.F2);\n                    const isContextMenu = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.CONTEXT_MENU);\n                    const hasMetaKey = evnt.metaKey;\n                    const hasCtrlKey = evnt.ctrlKey;\n                    const hasShiftKey = evnt.shiftKey;\n                    const isAltKey = evnt.altKey;\n                    const operArrow = isLeftArrow || isUpArrow || isRightArrow || isDwArrow;\n                    const operCtxMenu = isMenu && ctxMenuStore.visible && (isEnter || isSpacebar || operArrow);\n                    const isEditStatus = isEnableConf(editConfig) && actived.column && actived.row;\n                    const beforeEditMethod = editOpts.beforeEditMethod || editOpts.activeMethod;\n                    let params;\n                    if (operCtxMenu) {\n                        // 如果配置了右键菜单; 支持方向键操作、回车\n                        evnt.preventDefault();\n                        if (ctxMenuStore.showChild && hasChildrenList(ctxMenuStore.selected)) {\n                            $xeTable.moveCtxMenu(evnt, ctxMenuStore, 'selectChild', isLeftArrow, false, ctxMenuStore.selected.children);\n                        }\n                        else {\n                            $xeTable.moveCtxMenu(evnt, ctxMenuStore, 'selected', isRightArrow, true, menuList);\n                        }\n                    }\n                    else if (keyboardConfig && mouseConfig && mouseOpts.area && $xeTable.handleKeyboardEvent) {\n                        $xeTable.handleKeyboardEvent(evnt);\n                    }\n                    else if (isEsc) {\n                        // 如果按下了 Esc 键，关闭快捷菜单、筛选\n                        if ($xeTable.closeMenu) {\n                            $xeTable.closeMenu();\n                        }\n                        tableMethods.closeFilter();\n                        if (keyboardConfig && keyboardOpts.isEsc) {\n                            // 如果是激活编辑状态，则取消编辑\n                            if (actived.row) {\n                                const params = actived.args;\n                                $xeTable.clearEdit(evnt);\n                                // 如果配置了选中功能，则为选中状态\n                                if (mouseOpts.selected) {\n                                    nextTick(() => $xeTable.handleSelected(params, evnt));\n                                }\n                            }\n                        }\n                    }\n                    else if (isSpacebar && keyboardConfig && keyboardOpts.isChecked && selected.row && selected.column && (selected.column.type === 'checkbox' || selected.column.type === 'radio')) {\n                        // 空格键支持选中复选框\n                        evnt.preventDefault();\n                        if (selected.column.type === 'checkbox') {\n                            tablePrivateMethods.handleToggleCheckRowEvent(evnt, selected.args);\n                        }\n                        else {\n                            tablePrivateMethods.triggerRadioRowEvent(evnt, selected.args);\n                        }\n                    }\n                    else if (isF2 && isEnableConf(editConfig)) {\n                        if (!isEditStatus) {\n                            // 如果按下了 F2 键\n                            if (selected.row && selected.column) {\n                                evnt.preventDefault();\n                                $xeTable.handleActived(selected.args, evnt);\n                            }\n                        }\n                    }\n                    else if (isContextMenu) {\n                        // 如果按下上下文键\n                        internalData._keyCtx = selected.row && selected.column && bodyMenu.length;\n                        clearTimeout(keyCtxTimeout);\n                        keyCtxTimeout = setTimeout(() => {\n                            internalData._keyCtx = false;\n                        }, 1000);\n                    }\n                    else if (isEnter && !isAltKey && keyboardConfig && keyboardOpts.isEnter && (selected.row || actived.row || (treeConfig && (rowOpts.isCurrent || highlightCurrentRow) && currentRow))) {\n                        // 退出选中\n                        if (hasCtrlKey) {\n                            // 如果是激活编辑状态，则取消编辑\n                            if (actived.row) {\n                                params = actived.args;\n                                $xeTable.clearEdit(evnt);\n                                // 如果配置了选中功能，则为选中状态\n                                if (mouseOpts.selected) {\n                                    nextTick(() => $xeTable.handleSelected(params, evnt));\n                                }\n                            }\n                        }\n                        else {\n                            // 如果是激活状态，退则出到上一行/下一行\n                            if (selected.row || actived.row) {\n                                const targetArgs = selected.row ? selected.args : actived.args;\n                                if (hasShiftKey) {\n                                    if (keyboardOpts.enterToTab) {\n                                        $xeTable.moveTabSelected(targetArgs, hasShiftKey, evnt);\n                                    }\n                                    else {\n                                        $xeTable.moveSelected(targetArgs, isLeftArrow, true, isRightArrow, false, evnt);\n                                    }\n                                }\n                                else {\n                                    if (keyboardOpts.enterToTab) {\n                                        $xeTable.moveTabSelected(targetArgs, hasShiftKey, evnt);\n                                    }\n                                    else {\n                                        $xeTable.moveSelected(targetArgs, isLeftArrow, false, isRightArrow, true, evnt);\n                                    }\n                                }\n                            }\n                            else if (treeConfig && (rowOpts.isCurrent || highlightCurrentRow) && currentRow) {\n                                // 如果是树形表格当前行回车移动到子节点\n                                const childrens = currentRow[childrenField];\n                                if (childrens && childrens.length) {\n                                    evnt.preventDefault();\n                                    const targetRow = childrens[0];\n                                    params = {\n                                        $table: $xeTable,\n                                        row: targetRow,\n                                        rowIndex: tableMethods.getRowIndex(targetRow),\n                                        $rowIndex: tableMethods.getVMRowIndex(targetRow)\n                                    };\n                                    tableMethods.setTreeExpand(currentRow, true)\n                                        .then(() => tableMethods.scrollToRow(targetRow))\n                                        .then(() => tablePrivateMethods.triggerCurrentRowEvent(evnt, params));\n                                }\n                            }\n                        }\n                    }\n                    else if (operArrow && keyboardConfig && keyboardOpts.isArrow) {\n                        if (!isEditStatus) {\n                            // 如果按下了方向键\n                            if (selected.row && selected.column) {\n                                $xeTable.moveSelected(selected.args, isLeftArrow, isUpArrow, isRightArrow, isDwArrow, evnt);\n                            }\n                            else if ((isUpArrow || isDwArrow) && (rowOpts.isCurrent || highlightCurrentRow)) {\n                                // 当前行按键上下移动\n                                $xeTable.moveCurrentRow(isUpArrow, isDwArrow, evnt);\n                            }\n                        }\n                    }\n                    else if (isTab && keyboardConfig && keyboardOpts.isTab) {\n                        // 如果按下了 Tab 键切换\n                        if (selected.row || selected.column) {\n                            $xeTable.moveTabSelected(selected.args, hasShiftKey, evnt);\n                        }\n                        else if (actived.row || actived.column) {\n                            $xeTable.moveTabSelected(actived.args, hasShiftKey, evnt);\n                        }\n                    }\n                    else if (keyboardConfig && keyboardOpts.isDel && hasDeleteKey && isEnableConf(editConfig) && (selected.row || selected.column)) {\n                        // 如果是删除键\n                        if (!isEditStatus) {\n                            const { delMethod } = keyboardOpts;\n                            const delPaqrams = {\n                                row: selected.row,\n                                rowIndex: tableMethods.getRowIndex(selected.row),\n                                column: selected.column,\n                                columnIndex: tableMethods.getColumnIndex(selected.column),\n                                $table: $xeTable\n                            };\n                            // 是否被禁用\n                            if (!beforeEditMethod || beforeEditMethod(params)) {\n                                if (delMethod) {\n                                    delMethod(delPaqrams);\n                                }\n                                else {\n                                    setCellValue(selected.row, selected.column, null);\n                                }\n                                // 如果按下 del 键，更新表尾数据\n                                tableMethods.updateFooter();\n                                $xeTable.dispatchEvent('cell-delete-value', delPaqrams, evnt);\n                            }\n                        }\n                    }\n                    else if (hasBackspaceKey && keyboardConfig && keyboardOpts.isBack && isEnableConf(editConfig) && (selected.row || selected.column)) {\n                        if (!isEditStatus) {\n                            const { backMethod } = keyboardOpts;\n                            // 如果是删除键\n                            if (keyboardOpts.isDel && isEnableConf(editConfig) && (selected.row || selected.column)) {\n                                const delPaqrams = {\n                                    row: selected.row,\n                                    rowIndex: tableMethods.getRowIndex(selected.row),\n                                    column: selected.column,\n                                    columnIndex: tableMethods.getColumnIndex(selected.column),\n                                    $table: $xeTable\n                                };\n                                // 是否被禁用\n                                if (!beforeEditMethod || beforeEditMethod(params)) {\n                                    if (backMethod) {\n                                        backMethod({\n                                            row: selected.row,\n                                            rowIndex: tableMethods.getRowIndex(selected.row),\n                                            column: selected.column,\n                                            columnIndex: tableMethods.getColumnIndex(selected.column),\n                                            $table: $xeTable\n                                        });\n                                    }\n                                    else {\n                                        setCellValue(selected.row, selected.column, null);\n                                        $xeTable.handleActived(selected.args, evnt);\n                                    }\n                                    $xeTable.dispatchEvent('cell-backspace-value', delPaqrams, evnt);\n                                }\n                            }\n                        }\n                    }\n                    else if (hasBackspaceKey && keyboardConfig && treeConfig && keyboardOpts.isBack && (rowOpts.isCurrent || highlightCurrentRow) && currentRow) {\n                        // 如果树形表格回退键关闭当前行返回父节点\n                        const { parent: parentRow } = XEUtils.findTree(internalData.afterTreeFullData, item => item === currentRow, { children: childrenField });\n                        if (parentRow) {\n                            evnt.preventDefault();\n                            params = {\n                                $table: $xeTable,\n                                row: parentRow,\n                                rowIndex: tableMethods.getRowIndex(parentRow),\n                                $rowIndex: tableMethods.getVMRowIndex(parentRow)\n                            };\n                            tableMethods.setTreeExpand(parentRow, false)\n                                .then(() => tableMethods.scrollToRow(parentRow))\n                                .then(() => tablePrivateMethods.triggerCurrentRowEvent(evnt, params));\n                        }\n                    }\n                    else if (keyboardConfig && isEnableConf(editConfig) && keyboardOpts.isEdit && !hasCtrlKey && !hasMetaKey && (isSpacebar || (keyCode >= 48 && keyCode <= 57) || (keyCode >= 65 && keyCode <= 90) || (keyCode >= 96 && keyCode <= 111) || (keyCode >= 186 && keyCode <= 192) || (keyCode >= 219 && keyCode <= 222))) {\n                        const { editMethod } = keyboardOpts;\n                        // 启用编辑后，空格键功能将失效\n                        // if (isSpacebar) {\n                        //   evnt.preventDefault()\n                        // }\n                        // 如果是按下非功能键之外允许直接编辑\n                        if (selected.column && selected.row && isEnableConf(selected.column.editRender)) {\n                            const beforeEditMethod = editOpts.beforeEditMethod || editOpts.activeMethod;\n                            if (!beforeEditMethod || beforeEditMethod(Object.assign(Object.assign({}, selected.args), { $table: $xeTable, $grid: $xeGrid }))) {\n                                if (editMethod) {\n                                    editMethod({\n                                        row: selected.row,\n                                        rowIndex: tableMethods.getRowIndex(selected.row),\n                                        column: selected.column,\n                                        columnIndex: tableMethods.getColumnIndex(selected.column),\n                                        $table: $xeTable,\n                                        $grid: $xeGrid\n                                    });\n                                }\n                                else {\n                                    setCellValue(selected.row, selected.column, null);\n                                    $xeTable.handleActived(selected.args, evnt);\n                                }\n                                const afterEditMethod = editOpts.afterEditMethod;\n                                if (afterEditMethod) {\n                                    nextTick(() => {\n                                        afterEditMethod({\n                                            row: selected.row,\n                                            rowIndex: tableMethods.getRowIndex(selected.row),\n                                            column: selected.column,\n                                            columnIndex: tableMethods.getColumnIndex(selected.column),\n                                            $table: $xeTable,\n                                            $grid: $xeGrid\n                                        });\n                                    });\n                                }\n                            }\n                        }\n                    }\n                    tableMethods.dispatchEvent('keydown', {}, evnt);\n                });\n            }\n        };\n        const handleGlobalPasteEvent = (evnt) => {\n            const { keyboardConfig, mouseConfig } = props;\n            const { editStore, filterStore } = reactData;\n            const { isActivated } = internalData;\n            const mouseOpts = computeMouseOpts.value;\n            const keyboardOpts = computeKeyboardOpts.value;\n            const { actived } = editStore;\n            if (isActivated && !filterStore.visible) {\n                if (!(actived.row || actived.column)) {\n                    if (keyboardConfig && keyboardOpts.isClip && mouseConfig && mouseOpts.area && $xeTable.handlePasteCellAreaEvent) {\n                        $xeTable.handlePasteCellAreaEvent(evnt);\n                    }\n                }\n                tableMethods.dispatchEvent('paste', {}, evnt);\n            }\n        };\n        const handleGlobalCopyEvent = (evnt) => {\n            const { keyboardConfig, mouseConfig } = props;\n            const { editStore, filterStore } = reactData;\n            const { isActivated } = internalData;\n            const mouseOpts = computeMouseOpts.value;\n            const keyboardOpts = computeKeyboardOpts.value;\n            const { actived } = editStore;\n            if (isActivated && !filterStore.visible) {\n                if (!(actived.row || actived.column)) {\n                    if (keyboardConfig && keyboardOpts.isClip && mouseConfig && mouseOpts.area && $xeTable.handleCopyCellAreaEvent) {\n                        $xeTable.handleCopyCellAreaEvent(evnt);\n                    }\n                }\n                tableMethods.dispatchEvent('copy', {}, evnt);\n            }\n        };\n        const handleGlobalCutEvent = (evnt) => {\n            const { keyboardConfig, mouseConfig } = props;\n            const { editStore, filterStore } = reactData;\n            const { isActivated } = internalData;\n            const mouseOpts = computeMouseOpts.value;\n            const keyboardOpts = computeKeyboardOpts.value;\n            const { actived } = editStore;\n            if (isActivated && !filterStore.visible) {\n                if (!(actived.row || actived.column)) {\n                    if (keyboardConfig && keyboardOpts.isClip && mouseConfig && mouseOpts.area && $xeTable.handleCutCellAreaEvent) {\n                        $xeTable.handleCutCellAreaEvent(evnt);\n                    }\n                }\n                tableMethods.dispatchEvent('cut', {}, evnt);\n            }\n        };\n        const handleGlobalResizeEvent = () => {\n            if ($xeTable.closeMenu) {\n                $xeTable.closeMenu();\n            }\n            const el = refElem.value;\n            if (!el || !el.clientWidth) {\n                return nextTick();\n            }\n            tableMethods.updateCellAreas();\n            tableMethods.recalculate(true);\n        };\n        const handleTargetEnterEvent = (isClear) => {\n            const $tooltip = refTooltip.value;\n            clearTimeout(internalData.tooltipTimeout);\n            if (isClear) {\n                tableMethods.closeTooltip();\n            }\n            else {\n                if ($tooltip && $tooltip.setActived) {\n                    $tooltip.setActived(true);\n                }\n            }\n        };\n        /**\n         * 处理显示 tooltip\n         * @param {Event} evnt 事件\n         * @param {Row} row 行对象\n         */\n        const handleTooltip = (evnt, cell, overflowElem, tipElem, params) => {\n            params.cell = cell;\n            const { tooltipStore } = reactData;\n            const tooltipOpts = computeTooltipOpts.value;\n            const { column, row } = params;\n            const { showAll, contentMethod } = tooltipOpts;\n            const customContent = contentMethod ? contentMethod(params) : null;\n            const useCustom = contentMethod && !XEUtils.eqNull(customContent);\n            const content = useCustom ? customContent : XEUtils.toString(column.type === 'html' ? overflowElem.innerText : overflowElem.textContent).trim();\n            const isCellOverflow = overflowElem.scrollWidth > overflowElem.clientWidth;\n            if (content && (showAll || useCustom || isCellOverflow)) {\n                Object.assign(tooltipStore, {\n                    row,\n                    column,\n                    visible: true,\n                    currOpts: {}\n                });\n                nextTick(() => {\n                    const $tooltip = refTooltip.value;\n                    if ($tooltip && $tooltip.open) {\n                        $tooltip.open(isCellOverflow ? overflowElem : (tipElem || overflowElem), formatText(content));\n                    }\n                });\n            }\n            return nextTick();\n        };\n        /**\n         * 内部方法\n         */\n        tablePrivateMethods = {\n            getSetupOptions() {\n                return getConfig();\n            },\n            updateAfterDataIndex,\n            callSlot(slotFunc, params) {\n                if (slotFunc) {\n                    if ($xeGrid) {\n                        return $xeGrid.callSlot(slotFunc, params);\n                    }\n                    if (XEUtils.isFunction(slotFunc)) {\n                        return getSlotVNs(slotFunc(params));\n                    }\n                }\n                return [];\n            },\n            /**\n             * 获取父容器元素\n             */\n            getParentElem() {\n                const el = refElem.value;\n                if ($xeGrid) {\n                    const gridEl = $xeGrid.getRefMaps().refElem.value;\n                    return gridEl ? gridEl.parentNode : null;\n                }\n                return el ? el.parentNode : null;\n            },\n            /**\n             * 获取父容器的高度\n             */\n            getParentHeight() {\n                const { height } = props;\n                const el = refElem.value;\n                if (el) {\n                    const parentElem = el.parentNode;\n                    const parentPaddingSize = height === 'fill' || height === 'auto' ? getPaddingTopBottomSize(parentElem) : 0;\n                    return Math.floor($xeGrid ? $xeGrid.getParentHeight() : XEUtils.toNumber(getComputedStyle(parentElem).height) - parentPaddingSize);\n                }\n                return 0;\n            },\n            /**\n             * 获取需要排除的高度\n             * 但渲染表格高度时，需要排除工具栏或分页等相关组件的高度\n             * 如果存在表尾合计滚动条，则需要排除滚动条高度\n             */\n            getExcludeHeight() {\n                return $xeGrid ? $xeGrid.getExcludeHeight() : 0;\n            },\n            /**\n             * 定义行数据中的列属性，如果不存在则定义\n             * @param {Row} records 行数据\n             */\n            defineField(records) {\n                const { treeConfig } = props;\n                const expandOpts = computeExpandOpts.value;\n                const treeOpts = computeTreeOpts.value;\n                const radioOpts = computeRadioOpts.value;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                const rowkey = getRowkey($xeTable);\n                if (!XEUtils.isArray(records)) {\n                    records = [records];\n                }\n                return records.map(record => {\n                    internalData.tableFullColumn.forEach(column => {\n                        const { field, editRender } = column;\n                        if (field && !XEUtils.has(record, field) && !record[field]) {\n                            let cellValue = null;\n                            if (editRender) {\n                                const { defaultValue } = editRender;\n                                if (XEUtils.isFunction(defaultValue)) {\n                                    cellValue = defaultValue({ column });\n                                }\n                                else if (!XEUtils.isUndefined(defaultValue)) {\n                                    cellValue = defaultValue;\n                                }\n                            }\n                            XEUtils.set(record, field, cellValue);\n                        }\n                    });\n                    const otherFields = [radioOpts.labelField, checkboxOpts.checkField, checkboxOpts.labelField, expandOpts.labelField];\n                    otherFields.forEach((key) => {\n                        if (key && eqEmptyValue(XEUtils.get(record, key))) {\n                            XEUtils.set(record, key, null);\n                        }\n                    });\n                    if (treeConfig && treeOpts.lazy && XEUtils.isUndefined(record[childrenField])) {\n                        record[childrenField] = null;\n                    }\n                    // 必须有行数据的唯一主键，可以自行设置；也可以默认生成一个随机数\n                    if (eqEmptyValue(XEUtils.get(record, rowkey))) {\n                        XEUtils.set(record, rowkey, getRowUniqueId());\n                    }\n                    return record;\n                });\n            },\n            handleTableData(force) {\n                const { scrollYLoad } = reactData;\n                const { scrollYStore, fullDataRowIdData } = internalData;\n                let fullList = internalData.afterFullData;\n                // 是否进行数据处理\n                if (force) {\n                    // 更新数据，处理筛选和排序\n                    updateAfterFullData();\n                    // 如果为虚拟树，将树结构拍平\n                    fullList = handleVirtualTreeToList();\n                }\n                const tableData = scrollYLoad ? fullList.slice(scrollYStore.startIndex, scrollYStore.endIndex) : fullList.slice(0);\n                tableData.forEach((row, $index) => {\n                    const rowid = getRowid($xeTable, row);\n                    const rest = fullDataRowIdData[rowid];\n                    if (rest) {\n                        rest.$index = $index;\n                    }\n                });\n                reactData.tableData = tableData;\n                return nextTick();\n            },\n            /**\n             * 更新数据行的 Map\n             * 牺牲数据组装的耗时，用来换取使用过程中的流畅\n             */\n            cacheRowMap(isSource) {\n                const { treeConfig } = props;\n                const treeOpts = computeTreeOpts.value;\n                let { fullDataRowIdData, fullAllDataRowIdData, tableFullData, tableFullTreeData } = internalData;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                const hasChildField = treeOpts.hasChild || treeOpts.hasChildField;\n                const rowkey = getRowkey($xeTable);\n                const isLazy = treeConfig && treeOpts.lazy;\n                const handleRow = (row, index, items, path, parent, nodes) => {\n                    let rowid = getRowid($xeTable, row);\n                    const seq = treeConfig && path ? toTreePathSeq(path) : index + 1;\n                    const level = nodes ? nodes.length - 1 : 0;\n                    if (eqEmptyValue(rowid)) {\n                        rowid = getRowUniqueId();\n                        XEUtils.set(row, rowkey, rowid);\n                    }\n                    if (isLazy && row[hasChildField] && XEUtils.isUndefined(row[childrenField])) {\n                        row[childrenField] = null;\n                    }\n                    const rest = { row, rowid, seq, index: treeConfig && parent ? -1 : index, _index: -1, $index: -1, items, parent, level };\n                    if (isSource) {\n                        fullDataRowIdData[rowid] = rest;\n                    }\n                    fullAllDataRowIdData[rowid] = rest;\n                };\n                if (isSource) {\n                    fullDataRowIdData = internalData.fullDataRowIdData = {};\n                }\n                fullAllDataRowIdData = internalData.fullAllDataRowIdData = {};\n                if (treeConfig) {\n                    XEUtils.eachTree(tableFullTreeData, handleRow, { children: childrenField });\n                }\n                else {\n                    tableFullData.forEach(handleRow);\n                }\n            },\n            cacheSourceMap(fullData) {\n                const { treeConfig } = props;\n                const treeOpts = computeTreeOpts.value;\n                let { sourceDataRowIdData } = internalData;\n                const sourceData = XEUtils.clone(fullData, true);\n                const rowkey = getRowkey($xeTable);\n                sourceDataRowIdData = internalData.sourceDataRowIdData = {};\n                const handleSourceRow = (row) => {\n                    let rowid = getRowid($xeTable, row);\n                    if (eqEmptyValue(rowid)) {\n                        rowid = getRowUniqueId();\n                        XEUtils.set(row, rowkey, rowid);\n                    }\n                    sourceDataRowIdData[rowid] = row;\n                };\n                // 源数据缓存\n                if (treeConfig) {\n                    const childrenField = treeOpts.children || treeOpts.childrenField;\n                    XEUtils.eachTree(sourceData, handleSourceRow, { children: treeOpts.transform ? treeOpts.mapChildrenField : childrenField });\n                }\n                else {\n                    sourceData.forEach(handleSourceRow);\n                }\n                internalData.tableSourceData = sourceData;\n            },\n            /**\n             * 指定列宽的列进行拆分\n             */\n            analyColumnWidth() {\n                const { tableFullColumn } = internalData;\n                const columnOpts = computeColumnOpts.value;\n                const { width: defaultWidth, minWidth: defaultMinWidth } = columnOpts;\n                const resizeList = [];\n                const pxList = [];\n                const pxMinList = [];\n                const autoMinList = [];\n                const scaleList = [];\n                const scaleMinList = [];\n                const autoList = [];\n                const remainList = [];\n                tableFullColumn.forEach((column) => {\n                    if (defaultWidth && !column.width) {\n                        column.width = defaultWidth;\n                    }\n                    if (defaultMinWidth && !column.minWidth) {\n                        column.minWidth = defaultMinWidth;\n                    }\n                    if (column.visible) {\n                        if (column.resizeWidth) {\n                            resizeList.push(column);\n                        }\n                        else if (column.width === 'auto') {\n                            autoList.push(column);\n                        }\n                        else if (isPx(column.width)) {\n                            pxList.push(column);\n                        }\n                        else if (isScale(column.width)) {\n                            scaleList.push(column);\n                        }\n                        else if (isPx(column.minWidth)) {\n                            pxMinList.push(column);\n                        }\n                        else if (column.minWidth === 'auto') {\n                            autoMinList.push(column);\n                        }\n                        else if (isScale(column.minWidth)) {\n                            scaleMinList.push(column);\n                        }\n                        else {\n                            remainList.push(column);\n                        }\n                    }\n                });\n                Object.assign(reactData.columnStore, { resizeList, pxList, pxMinList, autoMinList, scaleList, scaleMinList, autoList, remainList });\n            },\n            saveCustomStore(type) {\n                const tableId = computeTableId.value;\n                const customOpts = computeCustomOpts.value;\n                const { updateStore, storage } = customOpts;\n                const isAllCustom = storage === true;\n                const storageOpts = isAllCustom ? {} : Object.assign({}, storage || {});\n                const isCustomResizable = isAllCustom || storageOpts.resizable;\n                const isCustomVisible = isAllCustom || storageOpts.visible;\n                const isCustomFixed = isAllCustom || storageOpts.fixed;\n                const isCustomSort = isAllCustom || storageOpts.sort;\n                if (isCustomResizable || isCustomVisible || isCustomFixed || isCustomSort) {\n                    if (!tableId) {\n                        errLog('vxe.error.reqProp', ['id']);\n                        return nextTick();\n                    }\n                    const storeData = type === 'reset'\n                        ? {\n                            resizableData: {},\n                            sortData: {},\n                            visibleData: {},\n                            fixedData: {}\n                        }\n                        : tableMethods.getCustomStoreData();\n                    if (updateStore) {\n                        return updateStore({\n                            id: tableId,\n                            type,\n                            storeData\n                        });\n                    }\n                    else {\n                        setCustomStorageMap(tableId, type === 'reset' ? null : storeData);\n                    }\n                }\n                return nextTick();\n            },\n            handleCustom() {\n                const { mouseConfig } = props;\n                if (mouseConfig) {\n                    if ($xeTable.clearSelected) {\n                        $xeTable.clearSelected();\n                    }\n                    if ($xeTable.clearCellAreas) {\n                        $xeTable.clearCellAreas();\n                        $xeTable.clearCopyCellArea();\n                    }\n                }\n                tablePrivateMethods.analyColumnWidth();\n                return tableMethods.refreshColumn(true);\n            },\n            handleUpdateDataQueue() {\n                reactData.upDataFlag++;\n            },\n            handleRefreshColumnQueue() {\n                reactData.reColumnFlag++;\n            },\n            preventEvent(evnt, type, args, next, end) {\n                let evntList = interceptor.get(type);\n                // 兼容老版本\n                if (!evntList.length && type === 'event.clearEdit') {\n                    evntList = interceptor.get('event.clearActived');\n                    if (process.env.NODE_ENV === 'development') {\n                        if (evntList.length) {\n                            warnLog('vxe.error.delEvent', ['event.clearActived', 'event.clearEdit']);\n                        }\n                    }\n                }\n                // 兼容老版本\n                let rest;\n                if (!evntList.some((func) => func(Object.assign({ $grid: $xeGrid, $table: $xeTable, $event: evnt }, args)) === false)) {\n                    if (next) {\n                        rest = next();\n                    }\n                }\n                if (end) {\n                    end();\n                }\n                return rest;\n            },\n            checkSelectionStatus() {\n                const { treeConfig } = props;\n                const { selectCheckboxMaps, treeIndeterminateMaps } = reactData;\n                const { afterFullData } = internalData;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const { checkField, checkStrictly, checkMethod } = checkboxOpts;\n                const indeterminateField = checkboxOpts.indeterminateField || checkboxOpts.halfField;\n                if (!checkStrictly) {\n                    const disableRows = [];\n                    const checkRows = [];\n                    let isAllResolve = false;\n                    let isAllSelected = false;\n                    let isIndeterminate = false;\n                    if (checkField) {\n                        isAllResolve = afterFullData.every(checkMethod\n                            ? (row) => {\n                                if (!checkMethod({ row })) {\n                                    disableRows.push(row);\n                                    return true;\n                                }\n                                if (XEUtils.get(row, checkField)) {\n                                    checkRows.push(row);\n                                    return true;\n                                }\n                                return false;\n                            }\n                            : row => XEUtils.get(row, checkField));\n                        isAllSelected = isAllResolve && afterFullData.length !== disableRows.length;\n                        if (treeConfig) {\n                            if (indeterminateField) {\n                                isIndeterminate = !isAllSelected && afterFullData.some((row) => XEUtils.get(row, checkField) || XEUtils.get(row, indeterminateField) || !!treeIndeterminateMaps[getRowid($xeTable, row)]);\n                            }\n                            else {\n                                isIndeterminate = !isAllSelected && afterFullData.some((row) => XEUtils.get(row, checkField) || !!treeIndeterminateMaps[getRowid($xeTable, row)]);\n                            }\n                        }\n                        else {\n                            if (indeterminateField) {\n                                isIndeterminate = !isAllSelected && afterFullData.some((row) => XEUtils.get(row, checkField) || XEUtils.get(row, indeterminateField));\n                            }\n                            else {\n                                isIndeterminate = !isAllSelected && afterFullData.some((row) => XEUtils.get(row, checkField));\n                            }\n                        }\n                    }\n                    else {\n                        isAllResolve = afterFullData.every(checkMethod\n                            ? (row) => {\n                                if (!checkMethod({ row })) {\n                                    disableRows.push(row);\n                                    return true;\n                                }\n                                if (selectCheckboxMaps[getRowid($xeTable, row)]) {\n                                    checkRows.push(row);\n                                    return true;\n                                }\n                                return false;\n                            }\n                            : row => selectCheckboxMaps[getRowid($xeTable, row)]);\n                        isAllSelected = isAllResolve && afterFullData.length !== disableRows.length;\n                        if (treeConfig) {\n                            isIndeterminate = !isAllSelected && afterFullData.some((row) => {\n                                const itemRid = getRowid($xeTable, row);\n                                return treeIndeterminateMaps[itemRid] || selectCheckboxMaps[itemRid];\n                            });\n                        }\n                        else {\n                            isIndeterminate = !isAllSelected && afterFullData.some((row) => selectCheckboxMaps[getRowid($xeTable, row)]);\n                        }\n                    }\n                    reactData.isAllSelected = isAllSelected;\n                    reactData.isIndeterminate = isIndeterminate;\n                }\n            },\n            /**\n             * 多选，行选中事件\n             * value 选中true 不选false 半选-1\n             */\n            handleSelectRow({ row }, value, isForce) {\n                const { treeConfig } = props;\n                const { selectCheckboxMaps, treeIndeterminateMaps } = reactData;\n                const selectRowMaps = Object.assign({}, selectCheckboxMaps);\n                const { afterFullData } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const { checkField, checkStrictly, checkMethod } = checkboxOpts;\n                const indeterminateField = checkboxOpts.indeterminateField || checkboxOpts.halfField;\n                const rowid = getRowid($xeTable, row);\n                if (checkField) {\n                    if (treeConfig && !checkStrictly) {\n                        if (value === -1) {\n                            if (!treeIndeterminateMaps[rowid]) {\n                                if (indeterminateField) {\n                                    XEUtils.set(row, indeterminateField, true);\n                                }\n                                treeIndeterminateMaps[rowid] = row;\n                            }\n                            XEUtils.set(row, checkField, false);\n                        }\n                        else {\n                            // 更新子节点状态\n                            XEUtils.eachTree([row], (item) => {\n                                if ($xeTable.eqRow(item, row) || (isForce || (!checkMethod || checkMethod({ row: item })))) {\n                                    XEUtils.set(item, checkField, value);\n                                    if (indeterminateField) {\n                                        XEUtils.set(row, indeterminateField, false);\n                                    }\n                                    delete treeIndeterminateMaps[getRowid($xeTable, item)];\n                                    handleCheckboxReserveRow(row, value);\n                                }\n                            }, { children: childrenField });\n                        }\n                        // 如果存在父节点，更新父节点状态\n                        const matchObj = XEUtils.findTree(afterFullData, item => $xeTable.eqRow(item, row), { children: childrenField });\n                        if (matchObj && matchObj.parent) {\n                            let parentStatus;\n                            const vItems = [];\n                            const vItemMaps = {};\n                            if (!isForce && checkMethod) {\n                                matchObj.items.forEach((item) => {\n                                    if (checkMethod({ row: item })) {\n                                        const itemRid = getRowid($xeTable, item);\n                                        vItemMaps[itemRid] = item;\n                                        vItems.push(item);\n                                    }\n                                });\n                            }\n                            else {\n                                matchObj.items.forEach(item => {\n                                    const itemRid = getRowid($xeTable, item);\n                                    vItemMaps[itemRid] = item;\n                                    vItems.push(item);\n                                });\n                            }\n                            const indeterminatesItem = XEUtils.find(matchObj.items, item => !!treeIndeterminateMaps[getRowid($xeTable, item)]);\n                            if (indeterminatesItem) {\n                                parentStatus = -1;\n                            }\n                            else {\n                                const selectItems = [];\n                                matchObj.items.forEach(item => {\n                                    if (XEUtils.get(item, checkField)) {\n                                        selectItems.push(item);\n                                    }\n                                });\n                                parentStatus = selectItems.filter(item => vItemMaps[getRowid($xeTable, item)]).length === vItems.length ? true : (selectItems.length || value === -1 ? -1 : false);\n                            }\n                            reactData.selectCheckboxMaps = selectRowMaps;\n                            return tablePrivateMethods.handleSelectRow({ row: matchObj.parent }, parentStatus, isForce);\n                        }\n                    }\n                    else {\n                        if (isForce || (!checkMethod || checkMethod({ row }))) {\n                            XEUtils.set(row, checkField, value);\n                            handleCheckboxReserveRow(row, value);\n                        }\n                    }\n                }\n                else {\n                    if (treeConfig && !checkStrictly) {\n                        if (value === -1) {\n                            if (!treeIndeterminateMaps[rowid]) {\n                                if (indeterminateField) {\n                                    XEUtils.set(row, indeterminateField, true);\n                                }\n                                treeIndeterminateMaps[rowid] = row;\n                            }\n                            if (selectRowMaps[rowid]) {\n                                delete selectRowMaps[rowid];\n                            }\n                        }\n                        else {\n                            // 更新子节点状态\n                            XEUtils.eachTree([row], (item) => {\n                                const itemRid = getRowid($xeTable, item);\n                                if ($xeTable.eqRow(item, row) || (isForce || (!checkMethod || checkMethod({ row: item })))) {\n                                    if (value) {\n                                        selectRowMaps[itemRid] = item;\n                                    }\n                                    else {\n                                        if (selectRowMaps[itemRid]) {\n                                            delete selectRowMaps[itemRid];\n                                        }\n                                    }\n                                    if (indeterminateField) {\n                                        XEUtils.set(row, indeterminateField, false);\n                                    }\n                                    delete treeIndeterminateMaps[getRowid($xeTable, item)];\n                                    handleCheckboxReserveRow(row, value);\n                                }\n                            }, { children: childrenField });\n                        }\n                        // 如果存在父节点，更新父节点状态\n                        const matchObj = XEUtils.findTree(afterFullData, item => $xeTable.eqRow(item, row), { children: childrenField });\n                        if (matchObj && matchObj.parent) {\n                            let parentStatus;\n                            const vItems = [];\n                            const vItemMaps = {};\n                            if (!isForce && checkMethod) {\n                                matchObj.items.forEach((item) => {\n                                    if (checkMethod({ row: item })) {\n                                        const itemRid = getRowid($xeTable, item);\n                                        vItemMaps[itemRid] = item;\n                                        vItems.push(item);\n                                    }\n                                });\n                            }\n                            else {\n                                matchObj.items.forEach(item => {\n                                    const itemRid = getRowid($xeTable, item);\n                                    vItemMaps[itemRid] = item;\n                                    vItems.push(item);\n                                });\n                            }\n                            const indeterminatesItem = XEUtils.find(matchObj.items, item => !!treeIndeterminateMaps[getRowid($xeTable, item)]);\n                            if (indeterminatesItem) {\n                                parentStatus = -1;\n                            }\n                            else {\n                                const selectItems = [];\n                                matchObj.items.forEach(item => {\n                                    const itemRid = getRowid($xeTable, item);\n                                    if (selectRowMaps[itemRid]) {\n                                        selectItems.push(item);\n                                    }\n                                });\n                                parentStatus = selectItems.filter(item => vItemMaps[getRowid($xeTable, item)]).length === vItems.length ? true : (selectItems.length || value === -1 ? -1 : false);\n                            }\n                            reactData.selectCheckboxMaps = selectRowMaps;\n                            return tablePrivateMethods.handleSelectRow({ row: matchObj.parent }, parentStatus, isForce);\n                        }\n                    }\n                    else {\n                        if (isForce || (!checkMethod || checkMethod({ row }))) {\n                            if (value) {\n                                if (!selectRowMaps[rowid]) {\n                                    selectRowMaps[rowid] = row;\n                                }\n                            }\n                            else {\n                                if (selectRowMaps[rowid]) {\n                                    delete selectRowMaps[rowid];\n                                }\n                            }\n                            handleCheckboxReserveRow(row, value);\n                        }\n                    }\n                }\n                reactData.selectCheckboxMaps = selectRowMaps;\n                tablePrivateMethods.checkSelectionStatus();\n            },\n            triggerHeaderTitleEvent(evnt, iconParams, params) {\n                const tipContent = iconParams.content || iconParams.message;\n                if (tipContent) {\n                    const { tooltipStore } = reactData;\n                    const { column } = params;\n                    const content = getFuncText(tipContent);\n                    handleTargetEnterEvent(true);\n                    tooltipStore.row = null;\n                    tooltipStore.column = column;\n                    tooltipStore.visible = true;\n                    tooltipStore.currOpts = iconParams;\n                    nextTick(() => {\n                        const $tooltip = refTooltip.value;\n                        if ($tooltip && $tooltip.open) {\n                            $tooltip.open(evnt.currentTarget, content);\n                        }\n                    });\n                }\n            },\n            /**\n             * 触发表头 tooltip 事件\n             */\n            triggerHeaderTooltipEvent(evnt, params) {\n                const { tooltipStore } = reactData;\n                const { column } = params;\n                const titleElem = evnt.currentTarget;\n                handleTargetEnterEvent(true);\n                if (tooltipStore.column !== column || !tooltipStore.visible) {\n                    handleTooltip(evnt, titleElem, titleElem, null, params);\n                }\n            },\n            /**\n             * 触发单元格 tooltip 事件\n             */\n            triggerBodyTooltipEvent(evnt, params) {\n                const { editConfig } = props;\n                const { editStore } = reactData;\n                const { tooltipStore } = reactData;\n                const editOpts = computeEditOpts.value;\n                const { actived } = editStore;\n                const { row, column } = params;\n                const cell = evnt.currentTarget;\n                handleTargetEnterEvent(tooltipStore.column !== column || tooltipStore.row !== row);\n                // 单元格处于编辑状态时不触发提示框\n                if (column.editRender && isEnableConf(editConfig)) {\n                    // 如果是行编辑模式\n                    if (editOpts.mode === 'row' && actived.row === row) {\n                        return;\n                    }\n                    // 如果是单元格编辑模式\n                    if (actived.row === row && actived.column === column) {\n                        return;\n                    }\n                }\n                if (tooltipStore.column !== column || tooltipStore.row !== row || !tooltipStore.visible) {\n                    let overflowElem;\n                    let tipElem;\n                    if (column.treeNode) {\n                        overflowElem = cell.querySelector('.vxe-tree-cell');\n                        if (column.type === 'html') {\n                            tipElem = cell.querySelector('.vxe-cell--html');\n                        }\n                    }\n                    else {\n                        tipElem = cell.querySelector(column.type === 'html' ? '.vxe-cell--html' : '.vxe-cell--label');\n                    }\n                    handleTooltip(evnt, cell, (overflowElem || cell.children[0]), tipElem, params);\n                }\n            },\n            /**\n             * 触发表尾 tooltip 事件\n             */\n            triggerFooterTooltipEvent(evnt, params) {\n                const { column } = params;\n                const { tooltipStore } = reactData;\n                const cell = evnt.currentTarget;\n                handleTargetEnterEvent(tooltipStore.column !== column || !!tooltipStore.row);\n                if (tooltipStore.column !== column || !tooltipStore.visible) {\n                    handleTooltip(evnt, cell, cell.querySelector('.vxe-cell--item') || cell.children[0], null, params);\n                }\n            },\n            handleTargetLeaveEvent() {\n                const tooltipOpts = computeTooltipOpts.value;\n                let $tooltip = refTooltip.value;\n                if ($tooltip && $tooltip.setActived) {\n                    $tooltip.setActived(false);\n                }\n                if (tooltipOpts.enterable) {\n                    internalData.tooltipTimeout = setTimeout(() => {\n                        $tooltip = refTooltip.value;\n                        if ($tooltip && $tooltip.isActived && !$tooltip.isActived()) {\n                            tableMethods.closeTooltip();\n                        }\n                    }, tooltipOpts.leaveDelay);\n                }\n                else {\n                    tableMethods.closeTooltip();\n                }\n            },\n            triggerHeaderCellClickEvent(evnt, params) {\n                const { _lastResizeTime } = internalData;\n                const sortOpts = computeSortOpts.value;\n                const columnOpts = computeColumnOpts.value;\n                const { column } = params;\n                const cell = evnt.currentTarget;\n                const triggerResizable = _lastResizeTime && _lastResizeTime > Date.now() - 300;\n                const triggerSort = getEventTargetNode(evnt, cell, 'vxe-cell--sort').flag;\n                const triggerFilter = getEventTargetNode(evnt, cell, 'vxe-cell--filter').flag;\n                if (sortOpts.trigger === 'cell' && !(triggerResizable || triggerSort || triggerFilter)) {\n                    tablePrivateMethods.triggerSortEvent(evnt, column, getNextSortOrder(column));\n                }\n                tableMethods.dispatchEvent('header-cell-click', Object.assign({ triggerResizable, triggerSort, triggerFilter, cell }, params), evnt);\n                if (columnOpts.isCurrent || props.highlightCurrentColumn) {\n                    tablePrivateMethods.triggerCurrentColumnEvent(evnt, params);\n                }\n            },\n            triggerHeaderCellDblclickEvent(evnt, params) {\n                tableMethods.dispatchEvent('header-cell-dblclick', Object.assign({ cell: evnt.currentTarget }, params), evnt);\n            },\n            /**\n             * 列点击事件\n             * 如果是单击模式，则激活为编辑状态\n             * 如果是双击模式，则单击后选中状态\n             */\n            triggerCellClickEvent(evnt, params) {\n                const { highlightCurrentRow, editConfig } = props;\n                const { editStore } = reactData;\n                const expandOpts = computeExpandOpts.value;\n                const editOpts = computeEditOpts.value;\n                const treeOpts = computeTreeOpts.value;\n                const radioOpts = computeRadioOpts.value;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const keyboardOpts = computeKeyboardOpts.value;\n                const rowOpts = computeRowOpts.value;\n                const { actived, focused } = editStore;\n                const { row, column } = params;\n                const { type, treeNode } = column;\n                const isRadioType = type === 'radio';\n                const isCheckboxType = type === 'checkbox';\n                const isExpandType = type === 'expand';\n                const cell = evnt.currentTarget;\n                const triggerRadio = isRadioType && getEventTargetNode(evnt, cell, 'vxe-cell--radio').flag;\n                const triggerCheckbox = isCheckboxType && getEventTargetNode(evnt, cell, 'vxe-cell--checkbox').flag;\n                const triggerTreeNode = treeNode && getEventTargetNode(evnt, cell, 'vxe-tree--btn-wrapper').flag;\n                const triggerExpandNode = isExpandType && getEventTargetNode(evnt, cell, 'vxe-table--expanded').flag;\n                params = Object.assign({ cell, triggerRadio, triggerCheckbox, triggerTreeNode, triggerExpandNode }, params);\n                if (!triggerCheckbox && !triggerRadio) {\n                    // 如果是展开行\n                    if (!triggerExpandNode && (expandOpts.trigger === 'row' || (isExpandType && expandOpts.trigger === 'cell'))) {\n                        tablePrivateMethods.triggerRowExpandEvent(evnt, params);\n                    }\n                    // 如果是树形表格\n                    if ((treeOpts.trigger === 'row' || (treeNode && treeOpts.trigger === 'cell'))) {\n                        tablePrivateMethods.triggerTreeExpandEvent(evnt, params);\n                    }\n                }\n                // 如果点击了树节点\n                if (!triggerTreeNode) {\n                    if (!triggerExpandNode) {\n                        // 如果是高亮行\n                        if (rowOpts.isCurrent || highlightCurrentRow) {\n                            if (!triggerCheckbox && !triggerRadio) {\n                                tablePrivateMethods.triggerCurrentRowEvent(evnt, params);\n                            }\n                        }\n                        // 如果是单选框\n                        if (!triggerRadio && (radioOpts.trigger === 'row' || (isRadioType && radioOpts.trigger === 'cell'))) {\n                            tablePrivateMethods.triggerRadioRowEvent(evnt, params);\n                        }\n                        // 如果是复选框\n                        if (!triggerCheckbox && (checkboxOpts.trigger === 'row' || (isCheckboxType && checkboxOpts.trigger === 'cell'))) {\n                            tablePrivateMethods.handleToggleCheckRowEvent(evnt, params);\n                        }\n                    }\n                    // 如果设置了单元格选中功能，则不会使用点击事件去处理（只能支持双击模式）\n                    if (isEnableConf(editConfig)) {\n                        // 记录点击输入框聚焦状态\n                        if (keyboardOpts.arrowCursorLock && evnt && editOpts.mode === 'cell' && evnt.target && /^input|textarea$/i.test(evnt.target.tagName)) {\n                            focused.column = column;\n                            focused.row = row;\n                        }\n                        if (editOpts.trigger === 'manual') {\n                            if (actived.args && actived.row === row && column !== actived.column) {\n                                handleChangeCell(evnt, params);\n                            }\n                        }\n                        else if (!actived.args || row !== actived.row || column !== actived.column) {\n                            if (editOpts.trigger === 'click') {\n                                handleChangeCell(evnt, params);\n                            }\n                            else if (editOpts.trigger === 'dblclick') {\n                                if (editOpts.mode === 'row' && actived.row === row) {\n                                    handleChangeCell(evnt, params);\n                                }\n                            }\n                        }\n                    }\n                }\n                tableMethods.dispatchEvent('cell-click', params, evnt);\n            },\n            /**\n             * 列双击点击事件\n             * 如果是双击模式，则激活为编辑状态\n             */\n            triggerCellDblclickEvent(evnt, params) {\n                const { editConfig } = props;\n                const { editStore } = reactData;\n                const editOpts = computeEditOpts.value;\n                const { actived } = editStore;\n                const cell = evnt.currentTarget;\n                params = Object.assign({ cell }, params);\n                if (isEnableConf(editConfig) && editOpts.trigger === 'dblclick') {\n                    if (!actived.args || evnt.currentTarget !== actived.args.cell) {\n                        if (editOpts.mode === 'row') {\n                            checkValidate('blur')\n                                .catch((e) => e)\n                                .then(() => {\n                                $xeTable.handleActived(params, evnt)\n                                    .then(() => checkValidate('change'))\n                                    .catch((e) => e);\n                            });\n                        }\n                        else if (editOpts.mode === 'cell') {\n                            $xeTable.handleActived(params, evnt)\n                                .then(() => checkValidate('change'))\n                                .catch((e) => e);\n                        }\n                    }\n                }\n                tableMethods.dispatchEvent('cell-dblclick', params, evnt);\n            },\n            handleToggleCheckRowEvent(evnt, params) {\n                const { selectCheckboxMaps } = reactData;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const { checkField, trigger } = checkboxOpts;\n                const { row } = params;\n                if (trigger === 'manual') {\n                    return;\n                }\n                let value = false;\n                if (checkField) {\n                    value = !XEUtils.get(row, checkField);\n                }\n                else {\n                    value = !selectCheckboxMaps[getRowid($xeTable, row)];\n                }\n                if (evnt) {\n                    tablePrivateMethods.triggerCheckRowEvent(evnt, params, value);\n                }\n                else {\n                    tablePrivateMethods.handleSelectRow(params, value);\n                }\n            },\n            triggerCheckRowEvent(evnt, params, value) {\n                const checkboxOpts = computeCheckboxOpts.value;\n                const { row } = params;\n                const { afterFullData } = internalData;\n                const { checkMethod, trigger } = checkboxOpts;\n                if (trigger === 'manual') {\n                    return;\n                }\n                evnt.stopPropagation();\n                if (checkboxOpts.isShiftKey && evnt.shiftKey && !props.treeConfig) {\n                    const checkboxRecords = tableMethods.getCheckboxRecords();\n                    if (checkboxRecords.length) {\n                        const firstRow = checkboxRecords[0];\n                        const _rowIndex = tableMethods.getVTRowIndex(row);\n                        const _firstRowIndex = tableMethods.getVTRowIndex(firstRow);\n                        if (_rowIndex !== _firstRowIndex) {\n                            tableMethods.setAllCheckboxRow(false);\n                            const rangeRows = _rowIndex < _firstRowIndex ? afterFullData.slice(_rowIndex, _firstRowIndex + 1) : afterFullData.slice(_firstRowIndex, _rowIndex + 1);\n                            handleCheckedCheckboxRow(rangeRows, true, false);\n                            tableMethods.dispatchEvent('checkbox-range-select', Object.assign({ rangeRecords: rangeRows }, params), evnt);\n                            return;\n                        }\n                    }\n                }\n                if (!checkMethod || checkMethod({ row })) {\n                    tablePrivateMethods.handleSelectRow(params, value);\n                    tableMethods.dispatchEvent('checkbox-change', Object.assign({\n                        records: tableMethods.getCheckboxRecords(),\n                        reserves: tableMethods.getCheckboxReserveRecords(),\n                        indeterminates: tableMethods.getCheckboxIndeterminateRecords(),\n                        checked: value\n                    }, params), evnt);\n                }\n            },\n            /**\n             * 多选，选中所有事件\n             */\n            triggerCheckAllEvent(evnt, value) {\n                const checkboxOpts = computeCheckboxOpts.value;\n                const { trigger } = checkboxOpts;\n                if (trigger === 'manual') {\n                    return;\n                }\n                if (evnt) {\n                    evnt.stopPropagation();\n                }\n                handleCheckAllEvent(evnt, value);\n            },\n            /**\n             * 单选，行选中事件\n             */\n            triggerRadioRowEvent(evnt, params) {\n                const { selectRadioRow: oldValue } = reactData;\n                const { row } = params;\n                const radioOpts = computeRadioOpts.value;\n                const { trigger } = radioOpts;\n                if (trigger === 'manual') {\n                    return;\n                }\n                evnt.stopPropagation();\n                let newValue = row;\n                let isChange = oldValue !== newValue;\n                if (isChange) {\n                    handleCheckedRadioRow(newValue);\n                }\n                else if (!radioOpts.strict) {\n                    isChange = oldValue === newValue;\n                    if (isChange) {\n                        newValue = null;\n                        tableMethods.clearRadioRow();\n                    }\n                }\n                if (isChange) {\n                    tableMethods.dispatchEvent('radio-change', Object.assign({ oldValue, newValue }, params), evnt);\n                }\n            },\n            triggerCurrentColumnEvent(evnt, params) {\n                const columnOpts = computeColumnOpts;\n                const { currentMethod } = columnOpts.value;\n                const { column } = params;\n                if (!currentMethod || currentMethod({ column })) {\n                    tableMethods.setCurrentColumn(column);\n                }\n            },\n            triggerCurrentRowEvent(evnt, params) {\n                const { currentRow: oldValue } = reactData;\n                const rowOpts = computeRowOpts;\n                const { currentMethod } = rowOpts.value;\n                const { row: newValue } = params;\n                const isChange = oldValue !== newValue;\n                if (!currentMethod || currentMethod({ row: newValue })) {\n                    tableMethods.setCurrentRow(newValue);\n                    if (isChange) {\n                        tableMethods.dispatchEvent('current-change', Object.assign({ oldValue, newValue }, params), evnt);\n                    }\n                }\n            },\n            /**\n             * 展开行事件\n             */\n            triggerRowExpandEvent(evnt, params) {\n                const { rowExpandLazyLoadedMaps, expandColumn: column } = reactData;\n                const expandOpts = computeExpandOpts.value;\n                const { row } = params;\n                const { lazy, trigger } = expandOpts;\n                if (trigger === 'manual') {\n                    return;\n                }\n                evnt.stopPropagation();\n                const rowid = getRowid($xeTable, row);\n                if (!lazy || !rowExpandLazyLoadedMaps[rowid]) {\n                    const expanded = !tableMethods.isRowExpandByRow(row);\n                    const columnIndex = tableMethods.getColumnIndex(column);\n                    const $columnIndex = tableMethods.getVMColumnIndex(column);\n                    tableMethods.setRowExpand(row, expanded);\n                    tableMethods.dispatchEvent('toggle-row-expand', {\n                        expanded,\n                        column,\n                        columnIndex,\n                        $columnIndex,\n                        row,\n                        rowIndex: tableMethods.getRowIndex(row),\n                        $rowIndex: tableMethods.getVMRowIndex(row)\n                    }, evnt);\n                }\n            },\n            /**\n             * 展开树节点事件\n             */\n            triggerTreeExpandEvent(evnt, params) {\n                const { treeExpandLazyLoadedMaps } = reactData;\n                const treeOpts = computeTreeOpts.value;\n                const { row, column } = params;\n                const { lazy, trigger } = treeOpts;\n                if (trigger === 'manual') {\n                    return;\n                }\n                evnt.stopPropagation();\n                const rowid = getRowid($xeTable, row);\n                if (!lazy || !treeExpandLazyLoadedMaps[rowid]) {\n                    const expanded = !tableMethods.isTreeExpandByRow(row);\n                    const columnIndex = tableMethods.getColumnIndex(column);\n                    const $columnIndex = tableMethods.getVMColumnIndex(column);\n                    tableMethods.setTreeExpand(row, expanded);\n                    tableMethods.dispatchEvent('toggle-tree-expand', { expanded, column, columnIndex, $columnIndex, row }, evnt);\n                }\n            },\n            /**\n             * 点击排序事件\n             */\n            triggerSortEvent(evnt, column, order) {\n                const { mouseConfig } = props;\n                const sortOpts = computeSortOpts.value;\n                const mouseOpts = computeMouseOpts.value;\n                const { field, sortable } = column;\n                if (sortable) {\n                    if (!order || column.order === order) {\n                        tableMethods.clearSort(sortOpts.multiple ? column : null);\n                    }\n                    else {\n                        tableMethods.sort({ field, order });\n                    }\n                    const params = { $table: $xeTable, $event: evnt, column, field, property: field, order: column.order, sortList: tableMethods.getSortColumns(), sortTime: column.sortTime };\n                    if (mouseConfig && mouseOpts.area && $xeTable.handleSortEvent) {\n                        $xeTable.handleSortEvent(evnt, params);\n                    }\n                    tableMethods.dispatchEvent('sort-change', params, evnt);\n                }\n            },\n            /**\n             * 横向 X 可视渲染事件处理\n             */\n            triggerScrollXEvent() {\n                loadScrollXData();\n            },\n            /**\n             * 纵向 Y 可视渲染事件处理\n             */\n            triggerScrollYEvent(evnt) {\n                const { scrollYStore } = internalData;\n                const { adaptive, offsetSize, visibleSize } = scrollYStore;\n                // webkit 浏览器使用最佳的渲染方式，且最高渲染量不能大于 40 条\n                if (isWebkit && adaptive && (offsetSize * 2 + visibleSize) <= 40) {\n                    loadScrollYData(evnt);\n                }\n                else {\n                    debounceScrollY(evnt);\n                }\n            },\n            /**\n             * 对于树形结构中，可以直接滚动到指定深层节点中\n             * 对于某些特定的场景可能会用到，比如定位到某一节点\n             * @param {Row} row 行对象\n             */\n            scrollToTreeRow(row) {\n                const { treeConfig } = props;\n                const { tableFullData } = internalData;\n                const rests = [];\n                if (treeConfig) {\n                    const treeOpts = computeTreeOpts.value;\n                    const childrenField = treeOpts.children || treeOpts.childrenField;\n                    const matchObj = XEUtils.findTree(tableFullData, item => $xeTable.eqRow(item, row), { children: childrenField });\n                    if (matchObj) {\n                        const nodes = matchObj.nodes;\n                        nodes.forEach((row, index) => {\n                            if (index < nodes.length - 1 && !tableMethods.isTreeExpandByRow(row)) {\n                                rests.push(tableMethods.setTreeExpand(row, true));\n                            }\n                        });\n                    }\n                }\n                return Promise.all(rests).then(() => rowToVisible($xeTable, row));\n            },\n            updateScrollYStatus,\n            // 更新横向 X 可视渲染上下剩余空间大小\n            updateScrollXSpace() {\n                const { isGroup, scrollXLoad, scrollbarWidth } = reactData;\n                const { visibleColumn, scrollXStore, elemStore, tableWidth } = internalData;\n                const tableHeader = refTableHeader.value;\n                const tableBody = refTableBody.value;\n                const tableFooter = refTableFooter.value;\n                const tableBodyElem = tableBody ? tableBody.$el : null;\n                if (tableBodyElem) {\n                    const tableHeaderElem = tableHeader ? tableHeader.$el : null;\n                    const tableFooterElem = tableFooter ? tableFooter.$el : null;\n                    const headerElem = tableHeaderElem ? tableHeaderElem.querySelector('.vxe-table--header') : null;\n                    const bodyElem = tableBodyElem.querySelector('.vxe-table--body');\n                    const footerElem = tableFooterElem ? tableFooterElem.querySelector('.vxe-table--footer') : null;\n                    const leftSpaceWidth = visibleColumn.slice(0, scrollXStore.startIndex).reduce((previous, column) => previous + column.renderWidth, 0);\n                    let marginLeft = '';\n                    if (scrollXLoad) {\n                        marginLeft = `${leftSpaceWidth}px`;\n                    }\n                    if (headerElem) {\n                        headerElem.style.marginLeft = isGroup ? '' : marginLeft;\n                    }\n                    bodyElem.style.marginLeft = marginLeft;\n                    if (footerElem) {\n                        footerElem.style.marginLeft = marginLeft;\n                    }\n                    const containerList = ['main'];\n                    containerList.forEach(name => {\n                        const layoutList = ['header', 'body', 'footer'];\n                        layoutList.forEach(layout => {\n                            const xSpaceRef = elemStore[`${name}-${layout}-xSpace`];\n                            const xSpaceElem = xSpaceRef ? xSpaceRef.value : null;\n                            if (xSpaceElem) {\n                                xSpaceElem.style.width = scrollXLoad ? `${tableWidth + (layout === 'header' ? scrollbarWidth : 0)}px` : '';\n                            }\n                        });\n                    });\n                    nextTick(updateStyle);\n                }\n            },\n            // 更新纵向 Y 可视渲染上下剩余空间大小\n            updateScrollYSpace() {\n                const { scrollYLoad } = reactData;\n                const { scrollYStore, elemStore, afterFullData } = internalData;\n                const { startIndex, rowHeight } = scrollYStore;\n                const bodyHeight = afterFullData.length * rowHeight;\n                const topSpaceHeight = Math.max(0, startIndex * rowHeight);\n                const containerList = ['main', 'left', 'right'];\n                let marginTop = '';\n                let ySpaceHeight = '';\n                if (scrollYLoad) {\n                    marginTop = `${topSpaceHeight}px`;\n                    ySpaceHeight = `${bodyHeight}px`;\n                }\n                containerList.forEach(name => {\n                    const layoutList = ['header', 'body', 'footer'];\n                    const tableRef = elemStore[`${name}-body-table`];\n                    const tableElem = tableRef ? tableRef.value : null;\n                    if (tableElem) {\n                        tableElem.style.marginTop = marginTop;\n                    }\n                    layoutList.forEach(layout => {\n                        const ySpaceRef = elemStore[`${name}-${layout}-ySpace`];\n                        const ySpaceElem = ySpaceRef ? ySpaceRef.value : null;\n                        if (ySpaceElem) {\n                            ySpaceElem.style.height = ySpaceHeight;\n                        }\n                    });\n                });\n                nextTick(updateStyle);\n            },\n            updateScrollXData() {\n                // reactData.tableColumn = []\n                nextTick(() => {\n                    handleTableColumn();\n                    tablePrivateMethods.updateScrollXSpace();\n                });\n            },\n            updateScrollYData() {\n                // reactData.tableData = []\n                nextTick(() => {\n                    tablePrivateMethods.handleTableData();\n                    tablePrivateMethods.updateScrollYSpace();\n                });\n            },\n            /**\n             * 处理固定列的显示状态\n             */\n            checkScrolling() {\n                const leftContainerElem = refLeftContainer.value;\n                const rightContainerElem = refRightContainer.value;\n                const tableBody = refTableBody.value;\n                const bodyElem = tableBody ? tableBody.$el : null;\n                if (bodyElem) {\n                    if (leftContainerElem) {\n                        if (bodyElem.scrollLeft > 0) {\n                            addClass(leftContainerElem, 'scrolling--middle');\n                        }\n                        else {\n                            removeClass(leftContainerElem, 'scrolling--middle');\n                        }\n                    }\n                    if (rightContainerElem) {\n                        if (bodyElem.clientWidth < bodyElem.scrollWidth - Math.ceil(bodyElem.scrollLeft)) {\n                            addClass(rightContainerElem, 'scrolling--middle');\n                        }\n                        else {\n                            removeClass(rightContainerElem, 'scrolling--middle');\n                        }\n                    }\n                }\n            },\n            updateZindex() {\n                if (props.zIndex) {\n                    internalData.tZindex = props.zIndex;\n                }\n                else if (internalData.tZindex < getLastZIndex()) {\n                    internalData.tZindex = nextZIndex();\n                }\n            },\n            handleCheckedCheckboxRow,\n            /**\n             * 行 hover 事件\n             */\n            triggerHoverEvent(evnt, { row }) {\n                tablePrivateMethods.setHoverRow(row);\n            },\n            setHoverRow(row) {\n                const rowid = getRowid($xeTable, row);\n                const el = refElem.value;\n                tablePrivateMethods.clearHoverRow();\n                if (el) {\n                    XEUtils.arrayEach(el.querySelectorAll(`[rowid=\"${rowid}\"]`), elem => addClass(elem, 'row--hover'));\n                }\n                internalData.hoverRow = row;\n            },\n            clearHoverRow() {\n                const el = refElem.value;\n                if (el) {\n                    XEUtils.arrayEach(el.querySelectorAll('.vxe-body--row.row--hover'), elem => removeClass(elem, 'row--hover'));\n                }\n                internalData.hoverRow = null;\n            },\n            /**\n             * 已废弃，被 getCellElement 替换\n             * @deprecated\n             */\n            getCell(row, column) {\n                return tableMethods.getCellElement(row, column);\n            },\n            findRowIndexOf(list, row) {\n                return row ? XEUtils.findIndexOf(list, item => $xeTable.eqRow(item, row)) : -1;\n            },\n            eqRow(row1, row2) {\n                if (row1 && row2) {\n                    if (row1 === row2) {\n                        return true;\n                    }\n                    return getRowid($xeTable, row1) === getRowid($xeTable, row2);\n                }\n                return false;\n            }\n        };\n        // 检测对应模块是否安装\n        if (process.env.NODE_ENV === 'development') {\n            'openExport,openPrint,exportData,openImport,importData,saveFile,readFile,importByFile,print'.split(',').forEach(name => {\n                $xeTable[name] = function () {\n                    errLog('vxe.error.reqModule', ['VxeTableExportModule']);\n                };\n            });\n            'clearValidate,fullValidate,validate'.split(',').forEach(name => {\n                $xeTable[name] = function () {\n                    errLog('vxe.error.reqModule', ['VxeTableValidatorModule']);\n                };\n            });\n        }\n        Object.assign($xeTable, tableMethods, tablePrivateMethods);\n        /**\n         * 渲染浮固定列\n         * 分别渲染左边固定列和右边固定列\n         * 如果宽度足够情况下，则不需要渲染固定列\n         * @param {String} fixedType 固定列类型\n         */\n        const renderFixed = (fixedType) => {\n            const { showHeader, showFooter } = props;\n            const { tableData, tableColumn, tableGroupColumn, columnStore, footerTableData } = reactData;\n            const isFixedLeft = fixedType === 'left';\n            const fixedColumn = isFixedLeft ? columnStore.leftList : columnStore.rightList;\n            return h('div', {\n                ref: isFixedLeft ? refLeftContainer : refRightContainer,\n                class: `vxe-table--fixed-${fixedType}-wrapper`\n            }, [\n                showHeader\n                    ? h(TableHeaderComponent, {\n                        ref: isFixedLeft ? refTableLeftHeader : refTableRightHeader,\n                        fixedType,\n                        tableData,\n                        tableColumn,\n                        tableGroupColumn,\n                        fixedColumn\n                    })\n                    : createCommentVNode(),\n                h(TableBodyComponent, {\n                    ref: isFixedLeft ? refTableLeftBody : refTableRightBody,\n                    fixedType,\n                    tableData,\n                    tableColumn,\n                    fixedColumn\n                }),\n                showFooter\n                    ? h(TableFooterComponent, {\n                        ref: isFixedLeft ? refTableLeftFooter : refTableRightFooter,\n                        footerTableData,\n                        tableColumn,\n                        fixedColumn,\n                        fixedType\n                    })\n                    : createCommentVNode()\n            ]);\n        };\n        const renderEmptyContenet = () => {\n            const emptyOpts = computeEmptyOpts.value;\n            const params = { $table: $xeTable };\n            if (slots.empty) {\n                return slots.empty(params);\n            }\n            else {\n                const compConf = emptyOpts.name ? renderer.get(emptyOpts.name) : null;\n                const rtEmptyView = compConf ? (compConf.renderTableEmpty || compConf.renderTableEmptyView || compConf.renderEmpty) : null;\n                if (rtEmptyView) {\n                    return getSlotVNs(rtEmptyView(emptyOpts, params));\n                }\n            }\n            return getFuncText(props.emptyText) || getI18n('vxe.table.emptyText');\n        };\n        function handleUupdateResize() {\n            const el = refElem.value;\n            if (el && el.clientWidth && el.clientHeight) {\n                tableMethods.recalculate();\n            }\n        }\n        const dataFlag = ref(0);\n        watch(() => props.data ? props.data.length : -1, () => {\n            dataFlag.value++;\n        });\n        watch(() => props.data, () => {\n            dataFlag.value++;\n        });\n        watch(dataFlag, () => {\n            const { inited, initStatus } = internalData;\n            loadTableData(props.data || []).then(() => {\n                const { scrollXLoad, scrollYLoad, expandColumn } = reactData;\n                internalData.inited = true;\n                internalData.initStatus = true;\n                if (!initStatus) {\n                    handleLoadDefaults();\n                }\n                if (!inited) {\n                    handleInitDefaults();\n                }\n                if (process.env.NODE_ENV === 'development') {\n                    // const checkboxOpts = computeCheckboxOpts.value\n                    // const checkboxColumn = internalData.tableFullColumn.find(column => column.type === 'checkbox')\n                    // if (checkboxColumn && internalData.tableFullData.length > 300 && !checkboxOpts.checkField) {\n                    //   warnLog('vxe.error.checkProp', ['checkbox-config.checkField'])\n                    // }\n                    if ((scrollXLoad || scrollYLoad) && expandColumn) {\n                        warnLog('vxe.error.scrollErrProp', ['column.type=expand']);\n                    }\n                }\n                tableMethods.recalculate();\n            });\n        });\n        const staticColumnFlag = ref(0);\n        watch(() => reactData.staticColumns.length, () => {\n            staticColumnFlag.value++;\n        });\n        watch(() => reactData.staticColumns, () => {\n            staticColumnFlag.value++;\n        });\n        watch(staticColumnFlag, () => {\n            handleColumn(reactData.staticColumns);\n        });\n        const tableColumnFlag = ref(0);\n        watch(() => reactData.tableColumn.length, () => {\n            tableColumnFlag.value++;\n        });\n        watch(() => reactData.tableColumn, () => {\n            tableColumnFlag.value++;\n        });\n        watch(tableColumnFlag, () => {\n            tablePrivateMethods.analyColumnWidth();\n        });\n        watch(() => reactData.upDataFlag, () => {\n            nextTick(() => {\n                tableMethods.updateData();\n            });\n        });\n        watch(() => reactData.reColumnFlag, () => {\n            nextTick(() => {\n                tableMethods.refreshColumn();\n            });\n        });\n        watch(() => props.showHeader, () => {\n            nextTick(() => {\n                tableMethods.recalculate(true).then(() => tableMethods.refreshScroll());\n            });\n        });\n        watch(() => props.showFooter, () => {\n            nextTick(() => {\n                tableMethods.recalculate(true).then(() => tableMethods.refreshScroll());\n            });\n        });\n        const footFlag = ref(0);\n        watch(() => props.footerData ? props.footerData.length : -1, () => {\n            footFlag.value++;\n        });\n        watch(() => props.footerData, () => {\n            footFlag.value++;\n        });\n        watch(footFlag, () => {\n            tableMethods.updateFooter();\n        });\n        watch(() => props.height, () => {\n            nextTick(() => tableMethods.recalculate(true));\n        });\n        watch(() => props.maxHeight, () => {\n            nextTick(() => tableMethods.recalculate(true));\n        });\n        watch(() => props.syncResize, (value) => {\n            if (value) {\n                handleUupdateResize();\n                nextTick(() => {\n                    handleUupdateResize();\n                    setTimeout(() => handleUupdateResize());\n                });\n            }\n        });\n        const mergeCellFlag = ref(0);\n        watch(() => props.mergeCells ? props.mergeCells.length : -1, () => {\n            mergeCellFlag.value++;\n        });\n        watch(() => props.mergeCells, () => {\n            mergeCellFlag.value++;\n        });\n        watch(mergeCellFlag, () => {\n            tableMethods.clearMergeCells();\n            nextTick(() => {\n                if (props.mergeCells) {\n                    tableMethods.setMergeCells(props.mergeCells);\n                }\n            });\n        });\n        const mergeFooterItemFlag = ref(0);\n        watch(() => props.mergeFooterItems ? props.mergeFooterItems.length : -1, () => {\n            mergeFooterItemFlag.value++;\n        });\n        watch(() => props.mergeFooterItems, () => {\n            mergeFooterItemFlag.value++;\n        });\n        watch(mergeFooterItemFlag, () => {\n            tableMethods.clearMergeFooterItems();\n            nextTick(() => {\n                if (props.mergeFooterItems) {\n                    tableMethods.setMergeFooterItems(props.mergeFooterItems);\n                }\n            });\n        });\n        if ($xeTabs) {\n            watch(() => $xeTabs ? $xeTabs.reactData.resizeFlag : null, () => {\n                handleGlobalResizeEvent();\n            });\n        }\n        hooks.forEach((options) => {\n            const { setupTable } = options;\n            if (setupTable) {\n                const hookRest = setupTable($xeTable);\n                if (hookRest && XEUtils.isObject(hookRest)) {\n                    Object.assign($xeTable, hookRest);\n                }\n            }\n        });\n        tablePrivateMethods.preventEvent(null, 'created', { $table: $xeTable });\n        let resizeObserver;\n        onActivated(() => {\n            tableMethods.recalculate().then(() => tableMethods.refreshScroll());\n            tablePrivateMethods.preventEvent(null, 'activated', { $table: $xeTable });\n        });\n        onDeactivated(() => {\n            internalData.isActivated = false;\n            tablePrivateMethods.preventEvent(null, 'deactivated', { $table: $xeTable });\n        });\n        onMounted(() => {\n            nextTick(() => {\n                const { data, treeConfig, showOverflow } = props;\n                const { scrollXStore, scrollYStore } = internalData;\n                const sYOpts = computeSYOpts.value;\n                const editOpts = computeEditOpts.value;\n                const treeOpts = computeTreeOpts.value;\n                const radioOpts = computeRadioOpts.value;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const expandOpts = computeExpandOpts.value;\n                const rowOpts = computeRowOpts.value;\n                if (process.env.NODE_ENV === 'development') {\n                    if (props.rowId) {\n                        warnLog('vxe.error.delProp', ['row-id', 'row-config.keyField']);\n                    }\n                    if (props.rowKey) {\n                        warnLog('vxe.error.delProp', ['row-key', 'row-config.useKey']);\n                    }\n                    if (props.columnKey) {\n                        warnLog('vxe.error.delProp', ['column-id', 'column-config.useKey']);\n                    }\n                    if (!(props.rowId || rowOpts.keyField) && (checkboxOpts.reserve || checkboxOpts.checkRowKeys || radioOpts.reserve || radioOpts.checkRowKey || expandOpts.expandRowKeys || treeOpts.expandRowKeys)) {\n                        warnLog('vxe.error.reqProp', ['row-config.keyField']);\n                    }\n                    if (props.editConfig && (editOpts.showStatus || editOpts.showUpdateStatus || editOpts.showInsertStatus) && !props.keepSource) {\n                        warnLog('vxe.error.reqProp', ['keep-source']);\n                    }\n                    if (treeConfig && (treeOpts.showLine || treeOpts.line) && (!(props.rowKey || rowOpts.useKey) || !showOverflow)) {\n                        warnLog('vxe.error.reqProp', ['row-config.useKey | show-overflow']);\n                    }\n                    if (treeConfig && props.stripe) {\n                        warnLog('vxe.error.noTree', ['stripe']);\n                    }\n                    if (props.showFooter && !(props.footerMethod || props.footerData)) {\n                        warnLog('vxe.error.reqProp', ['footer-data | footer-method']);\n                    }\n                    // if (props.highlightCurrentRow) {\n                    //   warnLog('vxe.error.delProp', ['highlight-current-row', 'row-config.isCurrent'])\n                    // }\n                    // if (props.highlightHoverRow) {\n                    //   warnLog('vxe.error.delProp', ['highlight-hover-row', 'row-config.isHover'])\n                    // }\n                    // if (props.highlightCurrentColumn) {\n                    //   warnLog('vxe.error.delProp', ['highlight-current-column', 'column-config.isCurrent'])\n                    // }\n                    // if (props.highlightHoverColumn) {\n                    //   warnLog('vxe.error.delProp', ['highlight-hover-column', 'column-config.isHover'])\n                    // }\n                    // 检查导入导出类型，如果自定义导入导出方法，则不校验类型\n                    const { exportConfig, importConfig } = props;\n                    const exportOpts = computeExportOpts.value;\n                    const importOpts = computeImportOpts.value;\n                    if (importConfig && importOpts.types && !importOpts.importMethod && !XEUtils.includeArrays(XEUtils.keys(importOpts._typeMaps), importOpts.types)) {\n                        warnLog('vxe.error.errProp', [`export-config.types=${importOpts.types.join(',')}`, importOpts.types.filter((type) => XEUtils.includes(XEUtils.keys(importOpts._typeMaps), type)).join(',') || XEUtils.keys(importOpts._typeMaps).join(',')]);\n                    }\n                    if (exportConfig && exportOpts.types && !exportOpts.exportMethod && !XEUtils.includeArrays(XEUtils.keys(exportOpts._typeMaps), exportOpts.types)) {\n                        warnLog('vxe.error.errProp', [`export-config.types=${exportOpts.types.join(',')}`, exportOpts.types.filter((type) => XEUtils.includes(XEUtils.keys(exportOpts._typeMaps), type)).join(',') || XEUtils.keys(exportOpts._typeMaps).join(',')]);\n                    }\n                }\n                if (process.env.NODE_ENV === 'development') {\n                    const customOpts = computeCustomOpts.value;\n                    const mouseOpts = computeMouseOpts.value;\n                    const rowOpts = computeRowOpts.value;\n                    if (!props.id && props.customConfig && (customOpts.storage === true || (customOpts.storage && customOpts.storage.resizable) || (customOpts.storage && customOpts.storage.visible))) {\n                        errLog('vxe.error.reqProp', ['id']);\n                    }\n                    if (props.treeConfig && checkboxOpts.range) {\n                        errLog('vxe.error.noTree', ['checkbox-config.range']);\n                    }\n                    if (rowOpts.height && !props.showOverflow) {\n                        warnLog('vxe.error.notProp', ['table.show-overflow']);\n                    }\n                    if (!$xeTable.handleUpdateCellAreas) {\n                        if (props.clipConfig) {\n                            warnLog('vxe.error.notProp', ['clip-config']);\n                        }\n                        if (props.fnrConfig) {\n                            warnLog('vxe.error.notProp', ['fnr-config']);\n                        }\n                        if (mouseOpts.area) {\n                            errLog('vxe.error.notProp', ['mouse-config.area']);\n                            return;\n                        }\n                    }\n                    if (props.treeConfig && treeOpts.children) {\n                        warnLog('vxe.error.delProp', ['tree-config.children', 'tree-config.childrenField']);\n                    }\n                    if (props.treeConfig && treeOpts.line) {\n                        warnLog('vxe.error.delProp', ['tree-config.line', 'tree-config.showLine']);\n                    }\n                    if (mouseOpts.area && mouseOpts.selected) {\n                        warnLog('vxe.error.errConflicts', ['mouse-config.area', 'mouse-config.selected']);\n                    }\n                    // if (mouseOpts.area && checkboxOpts.range) {\n                    //   warnLog('vxe.error.errConflicts', ['mouse-config.area', 'checkbox-config.range'])\n                    // }\n                    if (props.treeConfig && mouseOpts.area) {\n                        errLog('vxe.error.noTree', ['mouse-config.area']);\n                    }\n                    if (props.editConfig && editOpts.activeMethod) {\n                        warnLog('vxe.error.delProp', ['edit-config.activeMethod', 'edit-config.beforeEditMethod']);\n                    }\n                    if (props.treeConfig && checkboxOpts.isShiftKey) {\n                        errLog('vxe.error.errConflicts', ['tree-config', 'checkbox-config.isShiftKey']);\n                    }\n                    if (checkboxOpts.halfField) {\n                        warnLog('vxe.error.delProp', ['checkbox-config.halfField', 'checkbox-config.indeterminateField']);\n                    }\n                }\n                // 检查是否有安装需要的模块\n                if (process.env.NODE_ENV === 'development') {\n                    if (props.editConfig && !$xeTable.insert) {\n                        errLog('vxe.error.reqModule', ['Edit']);\n                    }\n                    if (props.editRules && !$xeTable.validate) {\n                        errLog('vxe.error.reqModule', ['Validator']);\n                    }\n                    if ((checkboxOpts.range || props.keyboardConfig || props.mouseConfig) && !$xeTable.triggerCellMousedownEvent) {\n                        errLog('vxe.error.reqModule', ['Keyboard']);\n                    }\n                    if ((props.printConfig || props.importConfig || props.exportConfig) && !$xeTable.exportData) {\n                        errLog('vxe.error.reqModule', ['Export']);\n                    }\n                }\n                Object.assign(scrollYStore, {\n                    startIndex: 0,\n                    endIndex: 0,\n                    visibleSize: 0,\n                    adaptive: sYOpts.adaptive !== false\n                });\n                Object.assign(scrollXStore, {\n                    startIndex: 0,\n                    endIndex: 0,\n                    visibleSize: 0\n                });\n                loadTableData(data || []).then(() => {\n                    if (data && data.length) {\n                        internalData.inited = true;\n                        internalData.initStatus = true;\n                        handleLoadDefaults();\n                        handleInitDefaults();\n                    }\n                    updateStyle();\n                });\n                if (props.autoResize) {\n                    const resizeOpts = computeResizeleOpts.value;\n                    const { refreshDelay } = resizeOpts;\n                    const el = refElem.value;\n                    const parentEl = tablePrivateMethods.getParentElem();\n                    const handleOptimizeResize = refreshDelay ? XEUtils.throttle(() => tableMethods.recalculate(true), refreshDelay, { leading: true, trailing: true }) : null;\n                    resizeObserver = globalResize.create(handleOptimizeResize\n                        ? () => {\n                            if (props.autoResize) {\n                                requestAnimationFrame(handleOptimizeResize);\n                            }\n                        }\n                        : () => {\n                            if (props.autoResize) {\n                                tableMethods.recalculate(true);\n                            }\n                        });\n                    if (el) {\n                        resizeObserver.observe(el);\n                    }\n                    if (parentEl) {\n                        resizeObserver.observe(parentEl);\n                    }\n                }\n            });\n            globalEvents.on($xeTable, 'paste', handleGlobalPasteEvent);\n            globalEvents.on($xeTable, 'copy', handleGlobalCopyEvent);\n            globalEvents.on($xeTable, 'cut', handleGlobalCutEvent);\n            globalEvents.on($xeTable, 'mousedown', handleGlobalMousedownEvent);\n            globalEvents.on($xeTable, 'blur', handleGlobalBlurEvent);\n            globalEvents.on($xeTable, 'mousewheel', handleGlobalMousewheelEvent);\n            globalEvents.on($xeTable, 'keydown', handleGlobalKeydownEvent);\n            globalEvents.on($xeTable, 'resize', handleGlobalResizeEvent);\n            if ($xeTable.handleGlobalContextmenuEvent) {\n                globalEvents.on($xeTable, 'contextmenu', $xeTable.handleGlobalContextmenuEvent);\n            }\n            tablePrivateMethods.preventEvent(null, 'mounted', { $table: $xeTable });\n        });\n        onBeforeUnmount(() => {\n            if (resizeObserver) {\n                resizeObserver.disconnect();\n            }\n            tableMethods.closeFilter();\n            if ($xeTable.closeMenu) {\n                $xeTable.closeMenu();\n            }\n            tablePrivateMethods.preventEvent(null, 'beforeUnmount', { $table: $xeTable });\n        });\n        onUnmounted(() => {\n            globalEvents.off($xeTable, 'paste');\n            globalEvents.off($xeTable, 'copy');\n            globalEvents.off($xeTable, 'cut');\n            globalEvents.off($xeTable, 'mousedown');\n            globalEvents.off($xeTable, 'blur');\n            globalEvents.off($xeTable, 'mousewheel');\n            globalEvents.off($xeTable, 'keydown');\n            globalEvents.off($xeTable, 'resize');\n            globalEvents.off($xeTable, 'contextmenu');\n            tablePrivateMethods.preventEvent(null, 'unmounted', { $table: $xeTable });\n        });\n        const renderVN = () => {\n            const { loading, stripe, showHeader, height, treeConfig, mouseConfig, showFooter, highlightCell, highlightHoverRow, highlightHoverColumn, editConfig, editRules } = props;\n            const { isCalcColumn, isGroup, overflowX, overflowY, scrollXLoad, scrollYLoad, scrollbarHeight, tableData, tableColumn, tableGroupColumn, footerTableData, initStore, columnStore, filterStore, customStore, tooltipStore } = reactData;\n            const { leftList, rightList } = columnStore;\n            const loadingSlot = slots.loading;\n            const tipConfig = computeTipConfig.value;\n            const validOpts = computeValidOpts.value;\n            const checkboxOpts = computeCheckboxOpts.value;\n            const treeOpts = computeTreeOpts.value;\n            const rowOpts = computeRowOpts.value;\n            const columnOpts = computeColumnOpts.value;\n            const vSize = computeSize.value;\n            const tableBorder = computeTableBorder.value;\n            const mouseOpts = computeMouseOpts.value;\n            const validTipOpts = computeValidTipOpts.value;\n            const loadingOpts = computeLoadingOpts.value;\n            const isMenu = computeIsMenu.value;\n            const currLoading = reactData._isLoading || loading;\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-table', 'vxe-table--render-default', `tid_${xID}`, `border--${tableBorder}`, {\n                        [`size--${vSize}`]: vSize,\n                        [`valid-msg--${validOpts.msgMode}`]: !!editRules,\n                        'vxe-editable': !!editConfig,\n                        'old-cell-valid': editRules && getConfig().cellVaildMode === 'obsolete',\n                        'cell--highlight': highlightCell,\n                        'cell--selected': mouseConfig && mouseOpts.selected,\n                        'cell--area': mouseConfig && mouseOpts.area,\n                        'row--highlight': rowOpts.isHover || highlightHoverRow,\n                        'column--highlight': columnOpts.isHover || highlightHoverColumn,\n                        'checkbox--range': checkboxOpts.range,\n                        'column--calc': isCalcColumn,\n                        'is--header': showHeader,\n                        'is--footer': showFooter,\n                        'is--group': isGroup,\n                        'is--tree-line': treeConfig && (treeOpts.showLine || treeOpts.line),\n                        'is--fixed-left': leftList.length,\n                        'is--fixed-right': rightList.length,\n                        'is--animat': !!props.animat,\n                        'is--round': props.round,\n                        'is--stripe': !treeConfig && stripe,\n                        'is--loading': currLoading,\n                        'is--empty': !currLoading && !tableData.length,\n                        'is--scroll-y': overflowY,\n                        'is--scroll-x': overflowX,\n                        'is--virtual-x': scrollXLoad,\n                        'is--virtual-y': scrollYLoad\n                    }],\n                spellcheck: false,\n                onKeydown: keydownEvent\n            }, [\n                /**\n                 * 隐藏列\n                 */\n                h('div', {\n                    class: 'vxe-table-slots'\n                }, slots.default ? slots.default({}) : []),\n                h('div', {\n                    class: 'vxe-table--render-wrapper'\n                }, [\n                    h('div', {\n                        class: 'vxe-table--main-wrapper'\n                    }, [\n                        /**\n                         * 表头\n                         */\n                        showHeader\n                            ? h(TableHeaderComponent, {\n                                ref: refTableHeader,\n                                tableData,\n                                tableColumn,\n                                tableGroupColumn\n                            })\n                            : createCommentVNode(),\n                        /**\n                         * 表体\n                         */\n                        h(TableBodyComponent, {\n                            ref: refTableBody,\n                            tableData,\n                            tableColumn\n                        }),\n                        /**\n                         * 表尾\n                         */\n                        showFooter\n                            ? h(TableFooterComponent, {\n                                ref: refTableFooter,\n                                footerTableData,\n                                tableColumn\n                            })\n                            : createCommentVNode()\n                    ]),\n                    h('div', {\n                        class: 'vxe-table--fixed-wrapper'\n                    }, [\n                        /**\n                         * 左侧固定区域\n                         */\n                        leftList && leftList.length && overflowX ? renderFixed('left') : createCommentVNode(),\n                        /**\n                         * 右侧固定区域\n                         */\n                        rightList && rightList.length && overflowX ? renderFixed('right') : createCommentVNode()\n                    ])\n                ]),\n                /**\n                 * 空数据\n                 */\n                h('div', {\n                    ref: refEmptyPlaceholder,\n                    class: 'vxe-table--empty-placeholder'\n                }, [\n                    h('div', {\n                        class: 'vxe-table--empty-content'\n                    }, renderEmptyContenet())\n                ]),\n                /**\n                 * 边框线\n                 */\n                h('div', {\n                    class: 'vxe-table--border-line'\n                }),\n                /**\n                 * 列宽线\n                 */\n                h('div', {\n                    ref: refCellResizeBar,\n                    class: 'vxe-table--resizable-bar',\n                    style: overflowX\n                        ? {\n                            'padding-bottom': `${scrollbarHeight}px`\n                        }\n                        : null\n                }),\n                /**\n                 * 加载中\n                 */\n                VxeUILoadingComponent\n                    ? h(VxeUILoadingComponent, {\n                        class: 'vxe-table--loading',\n                        modelValue: currLoading,\n                        icon: loadingOpts.icon,\n                        text: loadingOpts.text\n                    }, loadingSlot\n                        ? {\n                            default: () => loadingSlot({ $table: $xeTable, $grid: $xeGrid })\n                        }\n                        : {})\n                    : createCommentVNode(),\n                /**\n                 * 自定义列\n                 */\n                initStore.custom\n                    ? h(TableCustomPanelComponent, {\n                        ref: refTableCustom,\n                        customStore\n                    })\n                    : createCommentVNode(),\n                /**\n                 * 筛选\n                 */\n                initStore.filter\n                    ? h(TableFilterPanelComponent, {\n                        ref: refTableFilter,\n                        filterStore\n                    })\n                    : createCommentVNode(),\n                /**\n                 * 导入\n                 */\n                initStore.import && props.importConfig\n                    ? h(TableImportPanelComponent, {\n                        defaultOptions: reactData.importParams,\n                        storeData: reactData.importStore\n                    })\n                    : createCommentVNode(),\n                /**\n                 * 导出/导出\n                 */\n                initStore.export && (props.exportConfig || props.printConfig)\n                    ? h(TableExportPanelComponent, {\n                        defaultOptions: reactData.exportParams,\n                        storeData: reactData.exportStore\n                    })\n                    : createCommentVNode(),\n                /**\n                 * 快捷菜单\n                 */\n                isMenu\n                    ? h(TableMenuPanelComponent, {\n                        ref: refTableMenu\n                    })\n                    : createCommentVNode(),\n                /**\n                 * 提示相关\n                 */\n                VxeUITooltipComponent\n                    ? h('div', {}, [\n                        /**\n                         * 通用提示\n                         */\n                        h(VxeUITooltipComponent, {\n                            ref: refCommTooltip,\n                            isArrow: false,\n                            enterable: false\n                        }),\n                        /**\n                          * 工具提示\n                          */\n                        h(VxeUITooltipComponent, Object.assign({\n                            ref: refTooltip\n                        }, tipConfig, tooltipStore.currOpts)),\n                        /**\n                          * 校验提示\n                          */\n                        props.editRules && validOpts.showMessage && (validOpts.message === 'default' ? !height : validOpts.message === 'tooltip')\n                            ? h(VxeUITooltipComponent, Object.assign({ ref: refValidTooltip, class: [{\n                                        'old-cell-valid': editRules && getConfig().cellVaildMode === 'obsolete'\n                                    }, 'vxe-table--valid-error'] }, (validOpts.message === 'tooltip' || tableData.length === 1 ? validTipOpts : {})))\n                            : createCommentVNode()\n                    ])\n                    : createCommentVNode()\n            ]);\n        };\n        $xeTable.renderVN = renderVN;\n        if (process.env.NODE_ENV === 'development') {\n            nextTick(() => {\n                if (props.loading) {\n                    if (!VxeUILoadingComponent) {\n                        errLog('vxe.error.reqComp', ['vxe-loading']);\n                    }\n                }\n                if ((props.showOverflow === true || props.showOverflow === 'tooltip') ||\n                    (props.showHeaderOverflow === true || props.showHeaderOverflow === 'tooltip') ||\n                    (props.showFooterOverflow === true || props.showFooterOverflow === 'tooltip') ||\n                    props.tooltipConfig || props.editRules) {\n                    if (!VxeUITooltipComponent) {\n                        errLog('vxe.error.reqComp', ['vxe-tooltip']);\n                    }\n                }\n            });\n        }\n        provide('$xeColgroup', null);\n        provide('$xeTable', $xeTable);\n        return $xeTable;\n    },\n    render() {\n        return this.renderVN();\n    }\n});\n", "import { createCommentVNode, defineComponent, h, ref, inject, nextTick, onBeforeUnmount, onMounted, onUnmounted } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { VxeUI } from '../../ui';\nimport { mergeBodyMethod, getRowid, removeScrollListener, restoreScrollListener } from './util';\nimport { updateCellTitle, getPropClass } from '../../ui/src/dom';\nimport { isEnableConf } from '../../ui/src/utils';\nimport { getSlotVNs } from '../../ui/src/vn';\nconst { getI18n, renderer } = VxeUI;\nconst renderType = 'body';\nconst lineOffsetSizes = {\n    mini: 3,\n    small: 2,\n    medium: 1\n};\nexport default defineComponent({\n    name: 'VxeTableBody',\n    props: {\n        tableData: Array,\n        tableColumn: Array,\n        fixedColumn: Array,\n        fixedType: { type: String, default: null }\n    },\n    setup(props) {\n        const $xeTable = inject('$xeTable', {});\n        const xesize = inject('xesize', null);\n        const { xID, props: tableProps, context: tableContext, reactData: tableReactData, internalData: tableInternalData } = $xeTable;\n        const { refTableHeader, refTableBody, refTableFooter, refTableLeftBody, refTableRightBody, refValidTooltip } = $xeTable.getRefMaps();\n        const { computeEditOpts, computeMouseOpts, computeSYOpts, computeEmptyOpts, computeKeyboardOpts, computeTooltipOpts, computeRadioOpts, computeExpandOpts, computeTreeOpts, computeCheckboxOpts, computeValidOpts, computeRowOpts, computeColumnOpts } = $xeTable.getComputeMaps();\n        const refElem = ref();\n        const refBodyTable = ref();\n        const refBodyColgroup = ref();\n        const refBodyTBody = ref();\n        const refBodyXSpace = ref();\n        const refBodyYSpace = ref();\n        const refBodyEmptyBlock = ref();\n        const getOffsetSize = () => {\n            if (xesize) {\n                const vSize = xesize.value;\n                if (vSize) {\n                    return lineOffsetSizes[vSize] || 0;\n                }\n            }\n            return 0;\n        };\n        // 滚动、拖动过程中不需要触发\n        const isVMScrollProcess = () => {\n            const { delayHover } = tableProps;\n            const { lastScrollTime, _isResize } = tableReactData;\n            return !!(_isResize || (lastScrollTime && Date.now() < lastScrollTime + delayHover));\n        };\n        const countTreeExpand = (prevRow, params) => {\n            let count = 1;\n            if (!prevRow) {\n                return count;\n            }\n            const treeOpts = computeTreeOpts.value;\n            const childrenField = treeOpts.children || treeOpts.childrenField;\n            const rowChildren = prevRow[childrenField];\n            if (rowChildren && $xeTable.isTreeExpandByRow(prevRow)) {\n                for (let index = 0; index < rowChildren.length; index++) {\n                    count += countTreeExpand(rowChildren[index], params);\n                }\n            }\n            return count;\n        };\n        const calcTreeLine = (params, items, rIndex) => {\n            let expandSize = 1;\n            if (rIndex) {\n                expandSize = countTreeExpand(items[rIndex - 1], params);\n            }\n            return tableReactData.rowHeight * expandSize - (rIndex ? 1 : (12 - getOffsetSize()));\n        };\n        const renderLine = (params) => {\n            const { row, column } = params;\n            const { afterFullData } = tableInternalData;\n            const { treeConfig } = tableProps;\n            const treeOpts = computeTreeOpts.value;\n            const { slots, treeNode } = column;\n            const { fullAllDataRowIdData } = tableInternalData;\n            const rowid = getRowid($xeTable, row);\n            const rest = fullAllDataRowIdData[rowid];\n            let rLevel = 0;\n            let rIndex = 0;\n            let items = [];\n            if (rest) {\n                rLevel = rest.level;\n                rIndex = rest._index;\n                items = rest.items;\n            }\n            if (slots && slots.line) {\n                return $xeTable.callSlot(slots.line, params);\n            }\n            const isFirstRow = $xeTable.eqRow(afterFullData[0], row);\n            if (treeConfig && treeNode && (treeOpts.showLine || treeOpts.line)) {\n                return [\n                    h('div', {\n                        class: 'vxe-tree--line-wrapper'\n                    }, [\n                        h('div', {\n                            class: 'vxe-tree--line',\n                            style: {\n                                height: `${isFirstRow ? 1 : calcTreeLine(params, items, rIndex)}px`,\n                                left: `${(rLevel * treeOpts.indent) + (rLevel ? 2 - getOffsetSize() : 0) + 16}px`\n                            }\n                        })\n                    ])\n                ];\n            }\n            return [];\n        };\n        /**\n         * 渲染列\n         */\n        const renderColumn = (seq, rowid, fixedType, rowLevel, row, rowIndex, $rowIndex, _rowIndex, column, $columnIndex, columns, items) => {\n            const { columnKey, height, showOverflow: allColumnOverflow, cellClassName: allCellClassName, cellStyle, align: allAlign, spanMethod, mouseConfig, editConfig, editRules, tooltipConfig } = tableProps;\n            const { tableData, overflowX, scrollYLoad, currentColumn, mergeList, editStore, isAllOverflow, validErrorMaps } = tableReactData;\n            const { afterFullData } = tableInternalData;\n            const validOpts = computeValidOpts.value;\n            const checkboxOpts = computeCheckboxOpts.value;\n            const editOpts = computeEditOpts.value;\n            const tooltipOpts = computeTooltipOpts.value;\n            const rowOpts = computeRowOpts.value;\n            const sYOpts = computeSYOpts.value;\n            const columnOpts = computeColumnOpts.value;\n            const { type, cellRender, editRender, align, showOverflow, className, treeNode, slots } = column;\n            const { actived } = editStore;\n            const { rHeight: scrollYRHeight } = sYOpts;\n            const { height: rowHeight } = rowOpts;\n            const renderOpts = editRender || cellRender;\n            const compConf = renderOpts ? renderer.get(renderOpts.name) : null;\n            const compCellClassName = compConf ? (compConf.tableCellClassName || compConf.cellClassName) : null;\n            const compCellStyle = compConf ? (compConf.tableCellStyle || compConf.cellStyle) : '';\n            const showAllTip = tooltipOpts.showAll;\n            const columnIndex = $xeTable.getColumnIndex(column);\n            const _columnIndex = $xeTable.getVTColumnIndex(column);\n            const isEdit = isEnableConf(editRender);\n            let fixedHiddenColumn = fixedType ? column.fixed !== fixedType : column.fixed && overflowX;\n            const cellOverflow = (XEUtils.isUndefined(showOverflow) || XEUtils.isNull(showOverflow)) ? allColumnOverflow : showOverflow;\n            let showEllipsis = cellOverflow === 'ellipsis';\n            const showTitle = cellOverflow === 'title';\n            const showTooltip = cellOverflow === true || cellOverflow === 'tooltip';\n            let hasEllipsis = showTitle || showTooltip || showEllipsis;\n            let isDirty;\n            const tdOns = {};\n            const cellAlign = align || allAlign;\n            const errorValidItem = validErrorMaps[`${rowid}:${column.id}`];\n            const showValidTip = editRules && validOpts.showMessage && (validOpts.message === 'default' ? (height || tableData.length > 1) : validOpts.message === 'inline');\n            const attrs = { colid: column.id };\n            const params = { $table: $xeTable, $grid: $xeTable.xegrid, seq, rowid, row, rowIndex, $rowIndex, _rowIndex, column, columnIndex, $columnIndex, _columnIndex, fixed: fixedType, type: renderType, isHidden: fixedHiddenColumn, level: rowLevel, visibleData: afterFullData, data: tableData, items };\n            // 虚拟滚动不支持动态高度\n            if (scrollYLoad && !hasEllipsis) {\n                showEllipsis = hasEllipsis = true;\n            }\n            // hover 进入事件\n            if (showTitle || showTooltip || showAllTip || tooltipConfig) {\n                tdOns.onMouseenter = (evnt) => {\n                    if (isVMScrollProcess()) {\n                        return;\n                    }\n                    if (showTitle) {\n                        updateCellTitle(evnt.currentTarget, column);\n                    }\n                    else if (showTooltip || showAllTip) {\n                        // 如果配置了显示 tooltip\n                        $xeTable.triggerBodyTooltipEvent(evnt, params);\n                    }\n                    $xeTable.dispatchEvent('cell-mouseenter', Object.assign({ cell: evnt.currentTarget }, params), evnt);\n                };\n            }\n            // hover 退出事件\n            if (showTooltip || showAllTip || tooltipConfig) {\n                tdOns.onMouseleave = (evnt) => {\n                    if (isVMScrollProcess()) {\n                        return;\n                    }\n                    if (showTooltip || showAllTip) {\n                        $xeTable.handleTargetLeaveEvent(evnt);\n                    }\n                    $xeTable.dispatchEvent('cell-mouseleave', Object.assign({ cell: evnt.currentTarget }, params), evnt);\n                };\n            }\n            // 按下事件处理\n            if (checkboxOpts.range || mouseConfig) {\n                tdOns.onMousedown = (evnt) => {\n                    $xeTable.triggerCellMousedownEvent(evnt, params);\n                };\n            }\n            // 点击事件处理\n            tdOns.onClick = (evnt) => {\n                $xeTable.triggerCellClickEvent(evnt, params);\n            };\n            // 双击事件处理\n            tdOns.onDblclick = (evnt) => {\n                $xeTable.triggerCellDblclickEvent(evnt, params);\n            };\n            // 合并行或列\n            if (mergeList.length) {\n                const spanRest = mergeBodyMethod(mergeList, _rowIndex, _columnIndex);\n                if (spanRest) {\n                    const { rowspan, colspan } = spanRest;\n                    if (!rowspan || !colspan) {\n                        return null;\n                    }\n                    if (rowspan > 1) {\n                        attrs.rowspan = rowspan;\n                    }\n                    if (colspan > 1) {\n                        attrs.colspan = colspan;\n                    }\n                }\n            }\n            else if (spanMethod) {\n                // 自定义合并行或列的方法\n                const { rowspan = 1, colspan = 1 } = spanMethod(params) || {};\n                if (!rowspan || !colspan) {\n                    return null;\n                }\n                if (rowspan > 1) {\n                    attrs.rowspan = rowspan;\n                }\n                if (colspan > 1) {\n                    attrs.colspan = colspan;\n                }\n            }\n            // 如果被合并不可隐藏\n            if (fixedHiddenColumn && mergeList) {\n                if (attrs.colspan > 1 || attrs.rowspan > 1) {\n                    fixedHiddenColumn = false;\n                }\n            }\n            // 如果编辑列开启显示状态\n            if (!fixedHiddenColumn && editConfig && (editRender || cellRender) && (editOpts.showStatus || editOpts.showUpdateStatus)) {\n                isDirty = $xeTable.isUpdateByRow(row, column.field);\n            }\n            const tdVNs = [];\n            if (fixedHiddenColumn && (allColumnOverflow ? isAllOverflow : allColumnOverflow)) {\n                tdVNs.push(h('div', {\n                    class: ['vxe-cell', {\n                            'c--title': showTitle,\n                            'c--tooltip': showTooltip,\n                            'c--ellipsis': showEllipsis\n                        }],\n                    style: {\n                        maxHeight: hasEllipsis && (scrollYRHeight || rowHeight) ? `${scrollYRHeight || rowHeight}px` : ''\n                    }\n                }));\n            }\n            else {\n                // 渲染单元格\n                tdVNs.push(...renderLine(params), h('div', {\n                    class: ['vxe-cell', {\n                            'c--title': showTitle,\n                            'c--tooltip': showTooltip,\n                            'c--ellipsis': showEllipsis\n                        }],\n                    style: {\n                        maxHeight: hasEllipsis && (scrollYRHeight || rowHeight) ? `${scrollYRHeight || rowHeight}px` : ''\n                    },\n                    title: showTitle ? $xeTable.getCellLabel(row, column) : null\n                }, column.renderCell(params)));\n                if (showValidTip && errorValidItem) {\n                    const errRule = errorValidItem.rule;\n                    const validSlot = slots ? slots.valid : null;\n                    const validParams = Object.assign(Object.assign({}, params), errorValidItem);\n                    tdVNs.push(h('div', {\n                        class: ['vxe-cell--valid-error-hint', getPropClass(validOpts.className, validParams)],\n                        style: errRule && errRule.maxWidth\n                            ? {\n                                width: `${errRule.maxWidth}px`\n                            }\n                            : null\n                    }, validSlot\n                        ? $xeTable.callSlot(validSlot, validParams)\n                        : [\n                            h('span', {\n                                class: 'vxe-cell--valid-error-msg'\n                            }, errorValidItem.content)\n                        ]));\n                }\n            }\n            return h('td', Object.assign(Object.assign(Object.assign({ class: [\n                    'vxe-body--column',\n                    column.id,\n                    {\n                        [`col--${cellAlign}`]: cellAlign,\n                        [`col--${type}`]: type,\n                        'col--last': $columnIndex === columns.length - 1,\n                        'col--tree-node': treeNode,\n                        'col--edit': isEdit,\n                        'col--ellipsis': hasEllipsis,\n                        'fixed--hidden': fixedHiddenColumn,\n                        'col--dirty': isDirty,\n                        'col--active': editConfig && isEdit && (actived.row === row && (actived.column === column || editOpts.mode === 'row')),\n                        'col--valid-error': !!errorValidItem,\n                        'col--current': currentColumn === column\n                    },\n                    getPropClass(compCellClassName, params),\n                    getPropClass(className, params),\n                    getPropClass(allCellClassName, params)\n                ], key: columnKey || columnOpts.useKey ? column.id : $columnIndex }, attrs), { style: Object.assign({\n                    height: hasEllipsis && (scrollYRHeight || rowHeight) ? `${scrollYRHeight || rowHeight}px` : ''\n                }, XEUtils.isFunction(compCellStyle) ? compCellStyle(params) : compCellStyle, XEUtils.isFunction(cellStyle) ? cellStyle(params) : cellStyle) }), tdOns), tdVNs);\n        };\n        const renderRows = (fixedType, tableData, tableColumn) => {\n            const { stripe, rowKey, highlightHoverRow, rowClassName, rowStyle, showOverflow: allColumnOverflow, editConfig, treeConfig } = tableProps;\n            const { hasFixedColumn, treeExpandedMaps, scrollYLoad, rowExpandedMaps, expandColumn, selectRadioRow, pendingRowMaps, pendingRowList } = tableReactData;\n            const { fullAllDataRowIdData } = tableInternalData;\n            const checkboxOpts = computeCheckboxOpts.value;\n            const radioOpts = computeRadioOpts.value;\n            const treeOpts = computeTreeOpts.value;\n            const editOpts = computeEditOpts.value;\n            const rowOpts = computeRowOpts.value;\n            const { transform } = treeOpts;\n            const childrenField = treeOpts.children || treeOpts.childrenField;\n            const rows = [];\n            tableData.forEach((row, $rowIndex) => {\n                const trOn = {};\n                let rowIndex = $rowIndex;\n                // 确保任何情况下 rowIndex 都精准指向真实 data 索引\n                rowIndex = $xeTable.getRowIndex(row);\n                // 事件绑定\n                if (rowOpts.isHover || highlightHoverRow) {\n                    trOn.onMouseenter = (evnt) => {\n                        if (isVMScrollProcess()) {\n                            return;\n                        }\n                        $xeTable.triggerHoverEvent(evnt, { row, rowIndex });\n                    };\n                    trOn.onMouseleave = () => {\n                        if (isVMScrollProcess()) {\n                            return;\n                        }\n                        $xeTable.clearHoverRow();\n                    };\n                }\n                const rowid = getRowid($xeTable, row);\n                const rest = fullAllDataRowIdData[rowid];\n                let rowLevel = 0;\n                let seq = -1;\n                let _rowIndex = 0;\n                if (rest) {\n                    rowLevel = rest.level;\n                    seq = rest.seq;\n                    _rowIndex = rest._index;\n                }\n                const params = { $table: $xeTable, seq, rowid, fixed: fixedType, type: renderType, level: rowLevel, row, rowIndex, $rowIndex, _rowIndex };\n                // 行是否被展开\n                const isExpandRow = expandColumn && !!rowExpandedMaps[rowid];\n                // 树节点是否被展开\n                let isExpandTree = false;\n                let rowChildren = [];\n                // 处理新增状态\n                let isNewRow = false;\n                if (editConfig) {\n                    isNewRow = $xeTable.isInsertByRow(row);\n                }\n                if (treeConfig && !scrollYLoad && !transform) {\n                    rowChildren = row[childrenField];\n                    isExpandTree = rowChildren && rowChildren.length > 0 && !!treeExpandedMaps[rowid];\n                }\n                rows.push(h('tr', Object.assign({ class: [\n                        'vxe-body--row',\n                        treeConfig ? `row--level-${rowLevel}` : '',\n                        {\n                            'row--stripe': stripe && ($xeTable.getVTRowIndex(row) + 1) % 2 === 0,\n                            'is--new': isNewRow,\n                            'is--expand-row': isExpandRow,\n                            'is--expand-tree': isExpandTree,\n                            'row--new': isNewRow && (editOpts.showStatus || editOpts.showInsertStatus),\n                            'row--radio': radioOpts.highlight && $xeTable.eqRow(selectRadioRow, row),\n                            'row--checked': checkboxOpts.highlight && $xeTable.isCheckedByCheckboxRow(row),\n                            'row--pending': pendingRowList.length && !!pendingRowMaps[rowid]\n                        },\n                        getPropClass(rowClassName, params)\n                    ], rowid: rowid, style: rowStyle ? (XEUtils.isFunction(rowStyle) ? rowStyle(params) : rowStyle) : null, key: (rowKey || rowOpts.useKey) || treeConfig ? rowid : $rowIndex }, trOn), tableColumn.map((column, $columnIndex) => {\n                    return renderColumn(seq, rowid, fixedType, rowLevel, row, rowIndex, $rowIndex, _rowIndex, column, $columnIndex, tableColumn, tableData);\n                })));\n                // 如果行被展开了\n                if (isExpandRow) {\n                    const expandOpts = computeExpandOpts.value;\n                    const { height: expandHeight, padding } = expandOpts;\n                    const cellStyle = {};\n                    if (expandHeight) {\n                        cellStyle.height = `${expandHeight}px`;\n                    }\n                    if (treeConfig) {\n                        cellStyle.paddingLeft = `${(rowLevel * treeOpts.indent) + 30}px`;\n                    }\n                    const { showOverflow } = expandColumn;\n                    const hasEllipsis = (XEUtils.isUndefined(showOverflow) || XEUtils.isNull(showOverflow)) ? allColumnOverflow : showOverflow;\n                    const expandParams = { $table: $xeTable, seq, column: expandColumn, fixed: fixedType, type: renderType, level: rowLevel, row, rowIndex, $rowIndex, _rowIndex };\n                    rows.push(h('tr', Object.assign({ class: ['vxe-body--expanded-row', {\n                                'is--padding': padding\n                            }], key: `expand_${rowid}`, style: rowStyle ? (XEUtils.isFunction(rowStyle) ? rowStyle(expandParams) : rowStyle) : null }, trOn), [\n                        h('td', {\n                            class: {\n                                'vxe-body--expanded-column': 1,\n                                'fixed--hidden': fixedType && !hasFixedColumn,\n                                'col--ellipsis': hasEllipsis\n                            },\n                            colspan: tableColumn.length\n                        }, [\n                            h('div', {\n                                class: {\n                                    'vxe-body--expanded-cell': 1,\n                                    'is--ellipsis': expandHeight\n                                },\n                                style: cellStyle\n                            }, [\n                                expandColumn.renderData(expandParams)\n                            ])\n                        ])\n                    ]));\n                }\n                // 如果是树形表格\n                if (isExpandTree) {\n                    rows.push(...renderRows(fixedType, rowChildren, tableColumn));\n                }\n            });\n            return rows;\n        };\n        /**\n         * 同步滚动条\n         */\n        let scrollProcessTimeout;\n        const syncBodyScroll = (fixedType, scrollTop, elem1, elem2) => {\n            if (elem1 || elem2) {\n                if (elem1) {\n                    removeScrollListener(elem1);\n                    elem1.scrollTop = scrollTop;\n                }\n                if (elem2) {\n                    removeScrollListener(elem2);\n                    elem2.scrollTop = scrollTop;\n                }\n                clearTimeout(scrollProcessTimeout);\n                scrollProcessTimeout = setTimeout(() => {\n                    // const tableBody = refTableBody.value\n                    // const leftBody = refTableLeftBody.value\n                    // const rightBody = refTableRightBody.value\n                    // const bodyElem = tableBody.$el as XEBodyScrollElement\n                    // const leftElem = leftBody ? leftBody.$el as XEBodyScrollElement : null\n                    // const rightElem = rightBody ? rightBody.$el as XEBodyScrollElement : null\n                    restoreScrollListener(elem1);\n                    restoreScrollListener(elem2);\n                    // 检查滚动条是的同步\n                    // let targetTop = bodyElem.scrollTop\n                    // if (fixedType === 'left') {\n                    //   if (leftElem) {\n                    //     targetTop = leftElem.scrollTop\n                    //   }\n                    // } else if (fixedType === 'right') {\n                    //   if (rightElem) {\n                    //     targetTop = rightElem.scrollTop\n                    //   }\n                    // }\n                    // setScrollTop(bodyElem, targetTop)\n                    // setScrollTop(leftElem, targetTop)\n                    // setScrollTop(rightElem, targetTop)\n                    tableReactData.lastScrollTime = Date.now();\n                }, 300);\n            }\n        };\n        const scrollLoadingTime = null;\n        /**\n         * 滚动处理\n         * 如果存在列固定左侧，同步更新滚动状态\n         * 如果存在列固定右侧，同步更新滚动状态\n         */\n        const scrollEvent = (evnt) => {\n            const { fixedType } = props;\n            const { highlightHoverRow } = tableProps;\n            const { scrollXLoad, scrollYLoad } = tableReactData;\n            const { elemStore, lastScrollTop, lastScrollLeft } = tableInternalData;\n            const rowOpts = computeRowOpts.value;\n            const tableHeader = refTableHeader.value;\n            const tableBody = refTableBody.value;\n            const tableFooter = refTableFooter.value;\n            const leftBody = refTableLeftBody.value;\n            const rightBody = refTableRightBody.value;\n            const validTip = refValidTooltip.value;\n            const scrollBodyElem = refElem.value;\n            const headerElem = tableHeader ? tableHeader.$el : null;\n            const footerElem = tableFooter ? tableFooter.$el : null;\n            const bodyElem = tableBody.$el;\n            const leftElem = leftBody ? leftBody.$el : null;\n            const rightElem = rightBody ? rightBody.$el : null;\n            const bodyYRef = elemStore['main-body-ySpace'];\n            const bodyYElem = bodyYRef ? bodyYRef.value : null;\n            const bodyXRef = elemStore['main-body-xSpace'];\n            const bodyXElem = bodyXRef ? bodyXRef.value : null;\n            const bodyHeight = scrollYLoad && bodyYElem ? bodyYElem.clientHeight : bodyElem.clientHeight;\n            const bodyWidth = scrollXLoad && bodyXElem ? bodyXElem.clientWidth : bodyElem.clientWidth;\n            let scrollTop = scrollBodyElem.scrollTop;\n            const scrollLeft = bodyElem.scrollLeft;\n            const isRollX = scrollLeft !== lastScrollLeft;\n            const isRollY = scrollTop !== lastScrollTop;\n            tableInternalData.lastScrollTop = scrollTop;\n            tableInternalData.lastScrollLeft = scrollLeft;\n            tableReactData.lastScrollTime = Date.now();\n            if (rowOpts.isHover || highlightHoverRow) {\n                $xeTable.clearHoverRow();\n            }\n            if (leftElem && fixedType === 'left') {\n                scrollTop = leftElem.scrollTop;\n                syncBodyScroll(fixedType, scrollTop, bodyElem, rightElem);\n            }\n            else if (rightElem && fixedType === 'right') {\n                scrollTop = rightElem.scrollTop;\n                syncBodyScroll(fixedType, scrollTop, bodyElem, leftElem);\n            }\n            else {\n                if (isRollX) {\n                    if (headerElem) {\n                        headerElem.scrollLeft = bodyElem.scrollLeft;\n                    }\n                    if (footerElem) {\n                        footerElem.scrollLeft = bodyElem.scrollLeft;\n                    }\n                }\n                if (leftElem || rightElem) {\n                    $xeTable.checkScrolling();\n                    if (isRollY) {\n                        syncBodyScroll(fixedType, scrollTop, leftElem, rightElem);\n                    }\n                }\n            }\n            // let isLoadScroll = false\n            if (scrollXLoad && isRollX) {\n                // isLoadScroll = true\n                $xeTable.triggerScrollXEvent(evnt);\n            }\n            if (scrollYLoad && isRollY) {\n                // isLoadScroll = true\n                $xeTable.triggerScrollYEvent(evnt);\n            }\n            if (scrollLoadingTime !== null) {\n                clearTimeout(scrollLoadingTime);\n            }\n            // if (isLoadScroll) {\n            //   tableReactData.scrollVMLoading = true\n            //   scrollLoadingTime = setTimeout(() => {\n            //     scrollLoadingTime = null\n            //     tableReactData.scrollVMLoading = false\n            //   }, 20)\n            // } else {\n            //   tableReactData.scrollVMLoading = false\n            // }\n            if (isRollX && validTip && validTip.reactData.visible) {\n                validTip.updatePlacement();\n            }\n            $xeTable.dispatchEvent('scroll', {\n                type: renderType,\n                fixed: fixedType,\n                scrollTop,\n                scrollLeft,\n                scrollHeight: bodyElem.scrollHeight,\n                scrollWidth: bodyElem.scrollWidth,\n                bodyHeight,\n                bodyWidth,\n                isX: isRollX,\n                isY: isRollY\n            }, evnt);\n        };\n        let wheelTime;\n        let wheelYSize = 0;\n        let wheelYInterval = 0;\n        let wheelYTotal = 0;\n        let isPrevWheelTop = false;\n        const handleWheel = (evnt, isTopWheel, deltaTop, isRollX, isRollY) => {\n            const { elemStore } = tableInternalData;\n            const { scrollXLoad, scrollYLoad } = tableReactData;\n            const tableBody = refTableBody.value;\n            const leftBody = refTableLeftBody.value;\n            const rightBody = refTableRightBody.value;\n            const leftElem = leftBody ? leftBody.$el : null;\n            const rightElem = rightBody ? rightBody.$el : null;\n            const bodyElem = tableBody.$el;\n            const bodyYRef = elemStore['main-body-ySpace'];\n            const bodyYElem = bodyYRef ? bodyYRef.value : null;\n            const bodyXRef = elemStore['main-body-xSpace'];\n            const bodyXElem = bodyXRef ? bodyXRef.value : null;\n            const bodyHeight = scrollYLoad && bodyYElem ? bodyYElem.clientHeight : bodyElem.clientHeight;\n            const bodyWidth = scrollXLoad && bodyXElem ? bodyXElem.clientWidth : bodyElem.clientWidth;\n            const remainSize = isPrevWheelTop === isTopWheel ? Math.max(0, wheelYSize - wheelYTotal) : 0;\n            isPrevWheelTop = isTopWheel;\n            wheelYSize = Math.abs(isTopWheel ? deltaTop - remainSize : deltaTop + remainSize);\n            wheelYInterval = 0;\n            wheelYTotal = 0;\n            clearTimeout(wheelTime);\n            const handleSmooth = () => {\n                if (wheelYTotal < wheelYSize) {\n                    const { fixedType } = props;\n                    wheelYInterval = Math.max(5, Math.floor(wheelYInterval * 1.5));\n                    wheelYTotal = wheelYTotal + wheelYInterval;\n                    if (wheelYTotal > wheelYSize) {\n                        wheelYInterval = wheelYInterval - (wheelYTotal - wheelYSize);\n                    }\n                    const { scrollTop, clientHeight, scrollHeight } = bodyElem;\n                    const targerTop = scrollTop + (wheelYInterval * (isTopWheel ? -1 : 1));\n                    bodyElem.scrollTop = targerTop;\n                    if (leftElem) {\n                        leftElem.scrollTop = targerTop;\n                    }\n                    if (rightElem) {\n                        rightElem.scrollTop = targerTop;\n                    }\n                    if (isTopWheel ? targerTop < scrollHeight - clientHeight : targerTop >= 0) {\n                        wheelTime = setTimeout(handleSmooth, 10);\n                    }\n                    $xeTable.dispatchEvent('scroll', {\n                        type: renderType,\n                        fixed: fixedType,\n                        scrollTop: bodyElem.scrollTop,\n                        scrollLeft: bodyElem.scrollLeft,\n                        scrollHeight: bodyElem.scrollHeight,\n                        scrollWidth: bodyElem.scrollWidth,\n                        bodyHeight,\n                        bodyWidth,\n                        isX: isRollX,\n                        isY: isRollY\n                    }, evnt);\n                }\n            };\n            handleSmooth();\n        };\n        /**\n         * 滚轮处理\n         */\n        const wheelEvent = (evnt) => {\n            const { deltaY, deltaX } = evnt;\n            const { highlightHoverRow } = tableProps;\n            const { scrollYLoad } = tableReactData;\n            const { lastScrollTop, lastScrollLeft } = tableInternalData;\n            const rowOpts = computeRowOpts.value;\n            const tableBody = refTableBody.value;\n            const scrollBodyElem = refElem.value;\n            const bodyElem = tableBody.$el;\n            const deltaTop = deltaY;\n            const deltaLeft = deltaX;\n            const isTopWheel = deltaTop < 0;\n            // 如果滚动位置已经是顶部或底部，则不需要触发\n            if (isTopWheel ? scrollBodyElem.scrollTop <= 0 : scrollBodyElem.scrollTop >= scrollBodyElem.scrollHeight - scrollBodyElem.clientHeight) {\n                return;\n            }\n            const scrollTop = scrollBodyElem.scrollTop + deltaTop;\n            const scrollLeft = bodyElem.scrollLeft + deltaLeft;\n            const isRollX = scrollLeft !== lastScrollLeft;\n            const isRollY = scrollTop !== lastScrollTop;\n            // 用于鼠标纵向滚轮处理\n            if (isRollY) {\n                evnt.preventDefault();\n                tableInternalData.lastScrollTop = scrollTop;\n                tableInternalData.lastScrollLeft = scrollLeft;\n                tableReactData.lastScrollTime = Date.now();\n                if (rowOpts.isHover || highlightHoverRow) {\n                    $xeTable.clearHoverRow();\n                }\n                handleWheel(evnt, isTopWheel, deltaTop, isRollX, isRollY);\n                if (scrollYLoad) {\n                    $xeTable.triggerScrollYEvent(evnt);\n                }\n            }\n        };\n        onMounted(() => {\n            nextTick(() => {\n                const { fixedType } = props;\n                const { elemStore } = tableInternalData;\n                const prefix = `${fixedType || 'main'}-body-`;\n                const el = refElem.value;\n                elemStore[`${prefix}wrapper`] = refElem;\n                elemStore[`${prefix}table`] = refBodyTable;\n                elemStore[`${prefix}colgroup`] = refBodyColgroup;\n                elemStore[`${prefix}list`] = refBodyTBody;\n                elemStore[`${prefix}xSpace`] = refBodyXSpace;\n                elemStore[`${prefix}ySpace`] = refBodyYSpace;\n                elemStore[`${prefix}emptyBlock`] = refBodyEmptyBlock;\n                if (el) {\n                    el.onscroll = scrollEvent;\n                    el._onscroll = scrollEvent;\n                }\n            });\n        });\n        onBeforeUnmount(() => {\n            const el = refElem.value;\n            clearTimeout(wheelTime);\n            if (el) {\n                el._onscroll = null;\n                el.onscroll = null;\n            }\n        });\n        onUnmounted(() => {\n            const { fixedType } = props;\n            const { elemStore } = tableInternalData;\n            const prefix = `${fixedType || 'main'}-body-`;\n            elemStore[`${prefix}wrapper`] = null;\n            elemStore[`${prefix}table`] = null;\n            elemStore[`${prefix}colgroup`] = null;\n            elemStore[`${prefix}list`] = null;\n            elemStore[`${prefix}xSpace`] = null;\n            elemStore[`${prefix}ySpace`] = null;\n            elemStore[`${prefix}emptyBlock`] = null;\n        });\n        const renderVN = () => {\n            let { fixedColumn, fixedType, tableColumn } = props;\n            const { keyboardConfig, showOverflow: allColumnOverflow, spanMethod, mouseConfig } = tableProps;\n            const { tableData, mergeList, scrollYLoad, isAllOverflow } = tableReactData;\n            const { visibleColumn } = tableInternalData;\n            const { slots } = tableContext;\n            const sYOpts = computeSYOpts.value;\n            const emptyOpts = computeEmptyOpts.value;\n            const keyboardOpts = computeKeyboardOpts.value;\n            const mouseOpts = computeMouseOpts.value;\n            // const isMergeLeftFixedExceeded = computeIsMergeLeftFixedExceeded.value\n            // const isMergeRightFixedExceeded = computeIsMergeRightFixedExceeded.value\n            // 如果是使用优化模式\n            if (fixedType) {\n                // 如果存在展开行使用全量渲染\n                if (!tableReactData.expandColumn && (scrollYLoad || (allColumnOverflow ? isAllOverflow : allColumnOverflow))) {\n                    if (!mergeList.length && !spanMethod && !(keyboardConfig && keyboardOpts.isMerge)) {\n                        tableColumn = fixedColumn;\n                    }\n                    else {\n                        tableColumn = visibleColumn;\n                        // 检查固定列是否被合并，合并范围是否超出固定列\n                        // if (mergeList.length && !isMergeLeftFixedExceeded && fixedType === 'left') {\n                        //   tableColumn = fixedColumn\n                        // } else if (mergeList.length && !isMergeRightFixedExceeded && fixedType === 'right') {\n                        //   tableColumn = fixedColumn\n                        // } else {\n                        //   tableColumn = visibleColumn\n                        // }\n                    }\n                }\n                else {\n                    tableColumn = visibleColumn;\n                }\n            }\n            let emptyContent;\n            const emptySlot = slots ? slots.empty : null;\n            if (emptySlot) {\n                emptyContent = $xeTable.callSlot(emptySlot, { $table: $xeTable, $grid: $xeTable.xegrid });\n            }\n            else {\n                const compConf = emptyOpts.name ? renderer.get(emptyOpts.name) : null;\n                const rtEmptyView = compConf ? (compConf.renderTableEmpty || compConf.renderTableEmptyView || compConf.renderEmpty) : null;\n                if (rtEmptyView) {\n                    emptyContent = getSlotVNs(rtEmptyView(emptyOpts, { $table: $xeTable }));\n                }\n                else {\n                    emptyContent = tableProps.emptyText || getI18n('vxe.table.emptyText');\n                }\n            }\n            return h('div', Object.assign({ ref: refElem, class: ['vxe-table--body-wrapper', fixedType ? `fixed-${fixedType}--wrapper` : 'body--wrapper'], xid: xID }, (sYOpts.mode === 'wheel' ? { onWheel: wheelEvent } : {})), [\n                fixedType\n                    ? createCommentVNode()\n                    : h('div', {\n                        ref: refBodyXSpace,\n                        class: 'vxe-body--x-space'\n                    }),\n                h('div', {\n                    ref: refBodyYSpace,\n                    class: 'vxe-body--y-space'\n                }),\n                h('table', {\n                    ref: refBodyTable,\n                    class: 'vxe-table--body',\n                    xid: xID,\n                    cellspacing: 0,\n                    cellpadding: 0,\n                    border: 0\n                }, [\n                    /**\n                     * 列宽\n                     */\n                    h('colgroup', {\n                        ref: refBodyColgroup\n                    }, tableColumn.map((column, $columnIndex) => {\n                        return h('col', {\n                            name: column.id,\n                            key: $columnIndex\n                        });\n                    })),\n                    /**\n                     * 内容\n                     */\n                    h('tbody', {\n                        ref: refBodyTBody\n                    }, renderRows(fixedType, tableData, tableColumn))\n                ]),\n                h('div', {\n                    class: 'vxe-table--checkbox-range'\n                }),\n                mouseConfig && mouseOpts.area\n                    ? h('div', {\n                        class: 'vxe-table--cell-area'\n                    }, [\n                        h('span', {\n                            class: 'vxe-table--cell-main-area'\n                        }, mouseOpts.extension\n                            ? [\n                                h('span', {\n                                    class: 'vxe-table--cell-main-area-btn',\n                                    onMousedown(evnt) {\n                                        $xeTable.triggerCellExtendMousedownEvent(evnt, { $table: $xeTable, fixed: fixedType, type: renderType });\n                                    }\n                                })\n                            ]\n                            : []),\n                        h('span', {\n                            class: 'vxe-table--cell-copy-area'\n                        }),\n                        h('span', {\n                            class: 'vxe-table--cell-extend-area'\n                        }),\n                        h('span', {\n                            class: 'vxe-table--cell-multi-area'\n                        }),\n                        h('span', {\n                            class: 'vxe-table--cell-active-area'\n                        })\n                    ])\n                    : null,\n                !fixedType\n                    ? h('div', {\n                        class: 'vxe-table--empty-block',\n                        ref: refBodyEmptyBlock\n                    }, [\n                        h('div', {\n                            class: 'vxe-table--empty-content'\n                        }, emptyContent)\n                    ])\n                    : null\n            ]);\n        };\n        return renderVN;\n    }\n});\n", "import { createCommentVNode, defineComponent, h, ref, inject, nextTick, watch, onMounted, onUnmounted } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { convertHeaderColumnToRows, getColReMinWidth } from './util';\nimport { hasClass, getOffsetPos, addClass, removeClass } from '../../ui/src/dom';\nconst renderType = 'header';\nexport default defineComponent({\n    name: 'VxeTableHeader',\n    props: {\n        tableData: Array,\n        tableColumn: Array,\n        tableGroupColumn: Array,\n        fixedColumn: Array,\n        fixedType: { type: String, default: null }\n    },\n    setup(props) {\n        const $xeTable = inject('$xeTable', {});\n        const { xID, props: tableProps, reactData: tableReactData, internalData: tableInternalData } = $xeTable;\n        const { refElem: tableRefElem, refTableBody, refLeftContainer, refRightContainer, refCellResizeBar } = $xeTable.getRefMaps();\n        const { computeColumnOpts } = $xeTable.getComputeMaps();\n        const headerColumn = ref([]);\n        const refElem = ref();\n        const refHeaderTable = ref();\n        const refHeaderColgroup = ref();\n        const refHeaderTHead = ref();\n        const refHeaderXSpace = ref();\n        const refHeaderBorderRepair = ref();\n        const uploadColumn = () => {\n            const { isGroup } = tableReactData;\n            headerColumn.value = isGroup ? convertHeaderColumnToRows(props.tableGroupColumn) : [];\n        };\n        const resizeMousedown = (evnt, params) => {\n            const { column } = params;\n            const { fixedType } = props;\n            const tableBody = refTableBody.value;\n            const leftContainerElem = refLeftContainer.value;\n            const rightContainerElem = refRightContainer.value;\n            const resizeBarElem = refCellResizeBar.value;\n            const { clientX: dragClientX } = evnt;\n            const wrapperElem = refElem.value;\n            const dragBtnElem = evnt.target;\n            const cell = params.cell = dragBtnElem.parentNode;\n            let dragLeft = 0;\n            const tableBodyElem = tableBody.$el;\n            const pos = getOffsetPos(dragBtnElem, wrapperElem);\n            const dragBtnWidth = dragBtnElem.clientWidth;\n            const dragBtnOffsetWidth = Math.floor(dragBtnWidth / 2);\n            const minInterval = getColReMinWidth(params) - dragBtnOffsetWidth; // 列之间的最小间距\n            let dragMinLeft = pos.left - cell.clientWidth + dragBtnWidth + minInterval;\n            let dragPosLeft = pos.left + dragBtnOffsetWidth;\n            const domMousemove = document.onmousemove;\n            const domMouseup = document.onmouseup;\n            const isLeftFixed = fixedType === 'left';\n            const isRightFixed = fixedType === 'right';\n            const tableEl = tableRefElem.value;\n            // 计算左右侧固定列偏移量\n            let fixedOffsetWidth = 0;\n            if (isLeftFixed || isRightFixed) {\n                const siblingProp = isLeftFixed ? 'nextElementSibling' : 'previousElementSibling';\n                let tempCellElem = cell[siblingProp];\n                while (tempCellElem) {\n                    if (hasClass(tempCellElem, 'fixed--hidden')) {\n                        break;\n                    }\n                    else if (!hasClass(tempCellElem, 'col--group')) {\n                        fixedOffsetWidth += tempCellElem.offsetWidth;\n                    }\n                    tempCellElem = tempCellElem[siblingProp];\n                }\n                if (isRightFixed && rightContainerElem) {\n                    dragPosLeft = rightContainerElem.offsetLeft + fixedOffsetWidth;\n                }\n            }\n            // 处理拖动事件\n            const updateEvent = function (evnt) {\n                evnt.stopPropagation();\n                evnt.preventDefault();\n                const offsetX = evnt.clientX - dragClientX;\n                let left = dragPosLeft + offsetX;\n                const scrollLeft = fixedType ? 0 : tableBodyElem.scrollLeft;\n                if (isLeftFixed) {\n                    // 左固定列（不允许超过右侧固定列、不允许超过右边距）\n                    left = Math.min(left, (rightContainerElem ? rightContainerElem.offsetLeft : tableBodyElem.clientWidth) - fixedOffsetWidth - minInterval);\n                }\n                else if (isRightFixed) {\n                    // 右侧固定列（不允许超过左侧固定列、不允许超过左边距）\n                    dragMinLeft = (leftContainerElem ? leftContainerElem.clientWidth : 0) + fixedOffsetWidth + minInterval;\n                    left = Math.min(left, dragPosLeft + cell.clientWidth - minInterval);\n                }\n                else {\n                    dragMinLeft = Math.max(tableBodyElem.scrollLeft, dragMinLeft);\n                    // left = Math.min(left, tableBodyElem.clientWidth + tableBodyElem.scrollLeft - 40)\n                }\n                dragLeft = Math.max(left, dragMinLeft);\n                resizeBarElem.style.left = `${dragLeft - scrollLeft}px`;\n            };\n            tableReactData._isResize = true;\n            addClass(tableEl, 'drag--resize');\n            resizeBarElem.style.display = 'block';\n            document.onmousemove = updateEvent;\n            document.onmouseup = function (evnt) {\n                document.onmousemove = domMousemove;\n                document.onmouseup = domMouseup;\n                const resizeWidth = column.renderWidth + (isRightFixed ? dragPosLeft - dragLeft : dragLeft - dragPosLeft);\n                column.resizeWidth = resizeWidth;\n                resizeBarElem.style.display = 'none';\n                tableReactData._isResize = false;\n                tableInternalData._lastResizeTime = Date.now();\n                $xeTable.analyColumnWidth();\n                $xeTable.recalculate(true).then(() => {\n                    $xeTable.saveCustomStore('update:visible');\n                    $xeTable.updateCellAreas();\n                    $xeTable.dispatchEvent('resizable-change', Object.assign(Object.assign({}, params), { resizeWidth }), evnt);\n                    setTimeout(() => $xeTable.recalculate(true), 300);\n                });\n                removeClass(tableEl, 'drag--resize');\n            };\n            updateEvent(evnt);\n            if ($xeTable.closeMenu) {\n                $xeTable.closeMenu();\n            }\n        };\n        watch(() => props.tableColumn, uploadColumn);\n        onMounted(() => {\n            nextTick(() => {\n                const { fixedType } = props;\n                const { internalData } = $xeTable;\n                const { elemStore } = internalData;\n                const prefix = `${fixedType || 'main'}-header-`;\n                elemStore[`${prefix}wrapper`] = refElem;\n                elemStore[`${prefix}table`] = refHeaderTable;\n                elemStore[`${prefix}colgroup`] = refHeaderColgroup;\n                elemStore[`${prefix}list`] = refHeaderTHead;\n                elemStore[`${prefix}xSpace`] = refHeaderXSpace;\n                elemStore[`${prefix}repair`] = refHeaderBorderRepair;\n                uploadColumn();\n            });\n        });\n        onUnmounted(() => {\n            const { fixedType } = props;\n            const { internalData } = $xeTable;\n            const { elemStore } = internalData;\n            const prefix = `${fixedType || 'main'}-header-`;\n            elemStore[`${prefix}wrapper`] = null;\n            elemStore[`${prefix}table`] = null;\n            elemStore[`${prefix}colgroup`] = null;\n            elemStore[`${prefix}list`] = null;\n            elemStore[`${prefix}xSpace`] = null;\n            elemStore[`${prefix}repair`] = null;\n        });\n        const renderVN = () => {\n            const { fixedType, fixedColumn, tableColumn } = props;\n            const { resizable, border, columnKey, headerRowClassName, headerCellClassName, headerRowStyle, headerCellStyle, showHeaderOverflow: allColumnHeaderOverflow, headerAlign: allHeaderAlign, align: allAlign, mouseConfig } = tableProps;\n            const { isGroup, currentColumn, scrollXLoad, overflowX, scrollbarWidth } = tableReactData;\n            const { visibleColumn } = tableInternalData;\n            const columnOpts = computeColumnOpts.value;\n            let headerGroups = headerColumn.value;\n            let renderColumnList = tableColumn;\n            if (isGroup) {\n                renderColumnList = visibleColumn;\n            }\n            else {\n                // 如果是使用优化模式\n                if (fixedType) {\n                    if (scrollXLoad || allColumnHeaderOverflow) {\n                        renderColumnList = fixedColumn;\n                    }\n                }\n                headerGroups = [renderColumnList];\n            }\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-table--header-wrapper', fixedType ? `fixed-${fixedType}--wrapper` : 'body--wrapper'],\n                xid: xID\n            }, [\n                fixedType\n                    ? createCommentVNode()\n                    : h('div', {\n                        ref: refHeaderXSpace,\n                        class: 'vxe-body--x-space'\n                    }),\n                h('table', {\n                    ref: refHeaderTable,\n                    class: 'vxe-table--header',\n                    xid: xID,\n                    cellspacing: 0,\n                    cellpadding: 0,\n                    border: 0\n                }, [\n                    /**\n                     * 列宽\n                     */\n                    h('colgroup', {\n                        ref: refHeaderColgroup\n                    }, renderColumnList.map((column, $columnIndex) => {\n                        return h('col', {\n                            name: column.id,\n                            key: $columnIndex\n                        });\n                    }).concat(scrollbarWidth\n                        ? [\n                            h('col', {\n                                name: 'col_gutter'\n                            })\n                        ]\n                        : [])),\n                    /**\n                     * 头部\n                     */\n                    h('thead', {\n                        ref: refHeaderTHead\n                    }, headerGroups.map((cols, $rowIndex) => {\n                        return h('tr', {\n                            class: ['vxe-header--row', headerRowClassName ? (XEUtils.isFunction(headerRowClassName) ? headerRowClassName({ $table: $xeTable, $rowIndex, fixed: fixedType, type: renderType }) : headerRowClassName) : ''],\n                            style: headerRowStyle ? (XEUtils.isFunction(headerRowStyle) ? headerRowStyle({ $table: $xeTable, $rowIndex, fixed: fixedType, type: renderType }) : headerRowStyle) : null\n                        }, cols.map((column, $columnIndex) => {\n                            const { type, showHeaderOverflow, headerAlign, align, headerClassName } = column;\n                            const isColGroup = column.children && column.children.length;\n                            const fixedHiddenColumn = fixedType ? (column.fixed !== fixedType && !isColGroup) : !!column.fixed && overflowX;\n                            const headOverflow = XEUtils.eqNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow;\n                            const headAlign = headerAlign || align || allHeaderAlign || allAlign;\n                            let showEllipsis = headOverflow === 'ellipsis';\n                            const showTitle = headOverflow === 'title';\n                            const showTooltip = headOverflow === true || headOverflow === 'tooltip';\n                            let hasEllipsis = showTitle || showTooltip || showEllipsis;\n                            const hasFilter = column.filters && column.filters.some((item) => item.checked);\n                            const columnIndex = $xeTable.getColumnIndex(column);\n                            const _columnIndex = $xeTable.getVTColumnIndex(column);\n                            const params = { $table: $xeTable, $grid: $xeTable.xegrid, $rowIndex, column, columnIndex, $columnIndex, _columnIndex, fixed: fixedType, type: renderType, isHidden: fixedHiddenColumn, hasFilter };\n                            const thOns = {\n                                onClick: (evnt) => $xeTable.triggerHeaderCellClickEvent(evnt, params),\n                                onDblclick: (evnt) => $xeTable.triggerHeaderCellDblclickEvent(evnt, params)\n                            };\n                            // 横向虚拟滚动不支持动态行高\n                            if (scrollXLoad && !hasEllipsis) {\n                                showEllipsis = hasEllipsis = true;\n                            }\n                            // 按下事件处理\n                            if (mouseConfig) {\n                                thOns.onMousedown = (evnt) => $xeTable.triggerHeaderCellMousedownEvent(evnt, params);\n                            }\n                            return h('th', Object.assign(Object.assign({ class: ['vxe-header--column', column.id, {\n                                        [`col--${headAlign}`]: headAlign,\n                                        [`col--${type}`]: type,\n                                        'col--last': $columnIndex === cols.length - 1,\n                                        'col--fixed': column.fixed,\n                                        'col--group': isColGroup,\n                                        'col--ellipsis': hasEllipsis,\n                                        'fixed--hidden': fixedHiddenColumn,\n                                        'is--sortable': column.sortable,\n                                        'col--filter': !!column.filters,\n                                        'is--filter-active': hasFilter,\n                                        'col--current': currentColumn === column\n                                    },\n                                    headerClassName ? (XEUtils.isFunction(headerClassName) ? headerClassName(params) : headerClassName) : '',\n                                    headerCellClassName ? (XEUtils.isFunction(headerCellClassName) ? headerCellClassName(params) : headerCellClassName) : ''\n                                ], colid: column.id, colspan: column.colSpan > 1 ? column.colSpan : null, rowspan: column.rowSpan > 1 ? column.rowSpan : null, style: headerCellStyle ? (XEUtils.isFunction(headerCellStyle) ? headerCellStyle(params) : headerCellStyle) : null }, thOns), { key: columnKey || columnOpts.useKey || isColGroup ? column.id : $columnIndex }), [\n                                h('div', {\n                                    class: ['vxe-cell', {\n                                            'c--title': showTitle,\n                                            'c--tooltip': showTooltip,\n                                            'c--ellipsis': showEllipsis\n                                        }]\n                                }, column.renderHeader(params)),\n                                /**\n                                 * 列宽拖动\n                                 */\n                                !fixedHiddenColumn && !isColGroup && (XEUtils.isBoolean(column.resizable) ? column.resizable : (columnOpts.resizable || resizable))\n                                    ? h('div', {\n                                        class: ['vxe-resizable', {\n                                                'is--line': !border || border === 'none'\n                                            }],\n                                        onMousedown: (evnt) => resizeMousedown(evnt, params)\n                                    })\n                                    : null\n                            ]);\n                        }).concat(scrollbarWidth\n                            ? [\n                                h('th', {\n                                    class: 'vxe-header--gutter col--gutter'\n                                })\n                            ]\n                            : []));\n                    }))\n                ]),\n                /**\n                 * 其他\n                 */\n                h('div', {\n                    ref: refHeaderBorderRepair,\n                    class: 'vxe-table--header-border-line'\n                })\n            ]);\n        };\n        return renderVN;\n    }\n});\n", "import { createCommentVNode, defineComponent, h, ref, inject, nextTick, onMounted, onUnmounted } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { updateCellTitle, getPropClass } from '../../ui/src/dom';\nconst renderType = 'footer';\nfunction mergeFooterMethod(mergeFooterList, _rowIndex, _columnIndex) {\n    for (let mIndex = 0; mIndex < mergeFooterList.length; mIndex++) {\n        const { row: mergeRowIndex, col: mergeColIndex, rowspan: mergeRowspan, colspan: mergeColspan } = mergeFooterList[mIndex];\n        if (mergeColIndex > -1 && mergeRowIndex > -1 && mergeRowspan && mergeColspan) {\n            if (mergeRowIndex === _rowIndex && mergeColIndex === _columnIndex) {\n                return { rowspan: mergeRowspan, colspan: mergeColspan };\n            }\n            if (_rowIndex >= mergeRowIndex && _rowIndex < mergeRowIndex + mergeRowspan && _columnIndex >= mergeColIndex && _columnIndex < mergeColIndex + mergeColspan) {\n                return { rowspan: 0, colspan: 0 };\n            }\n        }\n    }\n}\nexport default defineComponent({\n    name: 'VxeTableFooter',\n    props: {\n        footerTableData: { type: Array, default: () => [] },\n        tableColumn: { type: Array, default: () => [] },\n        fixedColumn: { type: Array, default: () => [] },\n        fixedType: { type: String, default: null }\n    },\n    setup(props) {\n        const $xeTable = inject('$xeTable', {});\n        const { xID, props: tableProps, reactData: tableReactData, internalData: tableInternalData } = $xeTable;\n        const { refTableHeader, refTableBody, refValidTooltip } = $xeTable.getRefMaps();\n        const { computeTooltipOpts, computeColumnOpts } = $xeTable.getComputeMaps();\n        const refElem = ref();\n        const refFooterTable = ref();\n        const refFooterColgroup = ref();\n        const refFooterTFoot = ref();\n        const refFooterXSpace = ref();\n        /**\n         * 滚动处理\n         * 如果存在列固定左侧，同步更新滚动状态\n         * 如果存在列固定右侧，同步更新滚动状态\n         */\n        const scrollEvent = (evnt) => {\n            const { fixedType } = props;\n            const { scrollXLoad } = tableReactData;\n            const { lastScrollLeft } = tableInternalData;\n            const validTip = refValidTooltip.value;\n            const tableHeader = refTableHeader.value;\n            const tableBody = refTableBody.value;\n            const headerElem = tableHeader ? tableHeader.$el : null;\n            const footerElem = refElem.value;\n            const bodyElem = tableBody.$el;\n            const scrollLeft = footerElem.scrollLeft;\n            const isX = scrollLeft !== lastScrollLeft;\n            tableInternalData.lastScrollLeft = scrollLeft;\n            tableReactData.lastScrollTime = Date.now();\n            if (headerElem) {\n                headerElem.scrollLeft = scrollLeft;\n            }\n            if (bodyElem) {\n                bodyElem.scrollLeft = scrollLeft;\n            }\n            if (scrollXLoad && isX) {\n                $xeTable.triggerScrollXEvent(evnt);\n            }\n            if (isX && validTip && validTip.reactData.visible) {\n                validTip.updatePlacement();\n            }\n            $xeTable.dispatchEvent('scroll', { type: renderType, fixed: fixedType, scrollTop: bodyElem.scrollTop, scrollLeft, isX, isY: false }, evnt);\n        };\n        onMounted(() => {\n            nextTick(() => {\n                const { fixedType } = props;\n                const { elemStore } = tableInternalData;\n                const prefix = `${fixedType || 'main'}-footer-`;\n                elemStore[`${prefix}wrapper`] = refElem;\n                elemStore[`${prefix}table`] = refFooterTable;\n                elemStore[`${prefix}colgroup`] = refFooterColgroup;\n                elemStore[`${prefix}list`] = refFooterTFoot;\n                elemStore[`${prefix}xSpace`] = refFooterXSpace;\n            });\n        });\n        onUnmounted(() => {\n            const { fixedType } = props;\n            const { elemStore } = tableInternalData;\n            const prefix = `${fixedType || 'main'}-footer-`;\n            elemStore[`${prefix}wrapper`] = null;\n            elemStore[`${prefix}table`] = null;\n            elemStore[`${prefix}colgroup`] = null;\n            elemStore[`${prefix}list`] = null;\n            elemStore[`${prefix}xSpace`] = null;\n        });\n        const renderVN = () => {\n            let { fixedType, fixedColumn, tableColumn, footerTableData } = props;\n            const { footerRowClassName, footerCellClassName, footerRowStyle, footerCellStyle, footerAlign: allFooterAlign, footerSpanMethod, align: allAlign, columnKey, showFooterOverflow: allColumnFooterOverflow } = tableProps;\n            const { visibleColumn } = tableInternalData;\n            const { scrollXLoad, overflowX, scrollbarWidth, currentColumn, mergeFooterList } = tableReactData;\n            const tooltipOpts = computeTooltipOpts.value;\n            const columnOpts = computeColumnOpts.value;\n            // 如果是使用优化模式\n            if (fixedType) {\n                // 如果存在展开行使用全量渲染\n                if (!tableReactData.expandColumn && (scrollXLoad || allColumnFooterOverflow)) {\n                    if (!mergeFooterList.length || !footerSpanMethod) {\n                        tableColumn = fixedColumn;\n                    }\n                    else {\n                        tableColumn = visibleColumn;\n                    }\n                }\n                else {\n                    tableColumn = visibleColumn;\n                }\n            }\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-table--footer-wrapper', fixedType ? `fixed-${fixedType}--wrapper` : 'body--wrapper'],\n                xid: xID,\n                onScroll: scrollEvent\n            }, [\n                fixedType\n                    ? createCommentVNode()\n                    : h('div', {\n                        ref: refFooterXSpace,\n                        class: 'vxe-body--x-space'\n                    }),\n                h('table', {\n                    ref: refFooterTable,\n                    class: 'vxe-table--footer',\n                    xid: xID,\n                    cellspacing: 0,\n                    cellpadding: 0,\n                    border: 0\n                }, [\n                    /**\n                     * 列宽\n                     */\n                    h('colgroup', {\n                        ref: refFooterColgroup\n                    }, tableColumn.map((column, $columnIndex) => {\n                        return h('col', {\n                            name: column.id,\n                            key: $columnIndex\n                        });\n                    }).concat(scrollbarWidth\n                        ? [\n                            h('col', {\n                                name: 'col_gutter'\n                            })\n                        ]\n                        : [])),\n                    /**\n                     * 底部\n                     */\n                    h('tfoot', {\n                        ref: refFooterTFoot\n                    }, footerTableData.map((list, _rowIndex) => {\n                        const $rowIndex = _rowIndex;\n                        const rowParams = { $table: $xeTable, row: list, _rowIndex, $rowIndex, fixed: fixedType, type: renderType };\n                        return h('tr', {\n                            class: ['vxe-footer--row', footerRowClassName ? XEUtils.isFunction(footerRowClassName) ? footerRowClassName(rowParams) : footerRowClassName : ''],\n                            style: footerRowStyle ? (XEUtils.isFunction(footerRowStyle) ? footerRowStyle(rowParams) : footerRowStyle) : null\n                        }, tableColumn.map((column, $columnIndex) => {\n                            const { type, showFooterOverflow, footerAlign, align, footerClassName } = column;\n                            const showAllTip = tooltipOpts.showAll;\n                            const isColGroup = column.children && column.children.length;\n                            const fixedHiddenColumn = fixedType ? column.fixed !== fixedType && !isColGroup : column.fixed && overflowX;\n                            const footOverflow = XEUtils.eqNull(showFooterOverflow) ? allColumnFooterOverflow : showFooterOverflow;\n                            const footAlign = footerAlign || align || allFooterAlign || allAlign;\n                            let showEllipsis = footOverflow === 'ellipsis';\n                            const showTitle = footOverflow === 'title';\n                            const showTooltip = footOverflow === true || footOverflow === 'tooltip';\n                            let hasEllipsis = showTitle || showTooltip || showEllipsis;\n                            const attrs = { colid: column.id };\n                            const tfOns = {};\n                            const columnIndex = $xeTable.getColumnIndex(column);\n                            const _columnIndex = $xeTable.getVTColumnIndex(column);\n                            const itemIndex = _columnIndex;\n                            const cellParams = {\n                                $table: $xeTable,\n                                $grid: $xeTable.xegrid,\n                                row: list,\n                                rowIndex: _rowIndex,\n                                _rowIndex,\n                                $rowIndex,\n                                column,\n                                columnIndex,\n                                $columnIndex,\n                                _columnIndex,\n                                itemIndex,\n                                items: list,\n                                fixed: fixedType,\n                                type: renderType,\n                                data: footerTableData\n                            };\n                            // 纵向虚拟滚动不支持动态行高\n                            if (scrollXLoad && !hasEllipsis) {\n                                showEllipsis = hasEllipsis = true;\n                            }\n                            if (showTitle || showTooltip || showAllTip) {\n                                tfOns.onMouseenter = (evnt) => {\n                                    if (showTitle) {\n                                        updateCellTitle(evnt.currentTarget, column);\n                                    }\n                                    else if (showTooltip || showAllTip) {\n                                        $xeTable.triggerFooterTooltipEvent(evnt, cellParams);\n                                    }\n                                };\n                            }\n                            if (showTooltip || showAllTip) {\n                                tfOns.onMouseleave = (evnt) => {\n                                    if (showTooltip || showAllTip) {\n                                        $xeTable.handleTargetLeaveEvent(evnt);\n                                    }\n                                };\n                            }\n                            tfOns.onClick = (evnt) => {\n                                $xeTable.dispatchEvent('footer-cell-click', Object.assign({ cell: evnt.currentTarget }, cellParams), evnt);\n                            };\n                            tfOns.onDblclick = (evnt) => {\n                                $xeTable.dispatchEvent('footer-cell-dblclick', Object.assign({ cell: evnt.currentTarget }, cellParams), evnt);\n                            };\n                            // 合并行或列\n                            if (mergeFooterList.length) {\n                                const spanRest = mergeFooterMethod(mergeFooterList, _rowIndex, _columnIndex);\n                                if (spanRest) {\n                                    const { rowspan, colspan } = spanRest;\n                                    if (!rowspan || !colspan) {\n                                        return null;\n                                    }\n                                    if (rowspan > 1) {\n                                        attrs.rowspan = rowspan;\n                                    }\n                                    if (colspan > 1) {\n                                        attrs.colspan = colspan;\n                                    }\n                                }\n                            }\n                            else if (footerSpanMethod) {\n                                // 自定义合并方法\n                                const { rowspan = 1, colspan = 1 } = footerSpanMethod(cellParams) || {};\n                                if (!rowspan || !colspan) {\n                                    return null;\n                                }\n                                if (rowspan > 1) {\n                                    attrs.rowspan = rowspan;\n                                }\n                                if (colspan > 1) {\n                                    attrs.colspan = colspan;\n                                }\n                            }\n                            return h('td', Object.assign(Object.assign(Object.assign(Object.assign({ class: ['vxe-footer--column', column.id, {\n                                        [`col--${footAlign}`]: footAlign,\n                                        [`col--${type}`]: type,\n                                        'col--last': $columnIndex === tableColumn.length - 1,\n                                        'fixed--hidden': fixedHiddenColumn,\n                                        'col--ellipsis': hasEllipsis,\n                                        'col--current': currentColumn === column\n                                    }, getPropClass(footerClassName, cellParams), getPropClass(footerCellClassName, cellParams)] }, attrs), { style: footerCellStyle ? (XEUtils.isFunction(footerCellStyle) ? footerCellStyle(cellParams) : footerCellStyle) : null }), tfOns), { key: columnKey || columnOpts.useKey ? column.id : $columnIndex }), [\n                                h('div', {\n                                    class: ['vxe-cell', {\n                                            'c--title': showTitle,\n                                            'c--tooltip': showTooltip,\n                                            'c--ellipsis': showEllipsis\n                                        }]\n                                }, column.renderFooter(cellParams))\n                            ]);\n                        }).concat(scrollbarWidth\n                            ? [\n                                h('td', {\n                                    class: 'vxe-footer--gutter col--gutter'\n                                })\n                            ]\n                            : []));\n                    }))\n                ])\n            ]);\n        };\n        return renderVN;\n    }\n});\n", "import { VxeUI } from '../../ui';\nconst { getConfig } = VxeUI;\nexport default {\n    /** 基本属性 */\n    id: [String, Function],\n    // 数据\n    data: Array,\n    // 表格的高度\n    height: [Number, String],\n    // 表格的最小高度\n    minHeight: { type: [Number, String], default: () => getConfig().table.minHeight },\n    // 表格的最大高度\n    maxHeight: [Number, String],\n    // 已废弃，被 column-config.resizable 替换\n    resizable: { type: Boolean, default: () => getConfig().table.resizable },\n    // 是否带有斑马纹\n    stripe: { type: Boolean, default: () => getConfig().table.stripe },\n    // 是否带有边框\n    border: { type: [Boolean, String], default: () => getConfig().table.border },\n    // 是否圆角边框\n    round: { type: Boolean, default: () => getConfig().table.round },\n    // 表格的尺寸\n    size: { type: String, default: () => getConfig().table.size || getConfig().size },\n    // 列的宽度是否自撑开（可能会被废弃的参数，不要使用）\n    fit: { type: Boolean, default: () => getConfig().table.fit },\n    // 表格是否加载中\n    loading: Boolean,\n    // 所有的列对其方式\n    align: { type: String, default: () => getConfig().table.align },\n    // 所有的表头列的对齐方式\n    headerAlign: { type: String, default: () => getConfig().table.headerAlign },\n    // 所有的表尾列的对齐方式\n    footerAlign: { type: String, default: () => getConfig().table.footerAlign },\n    // 是否显示表头\n    showHeader: { type: Boolean, default: () => getConfig().table.showHeader },\n    // （即将废弃）是否要高亮当前选中行\n    highlightCurrentRow: { type: Boolean, default: () => getConfig().table.highlightCurrentRow },\n    // （即将废弃）鼠标移到行是否要高亮显示\n    highlightHoverRow: { type: Boolean, default: () => getConfig().table.highlightHoverRow },\n    // （即将废弃）是否要高亮当前选中列\n    highlightCurrentColumn: { type: Boolean, default: () => getConfig().table.highlightCurrentColumn },\n    // （即将废弃）鼠标移到列是否要高亮显示\n    highlightHoverColumn: { type: Boolean, default: () => getConfig().table.highlightHoverColumn },\n    // （即将废弃）激活单元格编辑时是否高亮显示\n    highlightCell: Boolean,\n    // 是否显示表尾合计\n    showFooter: Boolean,\n    // 表尾数据\n    footerData: Array,\n    // 表尾合计的计算方法\n    footerMethod: Function,\n    // 给行附加 className\n    rowClassName: [String, Function],\n    // 给单元格附加 className\n    cellClassName: [String, Function],\n    // 给表头的行附加 className\n    headerRowClassName: [String, Function],\n    // 给表头的单元格附加 className\n    headerCellClassName: [String, Function],\n    // 给表尾的行附加 className\n    footerRowClassName: [String, Function],\n    // 给表尾的单元格附加 className\n    footerCellClassName: [String, Function],\n    // 给单元格附加样式\n    cellStyle: [Object, Function],\n    // 给表头单元格附加样式\n    headerCellStyle: [Object, Function],\n    // 给表尾单元格附加样式\n    footerCellStyle: [Object, Function],\n    // 给行附加样式\n    rowStyle: [Object, Function],\n    // 给表头行附加样式\n    headerRowStyle: [Object, Function],\n    // 给表尾行附加样式\n    footerRowStyle: [Object, Function],\n    // 合并指定单元格\n    mergeCells: Array,\n    // 合并指定的表尾\n    mergeFooterItems: Array,\n    // 自定义合并行或列的方法\n    spanMethod: Function,\n    // 表尾合并行或列\n    footerSpanMethod: Function,\n    // 设置所有内容过长时显示为省略号\n    showOverflow: { type: [Boolean, String], default: () => getConfig().table.showOverflow },\n    // 设置表头所有内容过长时显示为省略号\n    showHeaderOverflow: { type: [Boolean, String], default: () => getConfig().table.showHeaderOverflow },\n    // 设置表尾所有内容过长时显示为省略号\n    showFooterOverflow: { type: [Boolean, String], default: () => getConfig().table.showFooterOverflow },\n    /** 高级属性 */\n    // （即将废弃）columnKey 已废弃，被 column-config.useKey 替换\n    columnKey: Boolean,\n    // （即将废弃）rowKey 已废弃，被 row-config.useKey 替换\n    rowKey: Boolean,\n    // （即将废弃）rowId 已废弃，被 row-config.keyField 替换\n    rowId: { type: String, default: () => getConfig().table.rowId },\n    zIndex: Number,\n    emptyText: { type: String, default: () => getConfig().table.emptyText },\n    keepSource: { type: Boolean, default: () => getConfig().table.keepSource },\n    // 是否自动监听父容器变化去更新响应式表格宽高\n    autoResize: { type: Boolean, default: () => getConfig().table.autoResize },\n    // 是否自动根据状态属性去更新响应式表格宽高\n    syncResize: [Boolean, String, Number],\n    // 响应式布局配置项\n    resizeConfig: Object,\n    // 列配置信息\n    columnConfig: Object,\n    // 行配置信息\n    rowConfig: Object,\n    // 列调整配置项\n    resizableConfig: Object,\n    // 序号配置项\n    seqConfig: Object,\n    // 排序配置项\n    sortConfig: Object,\n    // 筛选配置项\n    filterConfig: Object,\n    // 单选框配置\n    radioConfig: Object,\n    // 复选框配置项\n    checkboxConfig: Object,\n    // tooltip 配置项\n    tooltipConfig: Object,\n    // 导出配置项\n    exportConfig: Object,\n    // 导入配置项\n    importConfig: Object,\n    // 打印配置项\n    printConfig: Object,\n    // 展开行配置项\n    expandConfig: Object,\n    // 树形结构配置项\n    treeConfig: Object,\n    // 快捷菜单配置项\n    menuConfig: Object,\n    // 鼠标配置项\n    mouseConfig: Object,\n    // 区域配置项\n    areaConfig: Object,\n    // 按键配置项\n    keyboardConfig: Object,\n    // 复制粘/贴配置项\n    clipConfig: Object,\n    // 查找/替换配置项\n    fnrConfig: Object,\n    // 编辑配置项\n    editConfig: Object,\n    // 校验配置项\n    validConfig: Object,\n    // 校验规则配置项\n    editRules: Object,\n    // 加载中配置项\n    loadingConfig: Object,\n    // 空内容渲染配置项\n    emptyRender: Object,\n    // 自定义列配置项\n    customConfig: Object,\n    // 横向虚拟滚动配置项\n    scrollX: Object,\n    // 纵向虚拟滚动配置项\n    scrollY: Object,\n    // （即将废弃）优化相关\n    animat: { type: Boolean, default: () => getConfig().table.animat },\n    // （可能会被废弃的参数，不要使用）\n    delayHover: { type: Number, default: () => getConfig().table.delayHover },\n    // 额外的参数\n    params: Object\n};\n", "export default [\n    'update:data',\n    'keydown-start',\n    'keydown',\n    'keydown-end',\n    'paste',\n    'copy',\n    'cut',\n    'current-change',\n    'radio-change',\n    'checkbox-change',\n    'checkbox-all',\n    'checkbox-range-start',\n    'checkbox-range-change',\n    'checkbox-range-end',\n    'checkbox-range-select',\n    'cell-click',\n    'cell-dblclick',\n    'cell-menu',\n    'cell-mouseenter',\n    'cell-mouseleave',\n    'cell-selected',\n    'cell-delete-value',\n    'cell-backspace-value',\n    'header-cell-click',\n    'header-cell-dblclick',\n    'header-cell-menu',\n    'footer-cell-click',\n    'footer-cell-dblclick',\n    'footer-cell-menu',\n    'clear-merge',\n    'sort-change',\n    'clear-sort',\n    'filter-change',\n    'filter-visible',\n    'clear-filter',\n    'resizable-change',\n    'toggle-row-expand',\n    'toggle-tree-expand',\n    'menu-click',\n    'edit-closed',\n    'edit-actived',\n    'edit-activated',\n    'edit-disabled',\n    'valid-error',\n    'scroll',\n    'custom',\n    'change-fnr',\n    'open-fnr',\n    'show-fnr',\n    'hide-fnr',\n    'fnr-change',\n    'fnr-find',\n    'fnr-find-all',\n    'fnr-replace',\n    'fnr-replace-all',\n    'cell-area-copy',\n    'cell-area-cut',\n    'cell-area-paste',\n    'cell-area-merge',\n    'clear-cell-area-selection',\n    'clear-cell-area-merge',\n    'header-cell-area-selection',\n    'cell-area-selection-invalid',\n    'cell-area-selection-start',\n    'cell-area-selection-drag',\n    'cell-area-selection-end',\n    'cell-area-extension-start',\n    'cell-area-extension-drag',\n    'cell-area-extension-end',\n    'cell-area-selection-all-start',\n    'cell-area-selection-all-end',\n    'cell-area-arrows-start',\n    'cell-area-arrows-end',\n    'active-cell-change-start',\n    'active-cell-change-end'\n];\n", "import { defineComponent, h, inject, ref, nextTick, TransitionGroup, createCommentVNode } from 'vue';\nimport { VxeUI } from '../../../ui';\nimport { formatText } from '../../../ui/src/utils';\nimport { addClass, removeClass } from '../../../ui/src/dom';\nimport { errLog } from '../../../ui/src/log';\nimport XEUtils from 'xe-utils';\nconst { getI18n, getIcon } = VxeUI;\nexport default defineComponent({\n    name: 'TableCustomPanel',\n    props: {\n        customStore: {\n            type: Object,\n            default: () => ({})\n        }\n    },\n    setup(props) {\n        const VxeUIModalComponent = VxeUI.getComponent('VxeModal');\n        const VxeUIDrawerComponent = VxeUI.getComponent('VxeDrawer');\n        const VxeUIButtonComponent = VxeUI.getComponent('VxeButton');\n        const VxeUIInputComponent = VxeUI.getComponent('VxeInput');\n        const VxeUITooltipComponent = VxeUI.getComponent('VxeTooltip');\n        const VxeUIRadioGroupComponent = VxeUI.getComponent('VxeRadioGroup');\n        const $xeTable = inject('$xeTable', {});\n        const { reactData } = $xeTable;\n        const { computeCustomOpts, computeColumnOpts, computeIsMaxFixedColumn } = $xeTable.getComputeMaps();\n        const refElem = ref();\n        const bodyElemRef = ref();\n        const dragHintElemRef = ref();\n        const dragColumn = ref();\n        let prevDropTrEl;\n        const handleWrapperMouseenterEvent = (evnt) => {\n            const { customStore } = props;\n            customStore.activeWrapper = true;\n            $xeTable.customOpenEvent(evnt);\n        };\n        const handleWrapperMouseleaveEvent = (evnt) => {\n            const { customStore } = props;\n            customStore.activeWrapper = false;\n            setTimeout(() => {\n                if (!customStore.activeBtn && !customStore.activeWrapper) {\n                    $xeTable.customCloseEvent(evnt);\n                }\n            }, 300);\n        };\n        const confirmCustomEvent = ({ $event }) => {\n            const { customColumnList } = reactData;\n            const customOpts = computeCustomOpts.value;\n            const { allowVisible, allowSort, allowFixed, allowResizable } = customOpts;\n            XEUtils.eachTree(customColumnList, (column, index, items, path, parent) => {\n                if (!parent) {\n                    if (allowSort) {\n                        const sortIndex = index + 1;\n                        column.renderSortNumber = sortIndex;\n                    }\n                    if (allowFixed) {\n                        column.fixed = column.renderFixed;\n                    }\n                }\n                if (allowResizable) {\n                    if (column.renderVisible && (!column.children || column.children.length)) {\n                        if (column.renderResizeWidth !== column.renderWidth) {\n                            column.resizeWidth = column.renderResizeWidth;\n                            column.renderWidth = column.renderResizeWidth;\n                        }\n                    }\n                }\n                if (allowVisible) {\n                    column.visible = column.renderVisible;\n                }\n            });\n            $xeTable.closeCustom();\n            $xeTable.emitCustomEvent('confirm', $event);\n            $xeTable.saveCustomStore('confirm');\n        };\n        const cancelCustomEvent = ({ $event }) => {\n            const { customStore } = props;\n            const { customColumnList } = reactData;\n            const { oldSortMaps, oldFixedMaps, oldVisibleMaps } = customStore;\n            const customOpts = computeCustomOpts.value;\n            const { allowVisible, allowSort, allowFixed, allowResizable } = customOpts;\n            XEUtils.eachTree(customColumnList, column => {\n                const colid = column.getKey();\n                const visible = !!oldVisibleMaps[colid];\n                const fixed = oldFixedMaps[colid] || '';\n                if (allowVisible) {\n                    column.renderVisible = visible;\n                    column.visible = visible;\n                }\n                if (allowFixed) {\n                    column.renderFixed = fixed;\n                    column.fixed = fixed;\n                }\n                if (allowSort) {\n                    column.renderSortNumber = oldSortMaps[colid] || 0;\n                }\n                if (allowResizable) {\n                    column.renderResizeWidth = column.renderWidth;\n                }\n            }, { children: 'children' });\n            $xeTable.closeCustom();\n            $xeTable.emitCustomEvent('cancel', $event);\n        };\n        const handleResetCustomEvent = (evnt) => {\n            $xeTable.resetColumn(true);\n            $xeTable.closeCustom();\n            $xeTable.emitCustomEvent('reset', evnt);\n        };\n        const resetCustomEvent = ({ $event }) => {\n            if (VxeUI.modal) {\n                VxeUI.modal.confirm({\n                    content: getI18n('vxe.custom.cstmConfirmRestore'),\n                    className: 'vxe-table--ignore-clear',\n                    escClosable: true\n                }).then(type => {\n                    if (type === 'confirm') {\n                        handleResetCustomEvent($event);\n                    }\n                });\n            }\n            else {\n                handleResetCustomEvent($event);\n            }\n        };\n        const handleOptionCheck = (column) => {\n            const { customColumnList } = reactData;\n            const matchObj = XEUtils.findTree(customColumnList, item => item === column);\n            if (matchObj && matchObj.parent) {\n                const { parent } = matchObj;\n                if (parent.children && parent.children.length) {\n                    parent.renderVisible = parent.children.every((column) => column.renderVisible);\n                    parent.halfVisible = !parent.renderVisible && parent.children.some((column) => column.renderVisible || column.halfVisible);\n                    handleOptionCheck(parent);\n                }\n            }\n        };\n        const changeCheckboxOption = (column) => {\n            const isChecked = !column.renderVisible;\n            const customOpts = computeCustomOpts.value;\n            XEUtils.eachTree([column], (item) => {\n                item.renderVisible = isChecked;\n                item.halfVisible = false;\n            });\n            handleOptionCheck(column);\n            if (customOpts.immediate) {\n                $xeTable.handleCustom();\n                $xeTable.saveCustomStore('update:visible');\n            }\n            $xeTable.checkCustomStatus();\n        };\n        const changeFixedOption = (column, colFixed) => {\n            const isMaxFixedColumn = computeIsMaxFixedColumn.value;\n            if (column.renderFixed === colFixed) {\n                column.renderFixed = '';\n                // $xeTable.clearColumnFixed(column)\n            }\n            else {\n                if (!isMaxFixedColumn || column.renderFixed) {\n                    column.renderFixed = colFixed;\n                    // $xeTable.setColumnFixed(column, colFixed)\n                }\n            }\n        };\n        // const changePopupFixedOption = () => {\n        //   const isMaxFixedColumn = computeIsMaxFixedColumn.value\n        //   if (!isMaxFixedColumn) {\n        //     // $xeTable.setColumnFixed(column, column.fixed)\n        //   }\n        // }\n        const allOptionEvent = () => {\n            const { customStore } = props;\n            const { customColumnList } = reactData;\n            const customOpts = computeCustomOpts.value;\n            const { checkMethod } = customOpts;\n            const isAll = !customStore.isAll;\n            XEUtils.eachTree(customColumnList, (column) => {\n                if (!checkMethod || checkMethod({ column })) {\n                    column.renderVisible = isAll;\n                    column.halfVisible = false;\n                }\n            });\n            customStore.isAll = isAll;\n            $xeTable.checkCustomStatus();\n        };\n        const sortMousedownEvent = (evnt) => {\n            const btnEl = evnt.currentTarget;\n            const tdEl = btnEl.parentNode;\n            const trEl = tdEl.parentNode;\n            const colid = trEl.getAttribute('colid');\n            const column = $xeTable.getColumnById(colid);\n            trEl.draggable = true;\n            dragColumn.value = column;\n            addClass(trEl, 'active--drag-origin');\n        };\n        const sortMouseupEvent = (evnt) => {\n            const btnEl = evnt.currentTarget;\n            const tdEl = btnEl.parentNode;\n            const trEl = tdEl.parentNode;\n            const dragHintEl = dragHintElemRef.value;\n            trEl.draggable = false;\n            dragColumn.value = null;\n            removeClass(trEl, 'active--drag-origin');\n            if (dragHintEl) {\n                dragHintEl.style.display = '';\n            }\n        };\n        const sortDragstartEvent = (evnt) => {\n            const img = new Image();\n            if (evnt.dataTransfer) {\n                evnt.dataTransfer.setDragImage(img, 0, 0);\n            }\n        };\n        const sortDragendEvent = (evnt) => {\n            const { customColumnList } = reactData;\n            const trEl = evnt.currentTarget;\n            const dragHintEl = dragHintElemRef.value;\n            if (prevDropTrEl) {\n                // 判断是否有拖动\n                if (prevDropTrEl !== trEl) {\n                    const dragOffset = prevDropTrEl.getAttribute('drag-pos');\n                    const colid = trEl.getAttribute('colid');\n                    const column = $xeTable.getColumnById(colid);\n                    if (!column) {\n                        return;\n                    }\n                    const cIndex = XEUtils.findIndexOf(customColumnList, item => item.id === column.id);\n                    const targetColid = prevDropTrEl.getAttribute('colid');\n                    const targetColumn = $xeTable.getColumnById(targetColid);\n                    if (!targetColumn) {\n                        return;\n                    }\n                    // 移出源位置\n                    customColumnList.splice(cIndex, 1);\n                    const tcIndex = XEUtils.findIndexOf(customColumnList, item => item.id === targetColumn.id);\n                    // 插新位置\n                    customColumnList.splice(tcIndex + (dragOffset === 'bottom' ? 1 : 0), 0, column);\n                }\n                prevDropTrEl.draggable = false;\n                prevDropTrEl.removeAttribute('drag-pos');\n                removeClass(prevDropTrEl, 'active--drag-target');\n            }\n            dragColumn.value = null;\n            trEl.draggable = false;\n            trEl.removeAttribute('drag-pos');\n            if (dragHintEl) {\n                dragHintEl.style.display = '';\n            }\n            removeClass(trEl, 'active--drag-target');\n            removeClass(trEl, 'active--drag-origin');\n        };\n        const sortDragoverEvent = (evnt) => {\n            const trEl = evnt.currentTarget;\n            if (prevDropTrEl !== trEl) {\n                removeClass(prevDropTrEl, 'active--drag-target');\n            }\n            const colid = trEl.getAttribute('colid');\n            const column = $xeTable.getColumnById(colid);\n            // 是否移入有效元行\n            if (column && column.level === 1) {\n                evnt.preventDefault();\n                const offsetY = evnt.clientY - trEl.getBoundingClientRect().y;\n                const dragOffset = offsetY < trEl.clientHeight / 2 ? 'top' : 'bottom';\n                addClass(trEl, 'active--drag-target');\n                trEl.setAttribute('drag-pos', dragOffset);\n                prevDropTrEl = trEl;\n            }\n            updateDropHint(evnt);\n        };\n        const updateDropHint = (evnt) => {\n            const dragHintEl = dragHintElemRef.value;\n            const bodyEl = bodyElemRef.value;\n            if (!bodyEl) {\n                return;\n            }\n            if (dragHintEl) {\n                const wrapperEl = bodyEl.parentNode;\n                const wrapperRect = wrapperEl.getBoundingClientRect();\n                dragHintEl.style.display = 'block';\n                dragHintEl.style.top = `${Math.min(wrapperEl.clientHeight - wrapperEl.scrollTop - dragHintEl.clientHeight, evnt.clientY - wrapperRect.y)}px`;\n                dragHintEl.style.left = `${Math.min(wrapperEl.clientWidth - wrapperEl.scrollLeft - dragHintEl.clientWidth - 16, evnt.clientX - wrapperRect.x)}px`;\n            }\n        };\n        const renderSimplePanel = () => {\n            const { customStore } = props;\n            const { customColumnList } = reactData;\n            const customOpts = computeCustomOpts.value;\n            const { maxHeight } = customStore;\n            const { checkMethod, visibleMethod, allowVisible, allowSort, allowFixed, trigger, placement } = customOpts;\n            const isMaxFixedColumn = computeIsMaxFixedColumn.value;\n            const colVNs = [];\n            const customWrapperOns = {};\n            // hover 触发\n            if (trigger === 'hover') {\n                customWrapperOns.onMouseenter = handleWrapperMouseenterEvent;\n                customWrapperOns.onMouseleave = handleWrapperMouseleaveEvent;\n            }\n            XEUtils.eachTree(customColumnList, (column, index, items, path, parent) => {\n                const isVisible = visibleMethod ? visibleMethod({ column }) : true;\n                if (isVisible) {\n                    const isChecked = column.renderVisible;\n                    const isIndeterminate = column.halfVisible;\n                    const isColGroup = column.children && column.children.length;\n                    const colTitle = formatText(column.getTitle(), 1);\n                    const isDisabled = checkMethod ? !checkMethod({ column }) : false;\n                    colVNs.push(h('li', {\n                        key: column.id,\n                        colid: column.id,\n                        class: ['vxe-table-custom--option', `level--${column.level}`, {\n                                'is--group': isColGroup\n                            }],\n                        onDragstart: sortDragstartEvent,\n                        onDragend: sortDragendEvent,\n                        onDragover: sortDragoverEvent\n                    }, [\n                        allowVisible\n                            ? h('div', {\n                                class: ['vxe-table-custom--checkbox-option', {\n                                        'is--checked': isChecked,\n                                        'is--indeterminate': isIndeterminate,\n                                        'is--disabled': isDisabled\n                                    }],\n                                title: getI18n('vxe.custom.setting.colVisible'),\n                                onClick: () => {\n                                    if (!isDisabled) {\n                                        changeCheckboxOption(column);\n                                    }\n                                }\n                            }, [\n                                h('span', {\n                                    class: ['vxe-checkbox--icon', isIndeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isChecked ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]\n                                })\n                            ])\n                            : createCommentVNode(),\n                        allowSort && column.level === 1\n                            ? h('div', {\n                                class: 'vxe-table-custom--sort-option'\n                            }, [\n                                h('span', {\n                                    class: 'vxe-table-custom--sort-btn',\n                                    title: getI18n('vxe.custom.setting.sortHelpTip'),\n                                    onMousedown: sortMousedownEvent,\n                                    onMouseup: sortMouseupEvent\n                                }, [\n                                    h('i', {\n                                        class: getIcon().TABLE_CUSTOM_SORT\n                                    })\n                                ])\n                            ])\n                            : createCommentVNode(),\n                        h('div', {\n                            class: 'vxe-table-custom--checkbox-label',\n                            title: colTitle\n                        }, colTitle),\n                        !parent && allowFixed\n                            ? h('div', {\n                                class: 'vxe-table-custom--fixed-option'\n                            }, [\n                                h('span', {\n                                    class: ['vxe-table-custom--fixed-left-option', column.renderFixed === 'left' ? getIcon().TOOLBAR_TOOLS_FIXED_LEFT_ACTIVE : getIcon().TOOLBAR_TOOLS_FIXED_LEFT, {\n                                            'is--checked': column.renderFixed === 'left',\n                                            'is--disabled': isMaxFixedColumn && !column.renderFixed\n                                        }],\n                                    title: getI18n(column.renderFixed === 'left' ? 'vxe.toolbar.cancelFixed' : 'vxe.toolbar.fixedLeft'),\n                                    onClick: () => {\n                                        changeFixedOption(column, 'left');\n                                    }\n                                }),\n                                h('span', {\n                                    class: ['vxe-table-custom--fixed-right-option', column.renderFixed === 'right' ? getIcon().TOOLBAR_TOOLS_FIXED_RIGHT_ACTIVE : getIcon().TOOLBAR_TOOLS_FIXED_RIGHT, {\n                                            'is--checked': column.renderFixed === 'right',\n                                            'is--disabled': isMaxFixedColumn && !column.renderFixed\n                                        }],\n                                    title: getI18n(column.renderFixed === 'right' ? 'vxe.toolbar.cancelFixed' : 'vxe.toolbar.fixedRight'),\n                                    onClick: () => {\n                                        changeFixedOption(column, 'right');\n                                    }\n                                })\n                            ])\n                            : createCommentVNode()\n                    ]));\n                }\n            });\n            const isAllChecked = customStore.isAll;\n            const isAllIndeterminate = customStore.isIndeterminate;\n            return h('div', {\n                ref: refElem,\n                key: 'simple',\n                class: ['vxe-table-custom-wrapper', `placement--${placement}`, {\n                        'is--active': customStore.visible\n                    }],\n                style: maxHeight && !['left', 'right'].includes(placement)\n                    ? {\n                        maxHeight: `${maxHeight}px`\n                    }\n                    : {}\n            }, customStore.visible\n                ? [\n                    h('ul', {\n                        class: 'vxe-table-custom--header'\n                    }, [\n                        h('li', {\n                            class: 'vxe-table-custom--option'\n                        }, [\n                            allowVisible\n                                ? h('div', {\n                                    class: ['vxe-table-custom--checkbox-option', {\n                                            'is--checked': isAllChecked,\n                                            'is--indeterminate': isAllIndeterminate\n                                        }],\n                                    title: getI18n('vxe.table.allTitle'),\n                                    onClick: allOptionEvent\n                                }, [\n                                    h('span', {\n                                        class: ['vxe-checkbox--icon', isAllIndeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]\n                                    }),\n                                    h('span', {\n                                        class: 'vxe-checkbox--label'\n                                    }, getI18n('vxe.toolbar.customAll'))\n                                ])\n                                : h('span', {\n                                    class: 'vxe-checkbox--label'\n                                }, getI18n('vxe.table.customTitle'))\n                        ])\n                    ]),\n                    h('div', {\n                        ref: bodyElemRef,\n                        class: 'vxe-table-custom--list-wrapper'\n                    }, [\n                        h(TransitionGroup, Object.assign({ class: 'vxe-table-custom--body', name: 'vxe-table-custom--list', tag: 'ul' }, customWrapperOns), {\n                            default: () => colVNs\n                        }),\n                        h('div', {\n                            ref: dragHintElemRef,\n                            class: 'vxe-table-custom-popup--drag-hint'\n                        }, getI18n('vxe.custom.cstmDragTarget', [dragColumn.value ? dragColumn.value.getTitle() : '']))\n                    ]),\n                    customOpts.showFooter\n                        ? h('div', {\n                            class: 'vxe-table-custom--footer'\n                        }, [\n                            h('button', {\n                                class: 'btn--reset',\n                                onClick: resetCustomEvent\n                            }, customOpts.resetButtonText || getI18n('vxe.table.customRestore')),\n                            customOpts.immediate\n                                ? createCommentVNode()\n                                : h('button', {\n                                    class: 'btn--cancel',\n                                    onClick: cancelCustomEvent\n                                }, customOpts.resetButtonText || getI18n('vxe.table.customCancel')),\n                            h('button', {\n                                class: 'btn--confirm',\n                                onClick: confirmCustomEvent\n                            }, customOpts.confirmButtonText || getI18n('vxe.table.customConfirm'))\n                        ])\n                        : null\n                ]\n                : []);\n        };\n        const renderPopupPanel = () => {\n            const { customStore } = props;\n            const { customColumnList } = reactData;\n            const customOpts = computeCustomOpts.value;\n            const { modalOptions, drawerOptions, allowVisible, allowSort, allowFixed, allowResizable, checkMethod, visibleMethod } = customOpts;\n            const columnOpts = computeColumnOpts.value;\n            const { maxFixedSize } = columnOpts;\n            const { mode } = customOpts;\n            const modalOpts = Object.assign({}, modalOptions);\n            const drawerOpts = Object.assign({}, drawerOptions);\n            const isMaxFixedColumn = computeIsMaxFixedColumn.value;\n            const trVNs = [];\n            XEUtils.eachTree(customColumnList, (column, index, items, path, parent) => {\n                const isVisible = visibleMethod ? visibleMethod({ column }) : true;\n                if (isVisible) {\n                    const isChecked = column.renderVisible;\n                    const isIndeterminate = column.halfVisible;\n                    const colTitle = formatText(column.getTitle(), 1);\n                    const isColGroup = column.children && column.children.length;\n                    const isDisabled = checkMethod ? !checkMethod({ column }) : false;\n                    trVNs.push(h('tr', {\n                        key: column.id,\n                        colid: column.id,\n                        class: [`vxe-table-custom-popup--row level--${column.level}`, {\n                                'is--group': isColGroup\n                            }],\n                        onDragstart: sortDragstartEvent,\n                        onDragend: sortDragendEvent,\n                        onDragover: sortDragoverEvent\n                    }, [\n                        allowVisible\n                            ? h('td', {\n                                class: 'vxe-table-custom-popup--column-item col--visible'\n                            }, [\n                                h('div', {\n                                    class: ['vxe-table-custom--checkbox-option', {\n                                            'is--checked': isChecked,\n                                            'is--indeterminate': isIndeterminate,\n                                            'is--disabled': isDisabled\n                                        }],\n                                    title: getI18n('vxe.custom.setting.colVisible'),\n                                    onClick: () => {\n                                        if (!isDisabled) {\n                                            changeCheckboxOption(column);\n                                        }\n                                    }\n                                }, [\n                                    h('span', {\n                                        class: ['vxe-checkbox--icon', isIndeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isChecked ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]\n                                    })\n                                ])\n                            ])\n                            : createCommentVNode(),\n                        allowSort\n                            ? h('td', {\n                                class: 'vxe-table-custom-popup--column-item col--sort'\n                            }, [\n                                column.level === 1\n                                    ? h('span', {\n                                        class: 'vxe-table-custom-popup--column-sort-btn',\n                                        title: getI18n('vxe.custom.setting.sortHelpTip'),\n                                        onMousedown: sortMousedownEvent,\n                                        onMouseup: sortMouseupEvent\n                                    }, [\n                                        h('i', {\n                                            class: getIcon().TABLE_CUSTOM_SORT\n                                        })\n                                    ])\n                                    : h('span', '-')\n                            ])\n                            : createCommentVNode(),\n                        h('td', {\n                            class: 'vxe-table-custom-popup--column-item col--name'\n                        }, [\n                            h('div', {\n                                class: 'vxe-table-custom-popup--name',\n                                title: colTitle\n                            }, colTitle)\n                        ]),\n                        allowResizable\n                            ? h('td', {\n                                class: 'vxe-table-custom-popup--column-item col--resizable'\n                            }, [\n                                !isChecked || (column.children && column.children.length)\n                                    ? h('span', '-')\n                                    : (VxeUIInputComponent\n                                        ? h(VxeUIInputComponent, {\n                                            type: 'integer',\n                                            modelValue: column.renderResizeWidth,\n                                            'onUpdate:modelValue'(value) {\n                                                column.renderResizeWidth = Math.max(0, Number(value));\n                                            }\n                                        })\n                                        : createCommentVNode())\n                            ])\n                            : createCommentVNode(),\n                        allowFixed\n                            ? h('td', {\n                                class: 'vxe-table-custom-popup--column-item col--fixed'\n                            }, [\n                                parent\n                                    ? h('span', '-')\n                                    : (VxeUIRadioGroupComponent\n                                        ? h(VxeUIRadioGroupComponent, {\n                                            modelValue: column.renderFixed || '',\n                                            type: 'button',\n                                            size: 'mini',\n                                            options: [\n                                                { label: getI18n('vxe.custom.setting.fixedLeft'), value: 'left', disabled: isMaxFixedColumn },\n                                                { label: getI18n('vxe.custom.setting.fixedUnset'), value: '' },\n                                                { label: getI18n('vxe.custom.setting.fixedRight'), value: 'right', disabled: isMaxFixedColumn }\n                                            ],\n                                            'onUpdate:modelValue'(value) {\n                                                column.renderFixed = value;\n                                            }\n                                            // onChange () {\n                                            //   changePopupFixedOption(column)\n                                            // }\n                                        })\n                                        : createCommentVNode())\n                            ])\n                            : createCommentVNode()\n                    ]));\n                }\n            });\n            const isAllChecked = customStore.isAll;\n            const isAllIndeterminate = customStore.isIndeterminate;\n            const scopedSlots = {\n                default: () => {\n                    return h('div', {\n                        ref: bodyElemRef,\n                        class: 'vxe-table-custom-popup--body'\n                    }, [\n                        h('div', {\n                            class: 'vxe-table-custom-popup--table-wrapper'\n                        }, [\n                            h('table', {}, [\n                                h('colgroup', {}, [\n                                    allowVisible\n                                        ? h('col', {\n                                            style: {\n                                                width: '80px'\n                                            }\n                                        })\n                                        : createCommentVNode(),\n                                    allowSort\n                                        ? h('col', {\n                                            style: {\n                                                width: '80px'\n                                            }\n                                        })\n                                        : createCommentVNode(),\n                                    h('col', {\n                                        style: {\n                                            minWidth: '120px'\n                                        }\n                                    }),\n                                    allowResizable\n                                        ? h('col', {\n                                            style: {\n                                                width: '140px'\n                                            }\n                                        })\n                                        : createCommentVNode(),\n                                    allowFixed\n                                        ? h('col', {\n                                            style: {\n                                                width: '200px'\n                                            }\n                                        })\n                                        : createCommentVNode()\n                                ]),\n                                h('thead', {}, [\n                                    h('tr', {}, [\n                                        allowVisible\n                                            ? h('th', {}, [\n                                                h('div', {\n                                                    class: ['vxe-table-custom--checkbox-option', {\n                                                            'is--checked': isAllChecked,\n                                                            'is--indeterminate': isAllIndeterminate\n                                                        }],\n                                                    title: getI18n('vxe.table.allTitle'),\n                                                    onClick: allOptionEvent\n                                                }, [\n                                                    h('span', {\n                                                        class: ['vxe-checkbox--icon', isAllIndeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]\n                                                    }),\n                                                    h('span', {\n                                                        class: 'vxe-checkbox--label'\n                                                    }, getI18n('vxe.toolbar.customAll'))\n                                                ])\n                                            ])\n                                            : createCommentVNode(),\n                                        allowSort\n                                            ? h('th', {}, [\n                                                h('span', {\n                                                    class: 'vxe-table-custom-popup--table-sort-help-title'\n                                                }, getI18n('vxe.custom.setting.colSort')),\n                                                VxeUITooltipComponent\n                                                    ? h(VxeUITooltipComponent, {\n                                                        enterable: true,\n                                                        content: getI18n('vxe.custom.setting.sortHelpTip'),\n                                                        popupClassName: 'vxe-table--ignore-clear'\n                                                    }, {\n                                                        default: () => {\n                                                            return h('i', {\n                                                                class: 'vxe-table-custom-popup--table-sort-help-icon vxe-icon-question-circle-fill'\n                                                            });\n                                                        }\n                                                    })\n                                                    : createCommentVNode()\n                                            ])\n                                            : createCommentVNode(),\n                                        h('th', {}, getI18n('vxe.custom.setting.colTitle')),\n                                        allowResizable\n                                            ? h('th', {}, getI18n('vxe.custom.setting.colResizable'))\n                                            : createCommentVNode(),\n                                        allowFixed\n                                            ? h('th', {}, getI18n(`vxe.custom.setting.${maxFixedSize ? 'colFixedMax' : 'colFixed'}`, [maxFixedSize]))\n                                            : createCommentVNode()\n                                    ])\n                                ]),\n                                h(TransitionGroup, {\n                                    class: 'vxe-table-custom--body',\n                                    tag: 'tbody',\n                                    name: 'vxe-table-custom--list'\n                                }, {\n                                    default: () => trVNs\n                                })\n                            ])\n                        ]),\n                        h('div', {\n                            ref: dragHintElemRef,\n                            class: 'vxe-table-custom-popup--drag-hint'\n                        }, getI18n('vxe.custom.cstmDragTarget', [dragColumn.value ? dragColumn.value.getTitle() : '']))\n                    ]);\n                },\n                footer: () => {\n                    return h('div', {\n                        class: 'vxe-table-custom-popup--footer'\n                    }, [\n                        VxeUIButtonComponent\n                            ? h(VxeUIButtonComponent, {\n                                content: customOpts.resetButtonText || getI18n('vxe.custom.cstmRestore'),\n                                onClick: resetCustomEvent\n                            })\n                            : createCommentVNode(),\n                        VxeUIButtonComponent\n                            ? h(VxeUIButtonComponent, {\n                                content: customOpts.resetButtonText || getI18n('vxe.custom.cstmCancel'),\n                                onClick: cancelCustomEvent\n                            })\n                            : createCommentVNode(),\n                        VxeUIButtonComponent\n                            ? h(VxeUIButtonComponent, {\n                                status: 'primary',\n                                content: customOpts.confirmButtonText || getI18n('vxe.custom.cstmConfirm'),\n                                onClick: confirmCustomEvent\n                            })\n                            : createCommentVNode()\n                    ]);\n                }\n            };\n            if (mode === 'drawer') {\n                return VxeUIDrawerComponent\n                    ? h(VxeUIDrawerComponent, {\n                        key: 'drawer',\n                        className: ['vxe-table-custom-drawer-wrapper', 'vxe-table--ignore-clear', drawerOpts.className || ''].join(' '),\n                        modelValue: customStore.visible,\n                        title: drawerOpts.title || getI18n('vxe.custom.cstmTitle'),\n                        width: drawerOpts.width || Math.min(880, document.documentElement.clientWidth),\n                        position: drawerOpts.position,\n                        escClosable: !!drawerOpts.escClosable,\n                        destroyOnClose: true,\n                        showFooter: true,\n                        'onUpdate:modelValue'(value) {\n                            customStore.visible = value;\n                        }\n                    }, scopedSlots)\n                    : createCommentVNode();\n            }\n            return VxeUIModalComponent\n                ? h(VxeUIModalComponent, {\n                    key: 'modal',\n                    className: ['vxe-table-custom-modal-wrapper', 'vxe-table--ignore-clear', modalOpts.className || ''].join(' '),\n                    modelValue: customStore.visible,\n                    title: modalOpts.title || getI18n('vxe.custom.cstmTitle'),\n                    width: modalOpts.width || Math.min(880, document.documentElement.clientWidth),\n                    minWidth: modalOpts.minWidth || 700,\n                    height: modalOpts.height || Math.min(680, document.documentElement.clientHeight),\n                    minHeight: modalOpts.minHeight || 400,\n                    showZoom: modalOpts.showZoom,\n                    showMaximize: modalOpts.showMaximize,\n                    showMinimize: modalOpts.showMinimize,\n                    mask: modalOpts.mask,\n                    lockView: modalOpts.lockView,\n                    resize: modalOpts.resize,\n                    escClosable: !!modalOpts.escClosable,\n                    destroyOnClose: true,\n                    showFooter: true,\n                    'onUpdate:modelValue'(value) {\n                        customStore.visible = value;\n                    }\n                }, scopedSlots)\n                : createCommentVNode();\n        };\n        const renderVN = () => {\n            const customOpts = computeCustomOpts.value;\n            if (['modal', 'drawer', 'popup'].includes(`${customOpts.mode}`)) {\n                return renderPopupPanel();\n            }\n            return renderSimplePanel();\n        };\n        if (process.env.NODE_ENV === 'development') {\n            nextTick(() => {\n                if (!VxeUIModalComponent) {\n                    errLog('vxe.error.reqComp', ['vxe-modal']);\n                }\n                if (!VxeUIButtonComponent) {\n                    errLog('vxe.error.reqComp', ['vxe-button']);\n                }\n                if (!VxeUIInputComponent) {\n                    errLog('vxe.error.reqComp', ['vxe-input']);\n                }\n                if (!VxeUITooltipComponent) {\n                    errLog('vxe.error.reqComp', ['vxe-tooltip']);\n                }\n                if (!VxeUIRadioGroupComponent) {\n                    errLog('vxe.error.reqComp', ['vxe-radio-group']);\n                }\n            });\n        }\n        return renderVN;\n    }\n});\n", "import { defineComponent, h, computed, inject } from 'vue';\nimport { VxeUI } from '../../../ui';\nimport { formatText, isEnableConf } from '../../../ui/src/utils';\nimport { getPropClass } from '../../../ui/src/dom';\nimport { getSlotVNs } from '../../../ui/src/vn';\nconst { getI18n, getIcon, renderer } = VxeUI;\nexport default defineComponent({\n    name: 'VxeTableFilterPanel',\n    props: {\n        filterStore: Object\n    },\n    setup(props) {\n        const $xeTable = inject('$xeTable', {});\n        const { reactData: tableReactData, internalData: tableInternalData, getComputeMaps } = $xeTable;\n        const { computeFilterOpts } = getComputeMaps();\n        const computeHasCheckOption = computed(() => {\n            const { filterStore } = props;\n            return filterStore && filterStore.options.some((option) => option.checked);\n        });\n        // 全部筛选事件\n        const filterCheckAllEvent = (evnt, value) => {\n            const { filterStore } = props;\n            filterStore.options.forEach((option) => {\n                option._checked = value;\n                option.checked = value;\n            });\n            filterStore.isAllSelected = value;\n            filterStore.isIndeterminate = false;\n        };\n        /*************************\n         * Publish methods\n         *************************/\n        // 确认筛选\n        const confirmFilter = (evnt) => {\n            $xeTable.handleFilterConfirmFilter(evnt);\n        };\n        // （单选）筛选发生改变\n        const changeRadioOption = (evnt, checked, item) => {\n            $xeTable.handleFilterChangeRadioOption(evnt, checked, item);\n        };\n        /**\n         * 重置筛选\n         * 当筛选面板中的重置按钮被按下时触发\n         * @param {Event} evnt 事件\n         */\n        const resetFilter = (evnt) => {\n            $xeTable.handleFilterResetFilter(evnt);\n        };\n        // （多选）筛选发生改变\n        const changeMultipleOption = (evnt, checked, item) => {\n            $xeTable.handleFilterChangeMultipleOption(evnt, checked, item);\n        };\n        // 筛选发生改变\n        const changeOption = (evnt, checked, item) => {\n            $xeTable.handleFilterChangeOption(evnt, checked, item);\n        };\n        const changeAllOption = (evnt, checked) => {\n            const { filterStore } = props;\n            if (filterStore.multiple) {\n                filterCheckAllEvent(evnt, checked);\n            }\n            else {\n                resetFilter(evnt);\n            }\n        };\n        /*************************\n         * Publish methods\n         *************************/\n        const $panel = {\n            changeRadioOption,\n            changeMultipleOption,\n            changeAllOption,\n            changeOption,\n            confirmFilter,\n            resetFilter\n        };\n        const renderOptions = (filterRender, compConf) => {\n            const { filterStore } = props;\n            const { column, multiple, maxHeight } = filterStore;\n            const slots = column ? column.slots : null;\n            const filterSlot = slots ? slots.filter : null;\n            const params = Object.assign({}, tableInternalData._currFilterParams, { $panel, $table: $xeTable });\n            const rtFilter = compConf ? (compConf.renderTableFilter || compConf.renderFilter) : null;\n            if (filterSlot) {\n                return [\n                    h('div', {\n                        class: 'vxe-table--filter-template'\n                    }, $xeTable.callSlot(filterSlot, params))\n                ];\n            }\n            else if (rtFilter) {\n                return [\n                    h('div', {\n                        class: 'vxe-table--filter-template'\n                    }, getSlotVNs(rtFilter(filterRender, params)))\n                ];\n            }\n            const isAllChecked = multiple ? filterStore.isAllSelected : !filterStore.options.some((item) => item._checked);\n            const isAllIndeterminate = multiple && filterStore.isIndeterminate;\n            return [\n                h('ul', {\n                    class: 'vxe-table--filter-header'\n                }, [\n                    h('li', {\n                        class: ['vxe-table--filter-option', {\n                                'is--checked': isAllChecked,\n                                'is--indeterminate': isAllIndeterminate\n                            }],\n                        title: getI18n(multiple ? 'vxe.table.allTitle' : 'vxe.table.allFilter'),\n                        onClick: (evnt) => {\n                            changeAllOption(evnt, !filterStore.isAllSelected);\n                        }\n                    }, (multiple\n                        ? [\n                            h('span', {\n                                class: ['vxe-checkbox--icon', isAllIndeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]\n                            })\n                        ]\n                        : []).concat([\n                        h('span', {\n                            class: 'vxe-checkbox--label'\n                        }, getI18n('vxe.table.allFilter'))\n                    ]))\n                ]),\n                h('ul', {\n                    class: 'vxe-table--filter-body',\n                    style: maxHeight\n                        ? {\n                            maxHeight: `${maxHeight}px`\n                        }\n                        : {}\n                }, filterStore.options.map((item) => {\n                    const isChecked = item._checked;\n                    const isIndeterminate = false;\n                    return h('li', {\n                        class: ['vxe-table--filter-option', {\n                                'is--checked': item._checked\n                            }],\n                        title: item.label,\n                        onClick: (evnt) => {\n                            changeOption(evnt, !item._checked, item);\n                        }\n                    }, (multiple\n                        ? [\n                            h('span', {\n                                class: ['vxe-checkbox--icon', isIndeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isChecked ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]\n                            })\n                        ]\n                        : []).concat([\n                        h('span', {\n                            class: 'vxe-checkbox--label'\n                        }, formatText(item.label, 1))\n                    ]));\n                }))\n            ];\n        };\n        const renderFooters = () => {\n            const { filterStore } = props;\n            const { column, multiple } = filterStore;\n            const filterOpts = computeFilterOpts.value;\n            const hasCheckOption = computeHasCheckOption.value;\n            const { filterRender } = column;\n            const compConf = isEnableConf(filterRender) ? renderer.get(filterRender.name) : null;\n            const isDisabled = !hasCheckOption && !filterStore.isAllSelected && !filterStore.isIndeterminate;\n            return multiple && (compConf ? !(compConf.showTableFilterFooter === false || compConf.showFilterFooter === false || compConf.isFooter === false) : true)\n                ? [\n                    h('div', {\n                        class: 'vxe-table--filter-footer'\n                    }, [\n                        h('button', {\n                            class: {\n                                'is--disabled': isDisabled\n                            },\n                            disabled: isDisabled,\n                            onClick: confirmFilter\n                        }, filterOpts.confirmButtonText || getI18n('vxe.table.confirmFilter')),\n                        h('button', {\n                            onClick: resetFilter\n                        }, filterOpts.resetButtonText || getI18n('vxe.table.resetFilter'))\n                    ])\n                ]\n                : [];\n        };\n        const renderVN = () => {\n            const { filterStore } = props;\n            const { initStore } = tableReactData;\n            const { column } = filterStore;\n            const filterRender = column ? column.filterRender : null;\n            const compConf = isEnableConf(filterRender) ? renderer.get(filterRender.name) : null;\n            const filterClassName = compConf ? (compConf.tableFilterClassName || compConf.filterClassName) : '';\n            const params = Object.assign({}, tableInternalData._currFilterParams, { $panel, $table: $xeTable });\n            return h('div', {\n                class: [\n                    'vxe-table--filter-wrapper',\n                    'filter--prevent-default',\n                    getPropClass(filterClassName, params),\n                    {\n                        'is--animat': $xeTable.props.animat,\n                        'is--multiple': filterStore.multiple,\n                        'is--active': filterStore.visible\n                    }\n                ],\n                style: filterStore.style\n            }, initStore.filter && column ? renderOptions(filterRender, compConf).concat(renderFooters()) : []);\n        };\n        return renderVN;\n    }\n});\n", "import { defineComponent, h, ref, computed, inject, reactive, nextTick, createCommentVNode } from 'vue';\nimport { VxeUI } from '../../../ui';\nimport XEUtils from 'xe-utils';\nimport { parseFile } from '../../../ui/src/utils';\nimport { errLog } from '../../../ui/src/log';\nconst { getI18n, getIcon } = VxeUI;\nexport default defineComponent({\n    name: 'VxeTableImportPanel',\n    props: {\n        defaultOptions: Object,\n        storeData: Object\n    },\n    setup(props) {\n        const VxeUIModalComponent = VxeUI.getComponent('VxeModal');\n        const VxeUIButtonComponent = VxeUI.getComponent('VxeButton');\n        const VxeUISelectComponent = VxeUI.getComponent('VxeSelect');\n        const $xeTable = inject('$xeTable', {});\n        const { computeImportOpts } = $xeTable.getComputeMaps();\n        const reactData = reactive({\n            loading: false\n        });\n        const refFileBtn = ref();\n        const computeSelectName = computed(() => {\n            const { storeData } = props;\n            return `${storeData.filename}.${storeData.type}`;\n        });\n        const computeHasFile = computed(() => {\n            const { storeData } = props;\n            return storeData.file && storeData.type;\n        });\n        const computeParseTypeLabel = computed(() => {\n            const { storeData } = props;\n            const { type, typeList } = storeData;\n            if (type) {\n                const selectItem = XEUtils.find(typeList, item => type === item.value);\n                return selectItem ? selectItem.label : '*.*';\n            }\n            return `*.${typeList.map((item) => item.value).join(', *.')}`;\n        });\n        const clearFileEvent = () => {\n            const { storeData } = props;\n            Object.assign(storeData, {\n                filename: '',\n                sheetName: '',\n                type: ''\n            });\n        };\n        const selectFileEvent = () => {\n            const { storeData, defaultOptions } = props;\n            $xeTable.readFile(defaultOptions).then((params) => {\n                const { file } = params;\n                Object.assign(storeData, parseFile(file), { file });\n            }).catch((e) => e);\n        };\n        const showEvent = () => {\n            nextTick(() => {\n                const targetElem = refFileBtn.value;\n                if (targetElem) {\n                    targetElem.focus();\n                }\n            });\n        };\n        const cancelEvent = () => {\n            const { storeData } = props;\n            storeData.visible = false;\n        };\n        const importEvent = () => {\n            const { storeData, defaultOptions } = props;\n            const importOpts = computeImportOpts.value;\n            reactData.loading = true;\n            $xeTable.importByFile(storeData.file, Object.assign({}, importOpts, defaultOptions)).then(() => {\n                reactData.loading = false;\n                storeData.visible = false;\n            }).catch(() => {\n                reactData.loading = false;\n            });\n        };\n        const renderVN = () => {\n            const { defaultOptions, storeData } = props;\n            const selectName = computeSelectName.value;\n            const hasFile = computeHasFile.value;\n            const parseTypeLabel = computeParseTypeLabel.value;\n            return VxeUIModalComponent\n                ? h(VxeUIModalComponent, {\n                    modelValue: storeData.visible,\n                    title: getI18n('vxe.import.impTitle'),\n                    className: 'vxe-table-import-popup-wrapper',\n                    width: 520,\n                    mask: true,\n                    lockView: true,\n                    showFooter: false,\n                    escClosable: true,\n                    maskClosable: true,\n                    loading: reactData.loading,\n                    'onUpdate:modelValue'(value) {\n                        storeData.visible = value;\n                    },\n                    onShow: showEvent\n                }, {\n                    default: () => {\n                        return h('div', {\n                            class: 'vxe-export--panel'\n                        }, [\n                            h('table', {\n                                cellspacing: 0,\n                                cellpadding: 0,\n                                border: 0\n                            }, [\n                                h('tbody', [\n                                    h('tr', [\n                                        h('td', getI18n('vxe.import.impFile')),\n                                        h('td', [\n                                            hasFile\n                                                ? h('div', {\n                                                    class: 'vxe-import-selected--file',\n                                                    title: selectName\n                                                }, [\n                                                    h('span', selectName),\n                                                    h('i', {\n                                                        class: getIcon().INPUT_CLEAR,\n                                                        onClick: clearFileEvent\n                                                    })\n                                                ])\n                                                : h('button', {\n                                                    ref: refFileBtn,\n                                                    class: 'vxe-import-select--file',\n                                                    onClick: selectFileEvent\n                                                }, getI18n('vxe.import.impSelect'))\n                                        ])\n                                    ]),\n                                    h('tr', [\n                                        h('td', getI18n('vxe.import.impType')),\n                                        h('td', parseTypeLabel)\n                                    ]),\n                                    h('tr', [\n                                        h('td', getI18n('vxe.import.impMode')),\n                                        h('td', [\n                                            VxeUISelectComponent\n                                                ? h(VxeUISelectComponent, {\n                                                    modelValue: defaultOptions.mode,\n                                                    options: storeData.modeList,\n                                                    'onUpdate:modelValue'(value) {\n                                                        defaultOptions.mode = value;\n                                                    }\n                                                })\n                                                : createCommentVNode()\n                                        ])\n                                    ])\n                                ])\n                            ]),\n                            h('div', {\n                                class: 'vxe-export--panel-btns'\n                            }, [\n                                VxeUIButtonComponent\n                                    ? h(VxeUIButtonComponent, {\n                                        content: getI18n('vxe.import.impCancel'),\n                                        onClick: cancelEvent\n                                    })\n                                    : createCommentVNode(),\n                                VxeUIButtonComponent\n                                    ? h(VxeUIButtonComponent, {\n                                        status: 'primary',\n                                        disabled: !hasFile,\n                                        content: getI18n('vxe.import.impConfirm'),\n                                        onClick: importEvent\n                                    })\n                                    : createCommentVNode()\n                            ])\n                        ]);\n                    }\n                })\n                : createCommentVNode();\n        };\n        if (process.env.NODE_ENV === 'development') {\n            nextTick(() => {\n                if (!VxeUIModalComponent) {\n                    errLog('vxe.error.reqComp', ['vxe-modal']);\n                }\n                if (!VxeUIButtonComponent) {\n                    errLog('vxe.error.reqComp', ['vxe-button']);\n                }\n                if (!VxeUISelectComponent) {\n                    errLog('vxe.error.reqComp', ['vxe-select']);\n                }\n            });\n        }\n        return renderVN;\n    }\n});\n", "import { defineComponent, h, createCommentVNode, ref, computed, reactive, inject, nextTick } from 'vue';\nimport { VxeUI } from '../../../ui';\nimport XEUtils from 'xe-utils';\nimport { formatText } from '../../../ui/src/utils';\nimport { errLog } from '../../../ui/src/log';\nconst { getI18n, getIcon } = VxeUI;\nexport default defineComponent({\n    name: 'VxeTableExportPanel',\n    props: {\n        defaultOptions: Object,\n        storeData: Object\n    },\n    setup(props) {\n        const VxeUIModalComponent = VxeUI.getComponent('VxeModal');\n        const VxeUIButtonComponent = VxeUI.getComponent('VxeButton');\n        const VxeUISelectComponent = VxeUI.getComponent('VxeSelect');\n        const VxeUIInputComponent = VxeUI.getComponent('VxeInput');\n        const VxeUICheckboxComponent = VxeUI.getComponent('VxeCheckbox');\n        const $xeTable = inject('$xeTable', {});\n        const { computeExportOpts, computePrintOpts } = $xeTable.getComputeMaps();\n        const reactData = reactive({\n            isAll: false,\n            isIndeterminate: false,\n            loading: false\n        });\n        const xButtonConfirm = ref();\n        const xInputFilename = ref();\n        const xInputSheetname = ref();\n        const computeCheckedAll = computed(() => {\n            const { storeData } = props;\n            return storeData.columns.every((column) => column.checked);\n        });\n        const computeShowSheet = computed(() => {\n            const { defaultOptions } = props;\n            return ['html', 'xml', 'xlsx', 'pdf'].indexOf(defaultOptions.type) > -1;\n        });\n        const computeSupportMerge = computed(() => {\n            const { storeData, defaultOptions } = props;\n            return !defaultOptions.original && defaultOptions.mode === 'current' && (storeData.isPrint || ['html', 'xlsx'].indexOf(defaultOptions.type) > -1);\n        });\n        const computeSupportStyle = computed(() => {\n            const { defaultOptions } = props;\n            return !defaultOptions.original && ['xlsx'].indexOf(defaultOptions.type) > -1;\n        });\n        const handleOptionCheck = (column) => {\n            const { storeData } = props;\n            const matchObj = XEUtils.findTree(storeData.columns, item => item === column);\n            if (matchObj && matchObj.parent) {\n                const { parent } = matchObj;\n                if (parent.children && parent.children.length) {\n                    parent.checked = parent.children.every((column) => column.checked);\n                    parent.halfChecked = !parent.checked && parent.children.some((column) => column.checked || column.halfChecked);\n                    handleOptionCheck(parent);\n                }\n            }\n        };\n        const checkStatus = () => {\n            const { storeData } = props;\n            const columns = storeData.columns;\n            reactData.isAll = columns.every((column) => column.disabled || column.checked);\n            reactData.isIndeterminate = !reactData.isAll && columns.some((column) => !column.disabled && (column.checked || column.halfChecked));\n        };\n        const changeOption = (column) => {\n            const isChecked = !column.checked;\n            XEUtils.eachTree([column], (item) => {\n                item.checked = isChecked;\n                item.halfChecked = false;\n            });\n            handleOptionCheck(column);\n            checkStatus();\n        };\n        const allColumnEvent = () => {\n            const { storeData } = props;\n            const isAll = !reactData.isAll;\n            XEUtils.eachTree(storeData.columns, (column) => {\n                if (!column.disabled) {\n                    column.checked = isAll;\n                    column.halfChecked = false;\n                }\n            });\n            reactData.isAll = isAll;\n            checkStatus();\n        };\n        const showEvent = () => {\n            nextTick(() => {\n                const filenameInp = xInputFilename.value;\n                const sheetnameInp = xInputSheetname.value;\n                const confirmBtn = xButtonConfirm.value;\n                const targetElem = filenameInp || sheetnameInp || confirmBtn;\n                if (targetElem) {\n                    targetElem.focus();\n                }\n            });\n            checkStatus();\n        };\n        const getExportOption = () => {\n            const { storeData, defaultOptions } = props;\n            const { hasMerge, columns } = storeData;\n            const checkedAll = computeCheckedAll.value;\n            const supportMerge = computeSupportMerge.value;\n            const expColumns = XEUtils.searchTree(columns, (column) => column.checked, { children: 'children', mapChildren: 'childNodes', original: true });\n            return Object.assign({}, defaultOptions, {\n                columns: expColumns,\n                isMerge: hasMerge && supportMerge && checkedAll ? defaultOptions.isMerge : false\n            });\n        };\n        const printEvent = () => {\n            const { storeData } = props;\n            const printOpts = computePrintOpts.value;\n            storeData.visible = false;\n            $xeTable.print(Object.assign({}, printOpts, getExportOption()));\n        };\n        const exportEvent = () => {\n            const { storeData } = props;\n            const exportOpts = computeExportOpts.value;\n            reactData.loading = true;\n            $xeTable.exportData(Object.assign({}, exportOpts, getExportOption())).then(() => {\n                reactData.loading = false;\n                storeData.visible = false;\n            }).catch(() => {\n                reactData.loading = false;\n            });\n        };\n        const cancelEvent = () => {\n            const { storeData } = props;\n            storeData.visible = false;\n        };\n        const confirmEvent = () => {\n            const { storeData } = props;\n            if (storeData.isPrint) {\n                printEvent();\n            }\n            else {\n                exportEvent();\n            }\n        };\n        const renderVN = () => {\n            const { defaultOptions, storeData } = props;\n            const { isAll: isAllChecked, isIndeterminate: isAllIndeterminate } = reactData;\n            const { hasTree, hasMerge, isPrint, hasColgroup } = storeData;\n            const { isHeader } = defaultOptions;\n            const cols = [];\n            const checkedAll = computeCheckedAll.value;\n            const showSheet = computeShowSheet.value;\n            const supportMerge = computeSupportMerge.value;\n            const supportStyle = computeSupportStyle.value;\n            XEUtils.eachTree(storeData.columns, (column) => {\n                const colTitle = formatText(column.getTitle(), 1);\n                const isColGroup = column.children && column.children.length;\n                const isChecked = column.checked;\n                const indeterminate = column.halfChecked;\n                cols.push(h('li', {\n                    class: ['vxe-export--panel-column-option', `level--${column.level}`, {\n                            'is--group': isColGroup,\n                            'is--checked': isChecked,\n                            'is--indeterminate': indeterminate,\n                            'is--disabled': column.disabled\n                        }],\n                    title: colTitle,\n                    onClick: () => {\n                        if (!column.disabled) {\n                            changeOption(column);\n                        }\n                    }\n                }, [\n                    h('span', {\n                        class: ['vxe-checkbox--icon', indeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isChecked ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]\n                    }),\n                    h('span', {\n                        class: 'vxe-checkbox--label'\n                    }, colTitle)\n                ]));\n            });\n            return VxeUIModalComponent\n                ? h(VxeUIModalComponent, {\n                    modelValue: storeData.visible,\n                    title: getI18n(isPrint ? 'vxe.export.printTitle' : 'vxe.export.expTitle'),\n                    className: 'vxe-table-export-popup-wrapper',\n                    width: 660,\n                    mask: true,\n                    lockView: true,\n                    showFooter: false,\n                    escClosable: true,\n                    maskClosable: true,\n                    loading: reactData.loading,\n                    'onUpdate:modelValue'(value) {\n                        storeData.visible = value;\n                    },\n                    onShow: showEvent\n                }, {\n                    default: () => {\n                        return h('div', {\n                            class: 'vxe-export--panel'\n                        }, [\n                            h('table', {\n                                cellspacing: 0,\n                                cellpadding: 0,\n                                border: 0\n                            }, [\n                                h('tbody', [\n                                    [\n                                        isPrint\n                                            ? createCommentVNode()\n                                            : h('tr', [\n                                                h('td', getI18n('vxe.export.expName')),\n                                                h('td', [\n                                                    VxeUIInputComponent\n                                                        ? h(VxeUIInputComponent, {\n                                                            ref: xInputFilename,\n                                                            modelValue: defaultOptions.filename,\n                                                            type: 'text',\n                                                            clearable: true,\n                                                            placeholder: getI18n('vxe.export.expNamePlaceholder'),\n                                                            'onUpdate:modelValue'(value) {\n                                                                defaultOptions.filename = value;\n                                                            }\n                                                        })\n                                                        : createCommentVNode()\n                                                ])\n                                            ]),\n                                        isPrint\n                                            ? createCommentVNode()\n                                            : h('tr', [\n                                                h('td', getI18n('vxe.export.expType')),\n                                                h('td', [\n                                                    VxeUISelectComponent\n                                                        ? h(VxeUISelectComponent, {\n                                                            modelValue: defaultOptions.type,\n                                                            options: storeData.typeList,\n                                                            'onUpdate:modelValue'(value) {\n                                                                defaultOptions.type = value;\n                                                            }\n                                                        })\n                                                        : createCommentVNode()\n                                                ])\n                                            ]),\n                                        isPrint || showSheet\n                                            ? h('tr', [\n                                                h('td', getI18n('vxe.export.expSheetName')),\n                                                h('td', [\n                                                    VxeUIInputComponent\n                                                        ? h(VxeUIInputComponent, {\n                                                            ref: xInputSheetname,\n                                                            modelValue: defaultOptions.sheetName,\n                                                            type: 'text',\n                                                            clearable: true,\n                                                            placeholder: getI18n('vxe.export.expSheetNamePlaceholder'),\n                                                            'onUpdate:modelValue'(value) {\n                                                                defaultOptions.sheetName = value;\n                                                            }\n                                                        })\n                                                        : createCommentVNode()\n                                                ])\n                                            ])\n                                            : createCommentVNode(),\n                                        h('tr', [\n                                            h('td', getI18n('vxe.export.expMode')),\n                                            h('td', [\n                                                VxeUISelectComponent\n                                                    ? h(VxeUISelectComponent, {\n                                                        modelValue: defaultOptions.mode,\n                                                        options: storeData.modeList.map((item) => {\n                                                            return {\n                                                                value: item.value,\n                                                                label: getI18n(item.label)\n                                                            };\n                                                        }),\n                                                        'onUpdate:modelValue'(value) {\n                                                            defaultOptions.mode = value;\n                                                        }\n                                                    })\n                                                    : createCommentVNode()\n                                            ])\n                                        ]),\n                                        h('tr', [\n                                            h('td', [getI18n('vxe.export.expColumn')]),\n                                            h('td', [\n                                                h('div', {\n                                                    class: 'vxe-export--panel-column'\n                                                }, [\n                                                    h('ul', {\n                                                        class: 'vxe-export--panel-column-header'\n                                                    }, [\n                                                        h('li', {\n                                                            class: ['vxe-export--panel-column-option', {\n                                                                    'is--checked': isAllChecked,\n                                                                    'is--indeterminate': isAllIndeterminate\n                                                                }],\n                                                            title: getI18n('vxe.table.allTitle'),\n                                                            onClick: allColumnEvent\n                                                        }, [\n                                                            h('span', {\n                                                                class: ['vxe-checkbox--icon', isAllIndeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]\n                                                            }),\n                                                            h('span', {\n                                                                class: 'vxe-checkbox--label'\n                                                            }, getI18n('vxe.export.expCurrentColumn'))\n                                                        ])\n                                                    ]),\n                                                    h('ul', {\n                                                        class: 'vxe-export--panel-column-body'\n                                                    }, cols)\n                                                ])\n                                            ])\n                                        ]),\n                                        h('tr', [\n                                            h('td', getI18n('vxe.export.expOpts')),\n                                            h('td', [\n                                                h('div', {\n                                                    class: 'vxe-export--panel-option-row'\n                                                }, [\n                                                    VxeUICheckboxComponent\n                                                        ? h(VxeUICheckboxComponent, {\n                                                            modelValue: defaultOptions.isHeader,\n                                                            title: getI18n('vxe.export.expHeaderTitle'),\n                                                            content: getI18n('vxe.export.expOptHeader'),\n                                                            'onUpdate:modelValue'(value) {\n                                                                defaultOptions.isHeader = value;\n                                                            }\n                                                        })\n                                                        : createCommentVNode(),\n                                                    VxeUICheckboxComponent\n                                                        ? h(VxeUICheckboxComponent, {\n                                                            modelValue: defaultOptions.isFooter,\n                                                            disabled: !storeData.hasFooter,\n                                                            title: getI18n('vxe.export.expFooterTitle'),\n                                                            content: getI18n('vxe.export.expOptFooter'),\n                                                            'onUpdate:modelValue'(value) {\n                                                                defaultOptions.isFooter = value;\n                                                            }\n                                                        })\n                                                        : createCommentVNode(),\n                                                    VxeUICheckboxComponent\n                                                        ? h(VxeUICheckboxComponent, {\n                                                            modelValue: defaultOptions.original,\n                                                            title: getI18n('vxe.export.expOriginalTitle'),\n                                                            content: getI18n('vxe.export.expOptOriginal'),\n                                                            'onUpdate:modelValue'(value) {\n                                                                defaultOptions.original = value;\n                                                            }\n                                                        })\n                                                        : createCommentVNode()\n                                                ]),\n                                                h('div', {\n                                                    class: 'vxe-export--panel-option-row'\n                                                }, [\n                                                    VxeUICheckboxComponent\n                                                        ? h(VxeUICheckboxComponent, {\n                                                            modelValue: isHeader && hasColgroup && supportMerge ? defaultOptions.isColgroup : false,\n                                                            title: getI18n('vxe.export.expColgroupTitle'),\n                                                            disabled: !isHeader || !hasColgroup || !supportMerge,\n                                                            content: getI18n('vxe.export.expOptColgroup'),\n                                                            'onUpdate:modelValue'(value) {\n                                                                defaultOptions.isColgroup = value;\n                                                            }\n                                                        })\n                                                        : createCommentVNode(),\n                                                    VxeUICheckboxComponent\n                                                        ? h(VxeUICheckboxComponent, {\n                                                            modelValue: hasMerge && supportMerge && checkedAll ? defaultOptions.isMerge : false,\n                                                            title: getI18n('vxe.export.expMergeTitle'),\n                                                            disabled: !hasMerge || !supportMerge || !checkedAll,\n                                                            content: getI18n('vxe.export.expOptMerge'),\n                                                            'onUpdate:modelValue'(value) {\n                                                                defaultOptions.isMerge = value;\n                                                            }\n                                                        })\n                                                        : createCommentVNode(),\n                                                    isPrint || !VxeUICheckboxComponent\n                                                        ? createCommentVNode()\n                                                        : h(VxeUICheckboxComponent, {\n                                                            modelValue: supportStyle ? defaultOptions.useStyle : false,\n                                                            disabled: !supportStyle,\n                                                            title: getI18n('vxe.export.expUseStyleTitle'),\n                                                            content: getI18n('vxe.export.expOptUseStyle'),\n                                                            'onUpdate:modelValue'(value) {\n                                                                defaultOptions.useStyle = value;\n                                                            }\n                                                        }),\n                                                    VxeUICheckboxComponent\n                                                        ? h(VxeUICheckboxComponent, {\n                                                            modelValue: hasTree ? defaultOptions.isAllExpand : false,\n                                                            disabled: !hasTree,\n                                                            title: getI18n('vxe.export.expAllExpandTitle'),\n                                                            content: getI18n('vxe.export.expOptAllExpand'),\n                                                            'onUpdate:modelValue'(value) {\n                                                                defaultOptions.isAllExpand = value;\n                                                            }\n                                                        })\n                                                        : createCommentVNode()\n                                                ])\n                                            ])\n                                        ])\n                                    ]\n                                ])\n                            ]),\n                            h('div', {\n                                class: 'vxe-export--panel-btns'\n                            }, [\n                                VxeUIButtonComponent\n                                    ? h(VxeUIButtonComponent, {\n                                        content: getI18n('vxe.export.expCancel'),\n                                        onClick: cancelEvent\n                                    })\n                                    : createCommentVNode(),\n                                VxeUIButtonComponent\n                                    ? h(VxeUIButtonComponent, {\n                                        ref: xButtonConfirm,\n                                        status: 'primary',\n                                        content: getI18n(isPrint ? 'vxe.export.expPrint' : 'vxe.export.expConfirm'),\n                                        onClick: confirmEvent\n                                    })\n                                    : createCommentVNode()\n                            ])\n                        ]);\n                    }\n                })\n                : createCommentVNode();\n        };\n        if (process.env.NODE_ENV === 'development') {\n            nextTick(() => {\n                if (!VxeUIModalComponent) {\n                    errLog('vxe.error.reqComp', ['vxe-modal']);\n                }\n                if (!VxeUIButtonComponent) {\n                    errLog('vxe.error.reqComp', ['vxe-button']);\n                }\n                if (!VxeUISelectComponent) {\n                    errLog('vxe.error.reqComp', ['vxe-select']);\n                }\n                if (!VxeUIInputComponent) {\n                    errLog('vxe.error.reqComp', ['vxe-input']);\n                }\n                if (!VxeUICheckboxComponent) {\n                    errLog('vxe.error.reqComp', ['vxe-checkbox']);\n                }\n            });\n        }\n        return renderVN;\n    }\n});\n", "import { defineComponent, h, Teleport, inject, ref, createCommentVNode } from 'vue';\nimport { getFuncText } from '../../../ui/src/utils';\nimport XEUtils from 'xe-utils';\nexport default defineComponent({\n    name: 'VxeTableMenuPanel',\n    setup(props, context) {\n        const xID = XEUtils.uniqueId();\n        const $xeTable = inject('$xeTable', {});\n        const { reactData: tableReactData } = $xeTable;\n        const refElem = ref();\n        const refMaps = {\n            refElem\n        };\n        const $xeMenuPanel = {\n            xID,\n            props,\n            context,\n            getRefMaps: () => refMaps\n        };\n        const renderVN = () => {\n            const { ctxMenuStore } = tableReactData;\n            const { computeMenuOpts } = $xeTable.getComputeMaps();\n            const menuOpts = computeMenuOpts.value;\n            return h(Teleport, {\n                to: 'body',\n                disabled: false\n            }, [\n                h('div', {\n                    ref: refElem,\n                    class: ['vxe-table--context-menu-wrapper', menuOpts.className, {\n                            'is--visible': ctxMenuStore.visible\n                        }],\n                    style: ctxMenuStore.style\n                }, ctxMenuStore.list.map((options, gIndex) => {\n                    return options.every(item => item.visible === false)\n                        ? createCommentVNode()\n                        : h('ul', {\n                            class: 'vxe-context-menu--option-wrapper',\n                            key: gIndex\n                        }, options.map((item, index) => {\n                            const hasChildMenus = item.children && item.children.some((child) => child.visible !== false);\n                            return item.visible === false\n                                ? null\n                                : h('li', {\n                                    class: [item.className, {\n                                            'link--disabled': item.disabled,\n                                            'link--active': item === ctxMenuStore.selected\n                                        }],\n                                    key: `${gIndex}_${index}`\n                                }, [\n                                    h('a', {\n                                        class: 'vxe-context-menu--link',\n                                        onClick(evnt) {\n                                            $xeTable.ctxMenuLinkEvent(evnt, item);\n                                        },\n                                        onMouseover(evnt) {\n                                            $xeTable.ctxMenuMouseoverEvent(evnt, item);\n                                        },\n                                        onMouseout(evnt) {\n                                            $xeTable.ctxMenuMouseoutEvent(evnt, item);\n                                        }\n                                    }, [\n                                        h('i', {\n                                            class: ['vxe-context-menu--link-prefix', item.prefixIcon]\n                                        }),\n                                        h('span', {\n                                            class: 'vxe-context-menu--link-content'\n                                        }, getFuncText(item.name)),\n                                        h('i', {\n                                            class: ['vxe-context-menu--link-suffix', hasChildMenus ? item.suffixIcon || 'suffix--haschild' : item.suffixIcon]\n                                        })\n                                    ]),\n                                    hasChildMenus\n                                        ? h('ul', {\n                                            class: ['vxe-table--context-menu-clild-wrapper', {\n                                                    'is--show': item === ctxMenuStore.selected && ctxMenuStore.showChild\n                                                }]\n                                        }, item.children.map((child, cIndex) => {\n                                            return child.visible === false\n                                                ? null\n                                                : h('li', {\n                                                    class: [child.className, {\n                                                            'link--disabled': child.disabled,\n                                                            'link--active': child === ctxMenuStore.selectChild\n                                                        }],\n                                                    key: `${gIndex}_${index}_${cIndex}`\n                                                }, [\n                                                    h('a', {\n                                                        class: 'vxe-context-menu--link',\n                                                        onClick(evnt) {\n                                                            $xeTable.ctxMenuLinkEvent(evnt, child);\n                                                        },\n                                                        onMouseover(evnt) {\n                                                            $xeTable.ctxMenuMouseoverEvent(evnt, item, child);\n                                                        },\n                                                        onMouseout(evnt) {\n                                                            $xeTable.ctxMenuMouseoutEvent(evnt, item);\n                                                        }\n                                                    }, [\n                                                        h('i', {\n                                                            class: ['vxe-context-menu--link-prefix', child.prefixIcon]\n                                                        }),\n                                                        h('span', {\n                                                            class: 'vxe-context-menu--link-content'\n                                                        }, getFuncText(child.name))\n                                                    ])\n                                                ]);\n                                        }))\n                                        : null\n                                ]);\n                        }));\n                }))\n            ]);\n        };\n        $xeMenuPanel.renderVN = renderVN;\n        return $xeMenuPanel;\n    },\n    render() {\n        return this.renderVN();\n    }\n});\n", "import { nextTick } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { VxeUI } from '../../../ui';\nimport { toFilters, handleFieldOrColumn } from '../../src/util';\nimport { getDomNode, triggerEvent } from '../../../ui/src/dom';\nimport { isEnableConf } from '../../../ui/src/utils';\nconst { renderer, hooks } = VxeUI;\nconst tableFilterMethodKeys = ['openFilter', 'setFilter', 'clearFilter', 'getCheckedFilters', 'updateFilterOptionStatus'];\nhooks.add('tableFilterModule', {\n    setupTable($xeTable) {\n        const { props, reactData, internalData } = $xeTable;\n        const { refTableHeader, refTableBody, refTableFilter } = $xeTable.getRefMaps();\n        const { computeFilterOpts, computeMouseOpts } = $xeTable.getComputeMaps();\n        // 确认筛选\n        const confirmFilter = (evnt) => {\n            const { filterStore } = reactData;\n            filterStore.options.forEach((option) => {\n                option.checked = option._checked;\n            });\n            $xeTable.confirmFilterEvent(evnt);\n        };\n        // （单选）筛选发生改变\n        const changeRadioOption = (evnt, checked, item) => {\n            const { filterStore } = reactData;\n            filterStore.options.forEach((option) => {\n                option._checked = false;\n            });\n            item._checked = checked;\n            $xeTable.checkFilterOptions();\n            confirmFilter(evnt);\n        };\n        // （多选）筛选发生改变\n        const changeMultipleOption = (evnt, checked, item) => {\n            item._checked = checked;\n            $xeTable.checkFilterOptions();\n        };\n        /**\n         * 重置筛选\n         * 当筛选面板中的重置按钮被按下时触发\n         * @param {Event} evnt 事件\n         */\n        const resetFilter = (evnt) => {\n            const { filterStore } = reactData;\n            $xeTable.handleClearFilter(filterStore.column);\n            $xeTable.confirmFilterEvent(evnt);\n        };\n        const filterPrivateMethods = {\n            checkFilterOptions() {\n                const { filterStore } = reactData;\n                filterStore.isAllSelected = filterStore.options.every((item) => item._checked);\n                filterStore.isIndeterminate = !filterStore.isAllSelected && filterStore.options.some((item) => item._checked);\n            },\n            /**\n             * 点击筛选事件\n             * 当筛选图标被点击时触发\n             * 更新选项是否全部状态\n             * 打开筛选面板\n             * @param {Event} evnt 事件\n             * @param {ColumnInfo} column 列配置\n             * @param {Object} params 参数\n             */\n            triggerFilterEvent(evnt, column, params) {\n                const { initStore, filterStore } = reactData;\n                if (filterStore.column === column && filterStore.visible) {\n                    filterStore.visible = false;\n                }\n                else {\n                    const { target: targetElem, pageX } = evnt;\n                    const { visibleWidth } = getDomNode();\n                    const { filters, filterMultiple, filterRender } = column;\n                    const compConf = isEnableConf(filterRender) ? renderer.get(filterRender.name) : null;\n                    const frMethod = column.filterRecoverMethod || (compConf ? (compConf.tableFilterRecoverMethod || compConf.filterRecoverMethod) : null);\n                    internalData._currFilterParams = params;\n                    Object.assign(filterStore, {\n                        multiple: filterMultiple,\n                        options: filters,\n                        column,\n                        style: null\n                    });\n                    // 复原状态\n                    filterStore.options.forEach((option) => {\n                        const { _checked, checked } = option;\n                        option._checked = checked;\n                        if (!checked && _checked !== checked) {\n                            if (frMethod) {\n                                frMethod({ option, column, $table: $xeTable });\n                            }\n                        }\n                    });\n                    this.checkFilterOptions();\n                    filterStore.visible = true;\n                    initStore.filter = true;\n                    nextTick(() => {\n                        const tableHeader = refTableHeader.value;\n                        const tableBody = refTableBody.value;\n                        const headerElem = tableHeader ? tableHeader.$el : null;\n                        const bodyElem = tableBody.$el;\n                        if (!bodyElem) {\n                            return;\n                        }\n                        const tableFilter = refTableFilter.value;\n                        const filterWrapperElem = tableFilter ? tableFilter.$el : null;\n                        if (!filterWrapperElem) {\n                            return;\n                        }\n                        const filterWidth = filterWrapperElem.offsetWidth;\n                        const filterHeight = filterWrapperElem.offsetHeight;\n                        const filterHeadElem = filterWrapperElem.querySelector('.vxe-table--filter-header');\n                        const filterFootElem = filterWrapperElem.querySelector('.vxe-table--filter-footer');\n                        const centerWidth = filterWidth / 2;\n                        const minMargin = 10;\n                        const maxLeft = bodyElem.clientWidth - filterWidth - minMargin;\n                        let left, right;\n                        const style = {\n                            top: `${targetElem.offsetTop + targetElem.offsetParent.offsetTop + targetElem.offsetHeight}px`\n                        };\n                        // 判断面板不能大于表格高度\n                        let maxHeight = null;\n                        const bodyHeight = bodyElem.clientHeight - (headerElem ? headerElem.clientHeight / 2 : 0);\n                        if (filterHeight >= bodyHeight) {\n                            maxHeight = Math.max(40, bodyHeight - (filterFootElem ? filterFootElem.offsetHeight : 0) - (filterHeadElem ? filterHeadElem.offsetHeight : 0));\n                        }\n                        if (column.fixed === 'left') {\n                            left = targetElem.offsetLeft + targetElem.offsetParent.offsetLeft - centerWidth;\n                        }\n                        else if (column.fixed === 'right') {\n                            right = (targetElem.offsetParent.offsetWidth - targetElem.offsetLeft) + (targetElem.offsetParent.offsetParent.offsetWidth - targetElem.offsetParent.offsetLeft) - column.renderWidth - centerWidth;\n                        }\n                        else {\n                            left = targetElem.offsetLeft + targetElem.offsetParent.offsetLeft - centerWidth - bodyElem.scrollLeft;\n                        }\n                        if (left) {\n                            const overflowWidth = (pageX + filterWidth - centerWidth + minMargin) - visibleWidth;\n                            if (overflowWidth > 0) {\n                                left -= overflowWidth;\n                            }\n                            style.left = `${Math.min(maxLeft, Math.max(minMargin, left))}px`;\n                        }\n                        else if (right) {\n                            const overflowWidth = (pageX + filterWidth - centerWidth + minMargin) - visibleWidth;\n                            if (overflowWidth > 0) {\n                                right += overflowWidth;\n                            }\n                            style.right = `${Math.max(minMargin, right)}px`;\n                        }\n                        filterStore.style = style;\n                        filterStore.maxHeight = maxHeight;\n                    });\n                }\n                $xeTable.dispatchEvent('filter-visible', { column, field: column.field, property: column.field, filterList: $xeTable.getCheckedFilters(), visible: filterStore.visible }, evnt);\n            },\n            handleClearFilter(column) {\n                if (column) {\n                    const { filters, filterRender } = column;\n                    if (filters) {\n                        const compConf = isEnableConf(filterRender) ? renderer.get(filterRender.name) : null;\n                        const frMethod = column.filterResetMethod || (compConf ? (compConf.tableFilterResetMethod || compConf.filterResetMethod) : null);\n                        filters.forEach((item) => {\n                            item._checked = false;\n                            item.checked = false;\n                            if (!frMethod) {\n                                item.data = XEUtils.clone(item.resetValue, true);\n                            }\n                        });\n                        if (frMethod) {\n                            frMethod({ options: filters, column, $table: $xeTable });\n                        }\n                    }\n                }\n            },\n            /**\n             * 确认筛选\n             * 当筛选面板中的确定按钮被按下时触发\n             * @param {Event} evnt 事件\n             */\n            confirmFilterEvent(evnt) {\n                const { mouseConfig } = props;\n                const { filterStore, scrollXLoad: oldScrollXLoad, scrollYLoad: oldScrollYLoad } = reactData;\n                const filterOpts = computeFilterOpts.value;\n                const mouseOpts = computeMouseOpts.value;\n                const { column } = filterStore;\n                const { field } = column;\n                const values = [];\n                const datas = [];\n                column.filters.forEach((item) => {\n                    if (item.checked) {\n                        values.push(item.value);\n                        datas.push(item.data);\n                    }\n                });\n                const filterList = $xeTable.getCheckedFilters();\n                const params = { $table: $xeTable, $event: evnt, column, field, property: field, values, datas, filters: filterList, filterList };\n                // 如果是服务端筛选，则跳过本地筛选处理\n                if (!filterOpts.remote) {\n                    $xeTable.handleTableData(true);\n                    $xeTable.checkSelectionStatus();\n                }\n                if (mouseConfig && mouseOpts.area && $xeTable.handleFilterEvent) {\n                    $xeTable.handleFilterEvent(evnt, params);\n                }\n                $xeTable.dispatchEvent('filter-change', params, evnt);\n                $xeTable.closeFilter();\n                $xeTable.updateFooter().then(() => {\n                    const { scrollXLoad, scrollYLoad } = reactData;\n                    if ((oldScrollXLoad || scrollXLoad) || (oldScrollYLoad || scrollYLoad)) {\n                        if (oldScrollXLoad || scrollXLoad) {\n                            $xeTable.updateScrollXSpace();\n                        }\n                        if (oldScrollYLoad || scrollYLoad) {\n                            $xeTable.updateScrollYSpace();\n                        }\n                        return $xeTable.refreshScroll();\n                    }\n                }).then(() => {\n                    $xeTable.updateCellAreas();\n                    return $xeTable.recalculate(true);\n                }).then(() => {\n                    // 存在滚动行为未结束情况\n                    setTimeout(() => $xeTable.recalculate(), 50);\n                });\n            },\n            handleFilterChangeRadioOption: changeRadioOption,\n            handleFilterChangeMultipleOption: changeMultipleOption,\n            // 筛选发生改变\n            handleFilterChangeOption(evnt, checked, item) {\n                const { filterStore } = reactData;\n                if (filterStore.multiple) {\n                    changeMultipleOption(evnt, checked, item);\n                }\n                else {\n                    changeRadioOption(evnt, checked, item);\n                }\n            },\n            handleFilterConfirmFilter: confirmFilter,\n            handleFilterResetFilter: resetFilter\n        };\n        const filterMethods = {\n            /**\n             * 手动弹出筛选面板\n             * @param column\n             */\n            openFilter(fieldOrColumn) {\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                if (column && column.filters) {\n                    const { elemStore } = internalData;\n                    const { fixed } = column;\n                    return $xeTable.scrollToColumn(column).then(() => {\n                        const headerWrapperRef = elemStore[`${fixed || 'main'}-header-wrapper`] || elemStore['main-header-wrapper'];\n                        const headerWrapperElem = headerWrapperRef ? headerWrapperRef.value : null;\n                        if (headerWrapperElem) {\n                            const filterBtnElem = headerWrapperElem.querySelector(`.vxe-header--column.${column.id} .vxe-filter--btn`);\n                            triggerEvent(filterBtnElem, 'click');\n                        }\n                    });\n                }\n                return nextTick();\n            },\n            /**\n             * 修改筛选条件列表\n             * @param {ColumnInfo} fieldOrColumn 列或字段名\n             * @param {Array} options 选项\n             */\n            setFilter(fieldOrColumn, options) {\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                if (column && column.filters) {\n                    column.filters = toFilters(options || []);\n                }\n                return nextTick();\n            },\n            /**\n             * 清空指定列的筛选条件\n             * 如果为空则清空所有列的筛选条件\n             * @param {String} fieldOrColumn 列或字段名\n             */\n            clearFilter(fieldOrColumn) {\n                const { filterStore } = reactData;\n                const { tableFullColumn } = internalData;\n                const filterOpts = computeFilterOpts.value;\n                let column;\n                if (fieldOrColumn) {\n                    column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                    if (column) {\n                        filterPrivateMethods.handleClearFilter(column);\n                    }\n                }\n                else {\n                    tableFullColumn.forEach(filterPrivateMethods.handleClearFilter);\n                }\n                if (!fieldOrColumn || column !== filterStore.column) {\n                    Object.assign(filterStore, {\n                        isAllSelected: false,\n                        isIndeterminate: false,\n                        style: null,\n                        options: [],\n                        column: null,\n                        multiple: false,\n                        visible: false\n                    });\n                }\n                if (!filterOpts.remote) {\n                    return $xeTable.updateData();\n                }\n                return nextTick();\n            },\n            getCheckedFilters() {\n                const { tableFullColumn } = internalData;\n                const filterList = [];\n                tableFullColumn.forEach((column) => {\n                    const { field, filters } = column;\n                    const valueList = [];\n                    const dataList = [];\n                    if (filters && filters.length) {\n                        filters.forEach((item) => {\n                            if (item.checked) {\n                                valueList.push(item.value);\n                                dataList.push(item.data);\n                            }\n                        });\n                        if (valueList.length) {\n                            filterList.push({ column, field, property: field, values: valueList, datas: dataList });\n                        }\n                    }\n                });\n                return filterList;\n            },\n            updateFilterOptionStatus(item, checked) {\n                item._checked = checked;\n                item.checked = checked;\n                return nextTick();\n            }\n        };\n        return Object.assign(Object.assign({}, filterMethods), filterPrivateMethods);\n    },\n    setupGrid($xeGrid) {\n        return $xeGrid.extendTableMethods(tableFilterMethodKeys);\n    }\n});\n", "import { nextTick } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { VxeUI } from '../../../ui';\nimport { getDomNode, getAbsolutePos, getEventTargetNode } from '../../../ui/src/dom';\nimport { isEnableConf, hasChildrenList } from '../../../ui/src/utils';\nconst { menus, hooks, globalEvents, GLOBAL_EVENT_KEYS } = VxeUI;\nconst tableMenuMethodKeys = ['closeMenu'];\nhooks.add('tableMenuModule', {\n    setupTable($xeTable) {\n        const { xID, props, reactData, internalData } = $xeTable;\n        const { refElem, refTableFilter, refTableMenu } = $xeTable.getRefMaps();\n        const { computeMouseOpts, computeIsMenu, computeMenuOpts } = $xeTable.getComputeMaps();\n        let menuMethods = {};\n        let menuPrivateMethods = {};\n        /**\n         * 显示快捷菜单\n         */\n        const handleOpenMenuEvent = (evnt, type, params) => {\n            const { ctxMenuStore } = reactData;\n            const isMenu = computeIsMenu.value;\n            const menuOpts = computeMenuOpts.value;\n            const config = menuOpts[type];\n            const visibleMethod = menuOpts.visibleMethod;\n            if (config) {\n                const { options, disabled } = config;\n                if (disabled) {\n                    evnt.preventDefault();\n                }\n                else if (isMenu && options && options.length) {\n                    params.options = options;\n                    $xeTable.preventEvent(evnt, 'event.showMenu', params, () => {\n                        if (!visibleMethod || visibleMethod(params)) {\n                            evnt.preventDefault();\n                            $xeTable.updateZindex();\n                            const { scrollTop, scrollLeft, visibleHeight, visibleWidth } = getDomNode();\n                            let top = evnt.clientY + scrollTop;\n                            let left = evnt.clientX + scrollLeft;\n                            const handleVisible = () => {\n                                internalData._currMenuParams = params;\n                                Object.assign(ctxMenuStore, {\n                                    visible: true,\n                                    list: options,\n                                    selected: null,\n                                    selectChild: null,\n                                    showChild: false,\n                                    style: {\n                                        zIndex: internalData.tZindex,\n                                        top: `${top}px`,\n                                        left: `${left}px`\n                                    }\n                                });\n                                nextTick(() => {\n                                    const tableMenu = refTableMenu.value;\n                                    const ctxElem = tableMenu.getRefMaps().refElem.value;\n                                    const clientHeight = ctxElem.clientHeight;\n                                    const clientWidth = ctxElem.clientWidth;\n                                    const { boundingTop, boundingLeft } = getAbsolutePos(ctxElem);\n                                    const offsetTop = boundingTop + clientHeight - visibleHeight;\n                                    const offsetLeft = boundingLeft + clientWidth - visibleWidth;\n                                    if (offsetTop > -10) {\n                                        ctxMenuStore.style.top = `${Math.max(scrollTop + 2, top - clientHeight - 2)}px`;\n                                    }\n                                    if (offsetLeft > -10) {\n                                        ctxMenuStore.style.left = `${Math.max(scrollLeft + 2, left - clientWidth - 2)}px`;\n                                    }\n                                });\n                            };\n                            const { keyboard, row, column } = params;\n                            if (keyboard && row && column) {\n                                $xeTable.scrollToRow(row, column).then(() => {\n                                    const cell = $xeTable.getCellElement(row, column);\n                                    if (cell) {\n                                        const { boundingTop, boundingLeft } = getAbsolutePos(cell);\n                                        top = boundingTop + scrollTop + Math.floor(cell.offsetHeight / 2);\n                                        left = boundingLeft + scrollLeft + Math.floor(cell.offsetWidth / 2);\n                                    }\n                                    handleVisible();\n                                });\n                            }\n                            else {\n                                handleVisible();\n                            }\n                        }\n                        else {\n                            menuMethods.closeMenu();\n                        }\n                    });\n                }\n            }\n            $xeTable.closeFilter();\n        };\n        menuMethods = {\n            /**\n             * 关闭快捷菜单\n             */\n            closeMenu() {\n                Object.assign(reactData.ctxMenuStore, {\n                    visible: false,\n                    selected: null,\n                    selectChild: null,\n                    showChild: false\n                });\n                return nextTick();\n            }\n        };\n        menuPrivateMethods = {\n            /**\n             * 处理菜单的移动\n             */\n            moveCtxMenu(evnt, ctxMenuStore, property, hasOper, operRest, menuList) {\n                let selectItem;\n                const selectIndex = XEUtils.findIndexOf(menuList, item => ctxMenuStore[property] === item);\n                if (hasOper) {\n                    if (operRest && hasChildrenList(ctxMenuStore.selected)) {\n                        ctxMenuStore.showChild = true;\n                    }\n                    else {\n                        ctxMenuStore.showChild = false;\n                        ctxMenuStore.selectChild = null;\n                    }\n                }\n                else if (globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.ARROW_UP)) {\n                    for (let len = selectIndex - 1; len >= 0; len--) {\n                        if (menuList[len].visible !== false) {\n                            selectItem = menuList[len];\n                            break;\n                        }\n                    }\n                    ctxMenuStore[property] = selectItem || menuList[menuList.length - 1];\n                }\n                else if (globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.ARROW_DOWN)) {\n                    for (let index = selectIndex + 1; index < menuList.length; index++) {\n                        if (menuList[index].visible !== false) {\n                            selectItem = menuList[index];\n                            break;\n                        }\n                    }\n                    ctxMenuStore[property] = selectItem || menuList[0];\n                }\n                else if (ctxMenuStore[property] && (globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.ENTER) || globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.SPACEBAR))) {\n                    menuPrivateMethods.ctxMenuLinkEvent(evnt, ctxMenuStore[property]);\n                }\n            },\n            handleOpenMenuEvent,\n            /**\n             * 快捷菜单事件处理\n             */\n            handleGlobalContextmenuEvent(evnt) {\n                const { mouseConfig, menuConfig } = props;\n                const { editStore, ctxMenuStore } = reactData;\n                const { visibleColumn } = internalData;\n                const tableFilter = refTableFilter.value;\n                const tableMenu = refTableMenu.value;\n                const mouseOpts = computeMouseOpts.value;\n                const menuOpts = computeMenuOpts.value;\n                const el = refElem.value;\n                const { selected } = editStore;\n                const layoutList = ['header', 'body', 'footer'];\n                if (isEnableConf(menuConfig)) {\n                    if (ctxMenuStore.visible && tableMenu && getEventTargetNode(evnt, tableMenu.getRefMaps().refElem.value).flag) {\n                        evnt.preventDefault();\n                        return;\n                    }\n                    if (internalData._keyCtx) {\n                        const type = 'body';\n                        const params = { type, $table: $xeTable, keyboard: true, columns: visibleColumn.slice(0), $event: evnt };\n                        // 如果开启单元格区域\n                        if (mouseConfig && mouseOpts.area) {\n                            const activeArea = $xeTable.getActiveCellArea();\n                            if (activeArea && activeArea.row && activeArea.column) {\n                                params.row = activeArea.row;\n                                params.column = activeArea.column;\n                                handleOpenMenuEvent(evnt, type, params);\n                                return;\n                            }\n                        }\n                        else if (mouseConfig && mouseOpts.selected) {\n                            // 如果启用键盘导航且已选中单元格\n                            if (selected.row && selected.column) {\n                                params.row = selected.row;\n                                params.column = selected.column;\n                                handleOpenMenuEvent(evnt, type, params);\n                                return;\n                            }\n                        }\n                    }\n                    // 分别匹配表尾、内容、表尾的快捷菜单\n                    for (let index = 0; index < layoutList.length; index++) {\n                        const layout = layoutList[index];\n                        const columnTargetNode = getEventTargetNode(evnt, el, `vxe-${layout}--column`, (target) => {\n                            // target=td|th，直接向上找 table 去匹配即可\n                            return target.parentNode.parentNode.parentNode.getAttribute('xid') === xID;\n                        });\n                        const params = { type: layout, $table: $xeTable, columns: visibleColumn.slice(0), $event: evnt };\n                        if (columnTargetNode.flag) {\n                            const cell = columnTargetNode.targetElem;\n                            const columnNodeRest = $xeTable.getColumnNode(cell);\n                            const column = columnNodeRest ? columnNodeRest.item : null;\n                            let typePrefix = `${layout}-`;\n                            if (column) {\n                                Object.assign(params, { column, columnIndex: $xeTable.getColumnIndex(column), cell });\n                            }\n                            if (layout === 'body') {\n                                const rowNodeRest = $xeTable.getRowNode(cell.parentNode);\n                                const row = rowNodeRest ? rowNodeRest.item : null;\n                                typePrefix = '';\n                                if (row) {\n                                    params.row = row;\n                                    params.rowIndex = $xeTable.getRowIndex(row);\n                                }\n                            }\n                            const eventType = `${typePrefix}cell-menu`;\n                            handleOpenMenuEvent(evnt, layout, params);\n                            $xeTable.dispatchEvent(eventType, params, evnt);\n                            return;\n                        }\n                        else if (getEventTargetNode(evnt, el, `vxe-table--${layout}-wrapper`, target => target.getAttribute('xid') === xID).flag) {\n                            if (menuOpts.trigger === 'cell') {\n                                evnt.preventDefault();\n                            }\n                            else {\n                                handleOpenMenuEvent(evnt, layout, params);\n                            }\n                            return;\n                        }\n                    }\n                }\n                if (tableFilter && !getEventTargetNode(evnt, tableFilter.$el).flag) {\n                    $xeTable.closeFilter();\n                }\n                menuMethods.closeMenu();\n            },\n            ctxMenuMouseoverEvent(evnt, item, child) {\n                const menuElem = evnt.currentTarget;\n                const { ctxMenuStore } = reactData;\n                evnt.preventDefault();\n                evnt.stopPropagation();\n                ctxMenuStore.selected = item;\n                ctxMenuStore.selectChild = child;\n                if (!child) {\n                    ctxMenuStore.showChild = hasChildrenList(item);\n                    if (ctxMenuStore.showChild) {\n                        nextTick(() => {\n                            const childWrapperElem = menuElem.nextElementSibling;\n                            if (childWrapperElem) {\n                                const { boundingTop, boundingLeft, visibleHeight, visibleWidth } = getAbsolutePos(menuElem);\n                                const posTop = boundingTop + menuElem.offsetHeight;\n                                const posLeft = boundingLeft + menuElem.offsetWidth;\n                                let left = '';\n                                let right = '';\n                                // 是否超出右侧\n                                if (posLeft + childWrapperElem.offsetWidth > visibleWidth - 10) {\n                                    left = 'auto';\n                                    right = `${menuElem.offsetWidth}px`;\n                                }\n                                // 是否超出底部\n                                let top = '';\n                                let bottom = '';\n                                if (posTop + childWrapperElem.offsetHeight > visibleHeight - 10) {\n                                    top = 'auto';\n                                    bottom = '0';\n                                }\n                                childWrapperElem.style.left = left;\n                                childWrapperElem.style.right = right;\n                                childWrapperElem.style.top = top;\n                                childWrapperElem.style.bottom = bottom;\n                            }\n                        });\n                    }\n                }\n            },\n            ctxMenuMouseoutEvent(evnt, item) {\n                const { ctxMenuStore } = reactData;\n                if (!item.children) {\n                    ctxMenuStore.selected = null;\n                }\n                ctxMenuStore.selectChild = null;\n            },\n            /**\n             * 快捷菜单点击事件\n             */\n            ctxMenuLinkEvent(evnt, menu) {\n                // 如果一级菜单有配置 code 则允许点击，否则不能点击\n                if (!menu.disabled && (menu.code || !menu.children || !menu.children.length)) {\n                    const gMenuOpts = menus.get(menu.code);\n                    const params = Object.assign({}, internalData._currMenuParams, { menu, $table: $xeTable, $grid: $xeTable.xegrid, $event: evnt });\n                    const tmMethod = gMenuOpts ? (gMenuOpts.tableMenuMethod || gMenuOpts.menuMethod) : null;\n                    if (tmMethod) {\n                        tmMethod(params, evnt);\n                    }\n                    $xeTable.dispatchEvent('menu-click', params, evnt);\n                    menuMethods.closeMenu();\n                }\n            }\n        };\n        return Object.assign(Object.assign({}, menuMethods), menuPrivateMethods);\n    },\n    setupGrid($xeGrid) {\n        return $xeGrid.extendTableMethods(tableMenuMethodKeys);\n    }\n});\n", "import { reactive, nextTick } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { VxeUI } from '../../../ui';\nimport { isEnableConf } from '../../../ui/src/utils';\nimport { getCellValue, setCellValue, getRowid } from '../../src/util';\nimport { browse, removeClass, addClass } from '../../../ui/src/dom';\nimport { warnLog, errLog } from '../../../ui/src/log';\nconst { getConfig, renderer, hooks, getI18n } = VxeUI;\nconst tableEditMethodKeys = ['insert', 'insertAt', 'insertNextAt', 'remove', 'removeCheckboxRow', 'removeRadioRow', 'removeCurrentRow', 'getRecordset', 'getInsertRecords', 'getRemoveRecords', 'getUpdateRecords', 'getEditRecord', 'getActiveRecord', 'getSelectedCell', 'clearEdit', 'clearActived', 'clearSelected', 'isEditByRow', 'isActiveByRow', 'setEditRow', 'setActiveRow', 'setEditCell', 'setActiveCell', 'setSelectCell'];\nhooks.add('tableEditModule', {\n    setupTable($xeTable) {\n        const { props, reactData, internalData } = $xeTable;\n        const { refElem } = $xeTable.getRefMaps();\n        const { computeMouseOpts, computeEditOpts, computeCheckboxOpts, computeTreeOpts } = $xeTable.getComputeMaps();\n        let editMethods = {};\n        let editPrivateMethods = {};\n        const getEditColumnModel = (row, column) => {\n            const { model, editRender } = column;\n            if (editRender) {\n                model.value = getCellValue(row, column);\n                model.update = false;\n            }\n        };\n        const setEditColumnModel = (row, column) => {\n            const { model, editRender } = column;\n            if (editRender && model.update) {\n                setCellValue(row, column, model.value);\n                model.update = false;\n                model.value = null;\n            }\n        };\n        const removeCellSelectedClass = () => {\n            const el = refElem.value;\n            if (el) {\n                const cell = el.querySelector('.col--selected');\n                if (cell) {\n                    removeClass(cell, 'col--selected');\n                }\n            }\n        };\n        function syncActivedCell() {\n            const { editStore, tableColumn } = reactData;\n            const editOpts = computeEditOpts.value;\n            const { actived } = editStore;\n            const { row, column } = actived;\n            if (row || column) {\n                if (editOpts.mode === 'row') {\n                    tableColumn.forEach((column) => setEditColumnModel(row, column));\n                }\n                else {\n                    setEditColumnModel(row, column);\n                }\n            }\n        }\n        function insertTreeRow(newRecords, isAppend) {\n            const { tableFullTreeData, afterFullData, fullDataRowIdData, fullAllDataRowIdData } = internalData;\n            const treeOpts = computeTreeOpts.value;\n            const { rowField, parentField, mapChildrenField } = treeOpts;\n            const childrenField = treeOpts.children || treeOpts.childrenField;\n            const funcName = isAppend ? 'push' : 'unshift';\n            newRecords.forEach(item => {\n                const parentRowId = item[parentField];\n                const rowid = getRowid($xeTable, item);\n                const matchObj = parentRowId ? XEUtils.findTree(tableFullTreeData, item => parentRowId === item[rowField], { children: mapChildrenField }) : null;\n                if (matchObj) {\n                    const { item: parentRow } = matchObj;\n                    const parentRest = fullAllDataRowIdData[getRowid($xeTable, parentRow)];\n                    const parentLevel = parentRest ? parentRest.level : 0;\n                    let parentChilds = parentRow[childrenField];\n                    let mapChilds = parentRow[mapChildrenField];\n                    if (!XEUtils.isArray(parentChilds)) {\n                        parentChilds = parentRow[childrenField] = [];\n                    }\n                    if (!XEUtils.isArray(mapChilds)) {\n                        mapChilds = parentRow[childrenField] = [];\n                    }\n                    parentChilds[funcName](item);\n                    mapChilds[funcName](item);\n                    const rest = { row: item, rowid, seq: -1, index: -1, _index: -1, $index: -1, items: parentChilds, parent: parentRow, level: parentLevel + 1 };\n                    fullDataRowIdData[rowid] = rest;\n                    fullAllDataRowIdData[rowid] = rest;\n                }\n                else {\n                    if (process.env.NODE_ENV === 'development') {\n                        if (parentRowId) {\n                            warnLog('vxe.error.unableInsert');\n                        }\n                    }\n                    afterFullData[funcName](item);\n                    tableFullTreeData[funcName](item);\n                    const rest = { row: item, rowid, seq: -1, index: -1, _index: -1, $index: -1, items: tableFullTreeData, parent: null, level: 0 };\n                    fullDataRowIdData[rowid] = rest;\n                    fullAllDataRowIdData[rowid] = rest;\n                }\n            });\n        }\n        const handleInsertRowAt = (records, row, isInsertNextRow) => {\n            const { treeConfig } = props;\n            const { mergeList, editStore } = reactData;\n            const { tableFullTreeData, afterFullData, tableFullData, fullDataRowIdData, fullAllDataRowIdData } = internalData;\n            const treeOpts = computeTreeOpts.value;\n            const { transform, rowField, mapChildrenField } = treeOpts;\n            const childrenField = treeOpts.children || treeOpts.childrenField;\n            if (!XEUtils.isArray(records)) {\n                records = [records];\n            }\n            const newRecords = reactive($xeTable.defineField(records.map((record) => Object.assign(treeConfig && transform ? { [mapChildrenField]: [], [childrenField]: [] } : {}, record))));\n            if (XEUtils.eqNull(row)) {\n                // 如果为虚拟树\n                if (treeConfig && transform) {\n                    insertTreeRow(newRecords, false);\n                }\n                else {\n                    afterFullData.unshift(...newRecords);\n                    tableFullData.unshift(...newRecords);\n                    // 刷新单元格合并\n                    mergeList.forEach((mergeItem) => {\n                        const { row: mergeRowIndex } = mergeItem;\n                        if (mergeRowIndex > 0) {\n                            mergeItem.row = mergeRowIndex + newRecords.length;\n                        }\n                    });\n                }\n            }\n            else {\n                if (row === -1) {\n                    // 如果为虚拟树\n                    if (treeConfig && transform) {\n                        insertTreeRow(newRecords, true);\n                    }\n                    else {\n                        afterFullData.push(...newRecords);\n                        tableFullData.push(...newRecords);\n                        // 刷新单元格合并\n                        mergeList.forEach((mergeItem) => {\n                            const { row: mergeRowIndex, rowspan: mergeRowspan } = mergeItem;\n                            if (mergeRowIndex + mergeRowspan > afterFullData.length) {\n                                mergeItem.rowspan = mergeRowspan + newRecords.length;\n                            }\n                        });\n                    }\n                }\n                else {\n                    // 如果为虚拟树\n                    if (treeConfig && transform) {\n                        const matchMapObj = XEUtils.findTree(tableFullTreeData, item => row[rowField] === item[rowField], { children: mapChildrenField });\n                        if (matchMapObj) {\n                            const { parent: parentRow } = matchMapObj;\n                            const parentMapChilds = parentRow ? parentRow[mapChildrenField] : tableFullTreeData;\n                            const parentRest = fullAllDataRowIdData[getRowid($xeTable, parentRow)];\n                            const parentLevel = parentRest ? parentRest.level : 0;\n                            newRecords.forEach((item, i) => {\n                                const rowid = getRowid($xeTable, item);\n                                if (process.env.NODE_ENV === 'development') {\n                                    if (item[treeOpts.parentField]) {\n                                        if (parentRow && item[treeOpts.parentField] !== parentRow[rowField]) {\n                                            errLog('vxe.error.errProp', [`${treeOpts.parentField}=${item[treeOpts.parentField]}`, `${treeOpts.parentField}=${parentRow[rowField]}`]);\n                                        }\n                                    }\n                                }\n                                if (parentRow) {\n                                    item[treeOpts.parentField] = parentRow[rowField];\n                                }\n                                let targetIndex = matchMapObj.index + i;\n                                if (isInsertNextRow) {\n                                    targetIndex = targetIndex + 1;\n                                }\n                                parentMapChilds.splice(targetIndex, 0, item);\n                                const rest = { row: item, rowid, seq: -1, index: -1, _index: -1, $index: -1, items: parentMapChilds, parent: parentRow, level: parentLevel + 1 };\n                                fullDataRowIdData[rowid] = rest;\n                                fullAllDataRowIdData[rowid] = rest;\n                            });\n                            // 源\n                            if (parentRow) {\n                                const matchObj = XEUtils.findTree(tableFullTreeData, item => row[rowField] === item[rowField], { children: childrenField });\n                                if (matchObj) {\n                                    const parentChilds = matchObj.items;\n                                    let targetIndex = matchObj.index;\n                                    if (isInsertNextRow) {\n                                        targetIndex = targetIndex + 1;\n                                    }\n                                    parentChilds.splice(targetIndex, 0, ...newRecords);\n                                }\n                            }\n                        }\n                        else {\n                            if (process.env.NODE_ENV === 'development') {\n                                warnLog('vxe.error.unableInsert');\n                            }\n                            insertTreeRow(newRecords, true);\n                        }\n                    }\n                    else {\n                        if (treeConfig) {\n                            throw new Error(getI18n('vxe.error.noTree', ['insert']));\n                        }\n                        let afIndex = -1;\n                        // 如果是可视索引\n                        if (XEUtils.isNumber(row)) {\n                            if (row < afterFullData.length) {\n                                afIndex = row;\n                            }\n                        }\n                        else {\n                            afIndex = $xeTable.findRowIndexOf(afterFullData, row);\n                        }\n                        // 如果是插入指定行的下一行\n                        if (isInsertNextRow) {\n                            afIndex = Math.min(afterFullData.length, afIndex + 1);\n                        }\n                        if (afIndex === -1) {\n                            throw new Error(getI18n('vxe.error.unableInsert'));\n                        }\n                        afterFullData.splice(afIndex, 0, ...newRecords);\n                        tableFullData.splice($xeTable.findRowIndexOf(tableFullData, row), 0, ...newRecords);\n                        // 刷新单元格合并\n                        mergeList.forEach((mergeItem) => {\n                            const { row: mergeRowIndex, rowspan: mergeRowspan } = mergeItem;\n                            if (mergeRowIndex > afIndex) {\n                                mergeItem.row = mergeRowIndex + newRecords.length;\n                            }\n                            else if (mergeRowIndex + mergeRowspan > afIndex) {\n                                mergeItem.rowspan = mergeRowspan + newRecords.length;\n                            }\n                        });\n                    }\n                }\n            }\n            const { insertMaps } = editStore;\n            newRecords.forEach(newRow => {\n                const rowid = getRowid($xeTable, newRow);\n                insertMaps[rowid] = newRow;\n            });\n            $xeTable.cacheRowMap();\n            $xeTable.updateScrollYStatus();\n            $xeTable.handleTableData(treeConfig && transform);\n            if (!(treeConfig && transform)) {\n                $xeTable.updateAfterDataIndex();\n            }\n            $xeTable.updateFooter();\n            $xeTable.checkSelectionStatus();\n            if (reactData.scrollYLoad) {\n                $xeTable.updateScrollYSpace();\n            }\n            return nextTick().then(() => {\n                $xeTable.updateCellAreas();\n                return $xeTable.recalculate();\n            }).then(() => {\n                return {\n                    row: newRecords.length ? newRecords[newRecords.length - 1] : null,\n                    rows: newRecords\n                };\n            });\n        };\n        editMethods = {\n            /**\n             * 往表格中插入临时数据\n             *\n             * @param {*} records\n             */\n            insert(records) {\n                return handleInsertRowAt(records, null);\n            },\n            /**\n             * 往表格指定行中插入临时数据\n             * 如果 row 为空则从插入到顶部，如果为树结构，则插入到目标节点顶部\n             * 如果 row 为 -1 则从插入到底部，如果为树结构，则插入到目标节点底部\n             * 如果 row 为有效行则插入到该行的位置，如果为树结构，则有插入到效的目标节点该行的位置\n             * @param {Object/Array} records 新的数据\n             * @param {Row} row 指定行\n             */\n            insertAt(records, row) {\n                return handleInsertRowAt(records, row);\n            },\n            insertNextAt(records, row) {\n                return handleInsertRowAt(records, row, true);\n            },\n            /**\n             * 删除指定行数据\n             * 如果传 row 则删除一行\n             * 如果传 rows 则删除多行\n             * 如果为空则删除所有\n             */\n            remove(rows) {\n                const { treeConfig } = props;\n                const { mergeList, editStore, selectCheckboxMaps } = reactData;\n                const { tableFullTreeData, afterFullData, tableFullData } = internalData;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const treeOpts = computeTreeOpts.value;\n                const { transform, mapChildrenField } = treeOpts;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                const { actived, removeMaps, insertMaps } = editStore;\n                const { checkField } = checkboxOpts;\n                let delList = [];\n                if (!rows) {\n                    rows = tableFullData;\n                }\n                else if (!XEUtils.isArray(rows)) {\n                    rows = [rows];\n                }\n                // 如果是新增，则保存记录\n                rows.forEach((row) => {\n                    if (!$xeTable.isInsertByRow(row)) {\n                        const rowid = getRowid($xeTable, row);\n                        removeMaps[rowid] = row;\n                    }\n                });\n                // 如果绑定了多选属性，则更新状态\n                if (!checkField) {\n                    const selectRowMaps = Object.assign({}, selectCheckboxMaps);\n                    rows.forEach((row) => {\n                        const rowid = getRowid($xeTable, row);\n                        if (selectRowMaps[rowid]) {\n                            delete selectRowMaps[rowid];\n                        }\n                    });\n                    reactData.selectCheckboxMaps = selectRowMaps;\n                }\n                // 从数据源中移除\n                if (tableFullData === rows) {\n                    rows = delList = tableFullData.slice(0);\n                    internalData.tableFullData = [];\n                    internalData.afterFullData = [];\n                    $xeTable.clearMergeCells();\n                }\n                else {\n                    // 如果为虚拟树\n                    if (treeConfig && transform) {\n                        rows.forEach((row) => {\n                            const rowid = getRowid($xeTable, row);\n                            const matchMapObj = XEUtils.findTree(tableFullTreeData, item => rowid === getRowid($xeTable, item), { children: mapChildrenField });\n                            if (matchMapObj) {\n                                const rItems = matchMapObj.items.splice(matchMapObj.index, 1);\n                                delList.push(rItems[0]);\n                            }\n                            const matchObj = XEUtils.findTree(tableFullTreeData, item => rowid === getRowid($xeTable, item), { children: childrenField });\n                            if (matchObj) {\n                                matchObj.items.splice(matchObj.index, 1);\n                            }\n                            const afIndex = $xeTable.findRowIndexOf(afterFullData, row);\n                            if (afIndex > -1) {\n                                afterFullData.splice(afIndex, 1);\n                            }\n                        });\n                    }\n                    else {\n                        rows.forEach((row) => {\n                            const tfIndex = $xeTable.findRowIndexOf(tableFullData, row);\n                            if (tfIndex > -1) {\n                                const rItems = tableFullData.splice(tfIndex, 1);\n                                delList.push(rItems[0]);\n                            }\n                            const afIndex = $xeTable.findRowIndexOf(afterFullData, row);\n                            if (afIndex > -1) {\n                                // 刷新单元格合并\n                                mergeList.forEach((mergeItem) => {\n                                    const { row: mergeRowIndex, rowspan: mergeRowspan } = mergeItem;\n                                    if (mergeRowIndex > afIndex) {\n                                        mergeItem.row = mergeRowIndex - 1;\n                                    }\n                                    else if (mergeRowIndex + mergeRowspan > afIndex) {\n                                        mergeItem.rowspan = mergeRowspan - 1;\n                                    }\n                                });\n                                afterFullData.splice(afIndex, 1);\n                            }\n                        });\n                    }\n                }\n                // 如果当前行被激活编辑，则清除激活状态\n                if (actived.row && $xeTable.findRowIndexOf(rows, actived.row) > -1) {\n                    editMethods.clearEdit();\n                }\n                // 从新增中移除已删除的数据\n                rows.forEach((row) => {\n                    const rowid = getRowid($xeTable, row);\n                    if (insertMaps[rowid]) {\n                        delete insertMaps[rowid];\n                    }\n                });\n                $xeTable.updateFooter();\n                $xeTable.cacheRowMap();\n                $xeTable.handleTableData(treeConfig && transform);\n                if (!(treeConfig && transform)) {\n                    $xeTable.updateAfterDataIndex();\n                }\n                $xeTable.checkSelectionStatus();\n                if (reactData.scrollYLoad) {\n                    $xeTable.updateScrollYSpace();\n                }\n                return nextTick().then(() => {\n                    $xeTable.updateCellAreas();\n                    return $xeTable.recalculate();\n                }).then(() => {\n                    return { row: delList.length ? delList[delList.length - 1] : null, rows: delList };\n                });\n            },\n            /**\n             * 删除复选框选中的数据\n             */\n            removeCheckboxRow() {\n                return editMethods.remove($xeTable.getCheckboxRecords()).then((params) => {\n                    $xeTable.clearCheckboxRow();\n                    return params;\n                });\n            },\n            /**\n             * 删除单选框选中的数据\n             */\n            removeRadioRow() {\n                const radioRecord = $xeTable.getRadioRecord();\n                return editMethods.remove(radioRecord || []).then((params) => {\n                    $xeTable.clearRadioRow();\n                    return params;\n                });\n            },\n            /**\n             * 删除当前行选中的数据\n             */\n            removeCurrentRow() {\n                const currentRecord = $xeTable.getCurrentRecord();\n                return editMethods.remove(currentRecord || []).then((params) => {\n                    $xeTable.clearCurrentRow();\n                    return params;\n                });\n            },\n            /**\n             * 获取表格数据集，包含新增、删除、修改、标记\n             */\n            getRecordset() {\n                const removeRecords = editMethods.getRemoveRecords();\n                const pendingRecords = $xeTable.getPendingRecords();\n                const delRecords = removeRecords.concat(pendingRecords);\n                // 如果已经被删除，则无需放到更新数组\n                const updateRecords = editMethods.getUpdateRecords().filter(row => {\n                    return !delRecords.some(item => $xeTable.eqRow(item, row));\n                });\n                return {\n                    insertRecords: editMethods.getInsertRecords(),\n                    removeRecords,\n                    updateRecords,\n                    pendingRecords\n                };\n            },\n            /**\n             * 获取新增的临时数据\n             */\n            getInsertRecords() {\n                const { editStore } = reactData;\n                const { fullAllDataRowIdData } = internalData;\n                const { insertMaps } = editStore;\n                const insertRecords = [];\n                XEUtils.each(insertMaps, (row, rowid) => {\n                    if (fullAllDataRowIdData[rowid]) {\n                        insertRecords.push(row);\n                    }\n                });\n                return insertRecords;\n            },\n            /**\n             * 获取已删除的数据\n             */\n            getRemoveRecords() {\n                const { editStore } = reactData;\n                const { removeMaps } = editStore;\n                const removeRecords = [];\n                XEUtils.each(removeMaps, (row) => {\n                    removeRecords.push(row);\n                });\n                return removeRecords;\n            },\n            /**\n             * 获取更新数据\n             * 只精准匹配 row 的更改\n             * 如果是树表格，子节点更改状态不会影响父节点的更新状态\n             */\n            getUpdateRecords() {\n                const { keepSource, treeConfig } = props;\n                const { tableFullData } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                if (keepSource) {\n                    syncActivedCell();\n                    if (treeConfig) {\n                        return XEUtils.filterTree(tableFullData, row => $xeTable.isUpdateByRow(row), treeOpts);\n                    }\n                    return tableFullData.filter((row) => $xeTable.isUpdateByRow(row));\n                }\n                return [];\n            },\n            getActiveRecord() {\n                if (process.env.NODE_ENV === 'development') {\n                    warnLog('vxe.error.delFunc', ['getActiveRecord', 'getEditRecord']);\n                }\n                return this.getEditRecord();\n            },\n            getEditRecord() {\n                const { editStore } = reactData;\n                const { afterFullData } = internalData;\n                const el = refElem.value;\n                const { args, row } = editStore.actived;\n                if (args && $xeTable.findRowIndexOf(afterFullData, row) > -1 && el.querySelectorAll('.vxe-body--column.col--active').length) {\n                    return Object.assign({}, args);\n                }\n                return null;\n            },\n            /**\n             * 获取选中的单元格\n             */\n            getSelectedCell() {\n                const { editStore } = reactData;\n                const { args, column } = editStore.selected;\n                if (args && column) {\n                    return Object.assign({}, args);\n                }\n                return null;\n            },\n            clearActived(evnt) {\n                // 即将废弃\n                if (process.env.NODE_ENV === 'development') {\n                    warnLog('vxe.error.delFunc', ['clearActived', 'clearEdit']);\n                }\n                return this.clearEdit(evnt);\n            },\n            /**\n             * 清除激活的编辑\n             */\n            clearEdit(evnt) {\n                const { editStore } = reactData;\n                const { actived, focused } = editStore;\n                const { row, column } = actived;\n                if (row || column) {\n                    syncActivedCell();\n                    actived.args = null;\n                    actived.row = null;\n                    actived.column = null;\n                    $xeTable.updateFooter();\n                    $xeTable.dispatchEvent('edit-closed', {\n                        row,\n                        rowIndex: $xeTable.getRowIndex(row),\n                        $rowIndex: $xeTable.getVMRowIndex(row),\n                        column,\n                        columnIndex: $xeTable.getColumnIndex(column),\n                        $columnIndex: $xeTable.getVMColumnIndex(column)\n                    }, evnt || null);\n                }\n                if (getConfig().cellVaildMode === 'obsolete') {\n                    if ($xeTable.clearValidate) {\n                        return $xeTable.clearValidate();\n                    }\n                }\n                focused.row = null;\n                focused.column = null;\n                return nextTick();\n            },\n            /**\n             * 清除所选中源状态\n             */\n            clearSelected() {\n                const { editStore } = reactData;\n                const { selected } = editStore;\n                selected.row = null;\n                selected.column = null;\n                removeCellSelectedClass();\n                return nextTick();\n            },\n            isActiveByRow(row) {\n                if (process.env.NODE_ENV === 'development') {\n                    warnLog('vxe.error.delFunc', ['isActiveByRow', 'isEditByRow']);\n                }\n                // 即将废弃\n                return this.isEditByRow(row);\n            },\n            /**\n             * 判断行是否为激活编辑状态\n             * @param {Row} row 行对象\n             */\n            isEditByRow(row) {\n                const { editStore } = reactData;\n                return editStore.actived.row === row;\n            },\n            setActiveRow(row) {\n                if (process.env.NODE_ENV === 'development') {\n                    warnLog('vxe.error.delFunc', ['setActiveRow', 'setEditRow']);\n                }\n                // 即将废弃\n                return editMethods.setEditRow(row);\n            },\n            /**\n             * 激活行编辑\n             */\n            setEditRow(row, fieldOrColumn) {\n                const { visibleColumn } = internalData;\n                let column = XEUtils.find(visibleColumn, column => isEnableConf(column.editRender));\n                if (fieldOrColumn) {\n                    column = XEUtils.isString(fieldOrColumn) ? $xeTable.getColumnByField(fieldOrColumn) : fieldOrColumn;\n                }\n                return $xeTable.setEditCell(row, column);\n            },\n            setActiveCell(row, fieldOrColumn) {\n                if (process.env.NODE_ENV === 'development') {\n                    warnLog('vxe.error.delFunc', ['setActiveCell', 'setEditCell']);\n                }\n                // 即将废弃\n                return editMethods.setEditCell(row, fieldOrColumn);\n            },\n            /**\n             * 激活单元格编辑\n             */\n            setEditCell(row, fieldOrColumn) {\n                const { editConfig } = props;\n                const column = XEUtils.isString(fieldOrColumn) ? $xeTable.getColumnByField(fieldOrColumn) : fieldOrColumn;\n                if (row && column && isEnableConf(editConfig) && isEnableConf(column.editRender)) {\n                    return $xeTable.scrollToRow(row, column).then(() => {\n                        const cell = $xeTable.getCellElement(row, column);\n                        if (cell) {\n                            editPrivateMethods.handleActived({\n                                row,\n                                rowIndex: $xeTable.getRowIndex(row),\n                                column,\n                                columnIndex: $xeTable.getColumnIndex(column),\n                                cell,\n                                $table: $xeTable\n                            });\n                            internalData._lastCallTime = Date.now();\n                        }\n                        return nextTick();\n                    });\n                }\n                return nextTick();\n            },\n            /**\n             * 只对 trigger=dblclick 有效，选中单元格\n             */\n            setSelectCell(row, fieldOrColumn) {\n                const { tableData } = reactData;\n                const editOpts = computeEditOpts.value;\n                const column = XEUtils.isString(fieldOrColumn) ? $xeTable.getColumnByField(fieldOrColumn) : fieldOrColumn;\n                if (row && column && editOpts.trigger !== 'manual') {\n                    const rowIndex = $xeTable.findRowIndexOf(tableData, row);\n                    if (rowIndex > -1 && column) {\n                        const cell = $xeTable.getCellElement(row, column);\n                        const params = {\n                            row,\n                            rowIndex,\n                            column,\n                            columnIndex: $xeTable.getColumnIndex(column),\n                            cell\n                        };\n                        $xeTable.handleSelected(params, {});\n                    }\n                }\n                return nextTick();\n            }\n        };\n        editPrivateMethods = {\n            /**\n             * 处理激活编辑\n             */\n            handleActived(params, evnt) {\n                const { editConfig, mouseConfig } = props;\n                const { editStore, tableColumn } = reactData;\n                const editOpts = computeEditOpts.value;\n                const { mode } = editOpts;\n                const { actived, focused } = editStore;\n                const { row, column } = params;\n                const { editRender } = column;\n                const cell = (params.cell || $xeTable.getCellElement(row, column));\n                const beforeEditMethod = editOpts.beforeEditMethod || editOpts.activeMethod;\n                params.cell = cell;\n                if (cell && isEnableConf(editConfig) && isEnableConf(editRender)) {\n                    // 激活编辑\n                    if (!$xeTable.hasPendingByRow(row)) {\n                        if (actived.row !== row || (mode === 'cell' ? actived.column !== column : false)) {\n                            // 判断是否禁用编辑\n                            let type = 'edit-disabled';\n                            if (!beforeEditMethod || beforeEditMethod(Object.assign(Object.assign({}, params), { $table: $xeTable, $grid: $xeTable.xegrid }))) {\n                                if (mouseConfig) {\n                                    editMethods.clearSelected();\n                                    if ($xeTable.clearCellAreas) {\n                                        $xeTable.clearCellAreas();\n                                        $xeTable.clearCopyCellArea();\n                                    }\n                                }\n                                $xeTable.closeTooltip();\n                                if (actived.column) {\n                                    editMethods.clearEdit(evnt);\n                                }\n                                type = 'edit-activated';\n                                column.renderHeight = cell.offsetHeight;\n                                actived.args = params;\n                                actived.row = row;\n                                actived.column = column;\n                                if (mode === 'row') {\n                                    tableColumn.forEach((column) => getEditColumnModel(row, column));\n                                }\n                                else {\n                                    getEditColumnModel(row, column);\n                                }\n                                const afterEditMethod = editOpts.afterEditMethod;\n                                nextTick(() => {\n                                    editPrivateMethods.handleFocus(params, evnt);\n                                    if (afterEditMethod) {\n                                        afterEditMethod(Object.assign(Object.assign({}, params), { $table: $xeTable, $grid: $xeTable.xegrid }));\n                                    }\n                                });\n                            }\n                            $xeTable.dispatchEvent(type, {\n                                row,\n                                rowIndex: $xeTable.getRowIndex(row),\n                                $rowIndex: $xeTable.getVMRowIndex(row),\n                                column,\n                                columnIndex: $xeTable.getColumnIndex(column),\n                                $columnIndex: $xeTable.getVMColumnIndex(column)\n                            }, evnt);\n                            // v4已废弃\n                            if (type === 'edit-activated') {\n                                $xeTable.dispatchEvent('edit-actived', {\n                                    row,\n                                    rowIndex: $xeTable.getRowIndex(row),\n                                    $rowIndex: $xeTable.getVMRowIndex(row),\n                                    column,\n                                    columnIndex: $xeTable.getColumnIndex(column),\n                                    $columnIndex: $xeTable.getVMColumnIndex(column)\n                                }, evnt);\n                            }\n                        }\n                        else {\n                            const { column: oldColumn } = actived;\n                            if (mouseConfig) {\n                                editMethods.clearSelected();\n                                if ($xeTable.clearCellAreas) {\n                                    $xeTable.clearCellAreas();\n                                    $xeTable.clearCopyCellArea();\n                                }\n                            }\n                            if (oldColumn !== column) {\n                                const { model: oldModel } = oldColumn;\n                                if (oldModel.update) {\n                                    setCellValue(row, oldColumn, oldModel.value);\n                                }\n                                if ($xeTable.clearValidate) {\n                                    $xeTable.clearValidate(row, column);\n                                }\n                            }\n                            column.renderHeight = cell.offsetHeight;\n                            actived.args = params;\n                            actived.column = column;\n                            setTimeout(() => {\n                                editPrivateMethods.handleFocus(params, evnt);\n                            });\n                        }\n                        focused.column = null;\n                        focused.row = null;\n                        $xeTable.focus();\n                    }\n                }\n                return nextTick();\n            },\n            /**\n             * 处理聚焦\n             */\n            handleFocus(params) {\n                const { row, column, cell } = params;\n                const { editRender } = column;\n                if (isEnableConf(editRender)) {\n                    const compRender = renderer.get(editRender.name);\n                    let autoFocus = editRender.autofocus || editRender.autoFocus;\n                    let autoSelect = editRender.autoSelect || editRender.autoselect;\n                    let inputElem;\n                    if (!autoFocus && compRender) {\n                        autoFocus = compRender.tableAutoFocus || compRender.tableAutofocus || compRender.autofocus;\n                    }\n                    if (!autoSelect && compRender) {\n                        autoSelect = compRender.tableAutoSelect || compRender.autoselect;\n                    }\n                    // 如果指定了聚焦 class\n                    if (XEUtils.isFunction(autoFocus)) {\n                        inputElem = autoFocus(params);\n                    }\n                    else if (autoFocus) {\n                        inputElem = cell.querySelector(autoFocus);\n                        if (inputElem) {\n                            inputElem.focus();\n                        }\n                    }\n                    if (inputElem) {\n                        if (autoSelect) {\n                            inputElem.select();\n                        }\n                        else {\n                            // 保持一致行为，光标移到末端\n                            if (browse.msie) {\n                                const textRange = inputElem.createTextRange();\n                                textRange.collapse(false);\n                                textRange.select();\n                            }\n                        }\n                    }\n                    else {\n                        // 显示到可视区中\n                        $xeTable.scrollToRow(row, column);\n                    }\n                }\n            },\n            /**\n             * 处理选中源\n             */\n            handleSelected(params, evnt) {\n                const { mouseConfig } = props;\n                const { editStore } = reactData;\n                const mouseOpts = computeMouseOpts.value;\n                const editOpts = computeEditOpts.value;\n                const { actived, selected } = editStore;\n                const { row, column } = params;\n                const isMouseSelected = mouseConfig && mouseOpts.selected;\n                const selectMethod = () => {\n                    if (isMouseSelected && (selected.row !== row || selected.column !== column)) {\n                        if (actived.row !== row || (editOpts.mode === 'cell' ? actived.column !== column : false)) {\n                            editMethods.clearEdit(evnt);\n                            editMethods.clearSelected();\n                            if ($xeTable.clearCellAreas) {\n                                $xeTable.clearCellAreas();\n                                $xeTable.clearCopyCellArea();\n                            }\n                            selected.args = params;\n                            selected.row = row;\n                            selected.column = column;\n                            if (isMouseSelected) {\n                                editPrivateMethods.addCellSelectedClass();\n                            }\n                            $xeTable.focus();\n                            if (evnt) {\n                                $xeTable.dispatchEvent('cell-selected', params, evnt);\n                            }\n                        }\n                    }\n                    return nextTick();\n                };\n                return selectMethod();\n            },\n            addCellSelectedClass() {\n                const { editStore } = reactData;\n                const { selected } = editStore;\n                const { row, column } = selected;\n                removeCellSelectedClass();\n                if (row && column) {\n                    const cell = $xeTable.getCellElement(row, column);\n                    if (cell) {\n                        addClass(cell, 'col--selected');\n                    }\n                }\n            }\n        };\n        return Object.assign(Object.assign({}, editMethods), editPrivateMethods);\n    },\n    setupGrid($xeGrid) {\n        return $xeGrid.extendTableMethods(tableEditMethodKeys);\n    }\n});\n", "import { inject, nextTick } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { VxeUI } from '../../../ui';\nimport { isColumnInfo, mergeBodyMethod, getCellValue } from '../../src/util';\nimport { parseFile, formatText } from '../../../ui/src/utils';\nimport { createHtmlPage, getExportBlobByContent } from './util';\nimport { warnLog, errLog } from '../../../ui/src/log';\nconst { getI18n, hooks, renderer } = VxeUI;\nlet htmlCellElem;\nconst csvBOM = '\\ufeff';\nconst enterSymbol = '\\r\\n';\nfunction defaultFilterExportColumn(column) {\n    return column.property || ['seq', 'checkbox', 'radio'].indexOf(column.type) > -1;\n}\nconst getConvertColumns = (columns) => {\n    const result = [];\n    columns.forEach((column) => {\n        if (column.childNodes && column.childNodes.length) {\n            result.push(column);\n            result.push(...getConvertColumns(column.childNodes));\n        }\n        else {\n            result.push(column);\n        }\n    });\n    return result;\n};\nconst convertToRows = (originColumns) => {\n    let maxLevel = 1;\n    const traverse = (column, parent) => {\n        if (parent) {\n            column._level = parent._level + 1;\n            if (maxLevel < column._level) {\n                maxLevel = column._level;\n            }\n        }\n        if (column.childNodes && column.childNodes.length) {\n            let colSpan = 0;\n            column.childNodes.forEach((subColumn) => {\n                traverse(subColumn, column);\n                colSpan += subColumn._colSpan;\n            });\n            column._colSpan = colSpan;\n        }\n        else {\n            column._colSpan = 1;\n        }\n    };\n    originColumns.forEach((column) => {\n        column._level = 1;\n        traverse(column);\n    });\n    const rows = [];\n    for (let i = 0; i < maxLevel; i++) {\n        rows.push([]);\n    }\n    const allColumns = getConvertColumns(originColumns);\n    allColumns.forEach((column) => {\n        if (column.childNodes && column.childNodes.length) {\n            column._rowSpan = 1;\n        }\n        else {\n            column._rowSpan = maxLevel - column._level + 1;\n        }\n        rows[column._level - 1].push(column);\n    });\n    return rows;\n};\nfunction toTableBorder(border) {\n    if (border === true) {\n        return 'full';\n    }\n    if (border) {\n        return border;\n    }\n    return 'default';\n}\nfunction getBooleanValue(cellValue) {\n    return cellValue === 'TRUE' || cellValue === 'true' || cellValue === true;\n}\nfunction getFooterData(opts, footerTableData) {\n    const { footerFilterMethod } = opts;\n    return footerFilterMethod ? footerTableData.filter((items, index) => footerFilterMethod({ items, $rowIndex: index })) : footerTableData;\n}\nfunction getCsvCellTypeLabel(column, cellValue) {\n    if (cellValue) {\n        if (column.type === 'seq') {\n            return `\\t${cellValue}`;\n        }\n        switch (column.cellType) {\n            case 'string':\n                if (!isNaN(cellValue)) {\n                    return `\\t${cellValue}`;\n                }\n                break;\n            case 'number':\n                break;\n            default:\n                if (cellValue.length >= 12 && !isNaN(cellValue)) {\n                    return `\\t${cellValue}`;\n                }\n                break;\n        }\n    }\n    return cellValue;\n}\nfunction toTxtCellLabel(val) {\n    if (/[\",\\s\\n]/.test(val)) {\n        return `\"${val.replace(/\"/g, '\"\"')}\"`;\n    }\n    return val;\n}\nfunction getElementsByTagName(elem, qualifiedName) {\n    return elem.getElementsByTagName(qualifiedName);\n}\nfunction getTxtCellKey(now) {\n    return `#${now}@${XEUtils.uniqueId()}`;\n}\nfunction replaceTxtCell(cell, vMaps) {\n    return cell.replace(/#\\d+@\\d+/g, (key) => XEUtils.hasOwnProp(vMaps, key) ? vMaps[key] : key);\n}\nfunction getTxtCellValue(val, vMaps) {\n    const rest = replaceTxtCell(val, vMaps);\n    return rest.replace(/^\"+$/g, (qVal) => '\"'.repeat(Math.ceil(qVal.length / 2)));\n}\nfunction parseCsvAndTxt(columns, content, cellSeparator) {\n    const list = content.split(enterSymbol);\n    const rows = [];\n    let fields = [];\n    if (list.length) {\n        const vMaps = {};\n        const now = Date.now();\n        list.forEach((rVal) => {\n            if (rVal) {\n                const item = {};\n                rVal = rVal.replace(/(\"\")|(\\n)/g, (text, dVal) => {\n                    const key = getTxtCellKey(now);\n                    vMaps[key] = dVal ? '\"' : '\\n';\n                    return key;\n                }).replace(/\"(.*?)\"/g, (text, cVal) => {\n                    const key = getTxtCellKey(now);\n                    vMaps[key] = replaceTxtCell(cVal, vMaps);\n                    return key;\n                });\n                const cells = rVal.split(cellSeparator);\n                if (!fields.length) {\n                    fields = cells.map((val) => getTxtCellValue(val.trim(), vMaps));\n                }\n                else {\n                    cells.forEach((val, colIndex) => {\n                        if (colIndex < fields.length) {\n                            item[fields[colIndex]] = getTxtCellValue(val.trim(), vMaps);\n                        }\n                    });\n                    rows.push(item);\n                }\n            }\n        });\n    }\n    return { fields, rows };\n}\nfunction parseCsv(columns, content) {\n    return parseCsvAndTxt(columns, content, ',');\n}\nfunction parseTxt(columns, content) {\n    return parseCsvAndTxt(columns, content, '\\t');\n}\nfunction parseHTML(columns, content) {\n    const domParser = new DOMParser();\n    const xmlDoc = domParser.parseFromString(content, 'text/html');\n    const bodyNodes = getElementsByTagName(xmlDoc, 'body');\n    const rows = [];\n    const fields = [];\n    if (bodyNodes.length) {\n        const tableNodes = getElementsByTagName(bodyNodes[0], 'table');\n        if (tableNodes.length) {\n            const theadNodes = getElementsByTagName(tableNodes[0], 'thead');\n            if (theadNodes.length) {\n                XEUtils.arrayEach(getElementsByTagName(theadNodes[0], 'tr'), rowNode => {\n                    XEUtils.arrayEach(getElementsByTagName(rowNode, 'th'), cellNode => {\n                        fields.push(cellNode.textContent);\n                    });\n                });\n                const tbodyNodes = getElementsByTagName(tableNodes[0], 'tbody');\n                if (tbodyNodes.length) {\n                    XEUtils.arrayEach(getElementsByTagName(tbodyNodes[0], 'tr'), rowNode => {\n                        const item = {};\n                        XEUtils.arrayEach(getElementsByTagName(rowNode, 'td'), (cellNode, colIndex) => {\n                            if (fields[colIndex]) {\n                                item[fields[colIndex]] = cellNode.textContent || '';\n                            }\n                        });\n                        rows.push(item);\n                    });\n                }\n            }\n        }\n    }\n    return { fields, rows };\n}\nfunction parseXML(columns, content) {\n    const domParser = new DOMParser();\n    const xmlDoc = domParser.parseFromString(content, 'application/xml');\n    const sheetNodes = getElementsByTagName(xmlDoc, 'Worksheet');\n    const rows = [];\n    const fields = [];\n    if (sheetNodes.length) {\n        const tableNodes = getElementsByTagName(sheetNodes[0], 'Table');\n        if (tableNodes.length) {\n            const rowNodes = getElementsByTagName(tableNodes[0], 'Row');\n            if (rowNodes.length) {\n                XEUtils.arrayEach(getElementsByTagName(rowNodes[0], 'Cell'), cellNode => {\n                    fields.push(cellNode.textContent);\n                });\n                XEUtils.arrayEach(rowNodes, (rowNode, index) => {\n                    if (index) {\n                        const item = {};\n                        const cellNodes = getElementsByTagName(rowNode, 'Cell');\n                        XEUtils.arrayEach(cellNodes, (cellNode, colIndex) => {\n                            if (fields[colIndex]) {\n                                item[fields[colIndex]] = cellNode.textContent;\n                            }\n                        });\n                        rows.push(item);\n                    }\n                });\n            }\n        }\n    }\n    return { fields, rows };\n}\nfunction clearColumnConvert(columns) {\n    XEUtils.eachTree(columns, (column) => {\n        delete column._level;\n        delete column._colSpan;\n        delete column._rowSpan;\n        delete column._children;\n        delete column.childNodes;\n    }, { children: 'children' });\n}\n/**\n * 检查导入的列是否完整\n * @param {Array} fields 字段名列表\n * @param {Array} rows 数据列表\n */\nfunction checkImportData(columns, fields) {\n    const tableFields = [];\n    columns.forEach((column) => {\n        const field = column.property;\n        if (field) {\n            tableFields.push(field);\n        }\n    });\n    return fields.some(field => tableFields.indexOf(field) > -1);\n}\nconst tableExportMethodKeys = ['exportData', 'importByFile', 'importData', 'saveFile', 'readFile', 'print', 'getPrintHtml', 'openImport', 'openExport', 'openPrint'];\nhooks.add('tableExportModule', {\n    setupTable($xeTable) {\n        const { props, reactData, internalData } = $xeTable;\n        const { computeTreeOpts, computePrintOpts, computeExportOpts, computeImportOpts, computeCustomOpts, computeSeqOpts, computeRadioOpts, computeCheckboxOpts, computeColumnOpts } = $xeTable.getComputeMaps();\n        const $xeGrid = inject('$xeGrid', null);\n        const hasTreeChildren = (row) => {\n            const treeOpts = computeTreeOpts.value;\n            const childrenField = treeOpts.children || treeOpts.childrenField;\n            return row[childrenField] && row[childrenField].length;\n        };\n        const getSeq = (cellValue, row, $rowIndex, column, $columnIndex) => {\n            const seqOpts = computeSeqOpts.value;\n            const seqMethod = seqOpts.seqMethod || column.seqMethod;\n            if (seqMethod) {\n                return seqMethod({\n                    row,\n                    rowIndex: $xeTable.getRowIndex(row),\n                    $rowIndex,\n                    column,\n                    columnIndex: $xeTable.getColumnIndex(column),\n                    $columnIndex\n                });\n            }\n            return cellValue;\n        };\n        function getHeaderTitle(opts, column) {\n            const columnOpts = computeColumnOpts.value;\n            const headExportMethod = column.headerExportMethod || columnOpts.headerExportMethod;\n            return headExportMethod ? headExportMethod({ column, options: opts, $table: $xeTable }) : ((opts.original ? column.property : column.getTitle()) || '');\n        }\n        const toBooleanValue = (cellValue) => {\n            return XEUtils.isBoolean(cellValue) ? (cellValue ? 'TRUE' : 'FALSE') : cellValue;\n        };\n        const getLabelData = (opts, columns, datas) => {\n            const { isAllExpand, mode } = opts;\n            const { treeConfig } = props;\n            const radioOpts = computeRadioOpts.value;\n            const checkboxOpts = computeCheckboxOpts.value;\n            const treeOpts = computeTreeOpts.value;\n            const columnOpts = computeColumnOpts.value;\n            if (!htmlCellElem) {\n                htmlCellElem = document.createElement('div');\n            }\n            if (treeConfig) {\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                // 如果是树表格只允许导出数据源\n                const rest = [];\n                const expandMaps = new Map();\n                XEUtils.eachTree(datas, (item, $rowIndex, items, path, parent, nodes) => {\n                    const row = item._row || item;\n                    const parentRow = parent && parent._row ? parent._row : parent;\n                    if ((isAllExpand || !parentRow || (expandMaps.has(parentRow) && $xeTable.isTreeExpandByRow(parentRow)))) {\n                        const hasRowChild = hasTreeChildren(row);\n                        const item = {\n                            _row: row,\n                            _level: nodes.length - 1,\n                            _hasChild: hasRowChild,\n                            _expand: hasRowChild && $xeTable.isTreeExpandByRow(row)\n                        };\n                        columns.forEach((column, $columnIndex) => {\n                            let cellValue = '';\n                            const renderOpts = column.editRender || column.cellRender;\n                            let bodyExportMethod = column.exportMethod;\n                            if (!bodyExportMethod && renderOpts && renderOpts.name) {\n                                const compConf = renderer.get(renderOpts.name);\n                                if (compConf) {\n                                    bodyExportMethod = compConf.tableExportMethod || compConf.exportMethod;\n                                }\n                            }\n                            if (!bodyExportMethod) {\n                                bodyExportMethod = columnOpts.exportMethod;\n                            }\n                            if (bodyExportMethod) {\n                                cellValue = bodyExportMethod({ $table: $xeTable, row, column, options: opts });\n                            }\n                            else {\n                                switch (column.type) {\n                                    case 'seq': {\n                                        const seqVal = path.map((num, i) => i % 2 === 0 ? (Number(num) + 1) : '.').join('');\n                                        cellValue = mode === 'all' ? seqVal : getSeq(seqVal, row, $rowIndex, column, $columnIndex);\n                                        break;\n                                    }\n                                    case 'checkbox':\n                                        cellValue = toBooleanValue($xeTable.isCheckedByCheckboxRow(row));\n                                        item._checkboxLabel = checkboxOpts.labelField ? XEUtils.get(row, checkboxOpts.labelField) : '';\n                                        item._checkboxDisabled = checkboxOpts.checkMethod && !checkboxOpts.checkMethod({ row });\n                                        break;\n                                    case 'radio':\n                                        cellValue = toBooleanValue($xeTable.isCheckedByRadioRow(row));\n                                        item._radioLabel = radioOpts.labelField ? XEUtils.get(row, radioOpts.labelField) : '';\n                                        item._radioDisabled = radioOpts.checkMethod && !radioOpts.checkMethod({ row });\n                                        break;\n                                    default:\n                                        if (opts.original) {\n                                            cellValue = getCellValue(row, column);\n                                        }\n                                        else {\n                                            cellValue = `${$xeTable.getCellLabel(row, column)}`;\n                                            if (column.type === 'html') {\n                                                htmlCellElem.innerHTML = cellValue;\n                                                cellValue = htmlCellElem.innerText.trim();\n                                            }\n                                            else {\n                                                const cell = $xeTable.getCellElement(row, column);\n                                                if (cell) {\n                                                    cellValue = cell.innerText.trim();\n                                                }\n                                            }\n                                        }\n                                }\n                            }\n                            item[column.id] = XEUtils.toValueString(cellValue);\n                        });\n                        expandMaps.set(row, 1);\n                        rest.push(Object.assign(item, row));\n                    }\n                }, { children: childrenField });\n                return rest;\n            }\n            return datas.map((row, $rowIndex) => {\n                const item = {\n                    _row: row\n                };\n                columns.forEach((column, $columnIndex) => {\n                    let cellValue = '';\n                    const renderOpts = column.editRender || column.cellRender;\n                    let exportLabelMethod = column.exportMethod;\n                    if (!exportLabelMethod && renderOpts && renderOpts.name) {\n                        const compConf = renderer.get(renderOpts.name);\n                        if (compConf) {\n                            exportLabelMethod = compConf.exportMethod;\n                        }\n                    }\n                    if (exportLabelMethod) {\n                        cellValue = exportLabelMethod({ $table: $xeTable, row, column, options: opts });\n                    }\n                    else {\n                        switch (column.type) {\n                            case 'seq': {\n                                const seqValue = $rowIndex + 1;\n                                cellValue = mode === 'all' ? seqValue : getSeq(seqValue, row, $rowIndex, column, $columnIndex);\n                                break;\n                            }\n                            case 'checkbox':\n                                cellValue = toBooleanValue($xeTable.isCheckedByCheckboxRow(row));\n                                item._checkboxLabel = checkboxOpts.labelField ? XEUtils.get(row, checkboxOpts.labelField) : '';\n                                item._checkboxDisabled = checkboxOpts.checkMethod && !checkboxOpts.checkMethod({ row });\n                                break;\n                            case 'radio':\n                                cellValue = toBooleanValue($xeTable.isCheckedByRadioRow(row));\n                                item._radioLabel = radioOpts.labelField ? XEUtils.get(row, radioOpts.labelField) : '';\n                                item._radioDisabled = radioOpts.checkMethod && !radioOpts.checkMethod({ row });\n                                break;\n                            default:\n                                if (opts.original) {\n                                    cellValue = getCellValue(row, column);\n                                }\n                                else {\n                                    cellValue = `${$xeTable.getCellLabel(row, column)}`;\n                                    if (column.type === 'html') {\n                                        htmlCellElem.innerHTML = cellValue;\n                                        cellValue = htmlCellElem.innerText.trim();\n                                    }\n                                    else {\n                                        const cell = $xeTable.getCellElement(row, column);\n                                        if (cell) {\n                                            cellValue = cell.innerText.trim();\n                                        }\n                                    }\n                                }\n                        }\n                    }\n                    item[column.id] = XEUtils.toValueString(cellValue);\n                });\n                return item;\n            });\n        };\n        const getExportData = (opts) => {\n            const { columns, dataFilterMethod } = opts;\n            let datas = opts.data;\n            if (dataFilterMethod) {\n                datas = datas.filter((row, index) => dataFilterMethod({ row, $rowIndex: index }));\n            }\n            return getLabelData(opts, columns, datas);\n        };\n        const getFooterCellValue = (opts, row, column) => {\n            const columnOpts = computeColumnOpts.value;\n            const renderOpts = column.editRender || column.cellRender;\n            let footLabelMethod = column.footerExportMethod;\n            if (!footLabelMethod && renderOpts && renderOpts.name) {\n                const compConf = renderer.get(renderOpts.name);\n                if (compConf) {\n                    footLabelMethod = compConf.tableFooterExportMethod || compConf.footerExportMethod;\n                }\n            }\n            if (!footLabelMethod) {\n                footLabelMethod = columnOpts.footerExportMethod;\n            }\n            const _columnIndex = $xeTable.getVTColumnIndex(column);\n            if (footLabelMethod) {\n                return footLabelMethod({ $table: $xeTable, items: row, itemIndex: _columnIndex, row, _columnIndex, column, options: opts });\n            }\n            // 兼容老模式\n            if (XEUtils.isArray(row)) {\n                return XEUtils.toValueString(row[_columnIndex]);\n            }\n            return XEUtils.get(row, column.field);\n        };\n        const toCsv = (opts, columns, datas) => {\n            let content = csvBOM;\n            if (opts.isHeader) {\n                content += columns.map((column) => toTxtCellLabel(getHeaderTitle(opts, column))).join(',') + enterSymbol;\n            }\n            datas.forEach((row) => {\n                content += columns.map((column) => toTxtCellLabel(getCsvCellTypeLabel(column, row[column.id]))).join(',') + enterSymbol;\n            });\n            if (opts.isFooter) {\n                const { footerTableData } = reactData;\n                const footers = getFooterData(opts, footerTableData);\n                footers.forEach((row) => {\n                    content += columns.map((column) => toTxtCellLabel(getFooterCellValue(opts, row, column))).join(',') + enterSymbol;\n                });\n            }\n            return content;\n        };\n        const toTxt = (opts, columns, datas) => {\n            let content = '';\n            if (opts.isHeader) {\n                content += columns.map((column) => toTxtCellLabel(getHeaderTitle(opts, column))).join('\\t') + enterSymbol;\n            }\n            datas.forEach((row) => {\n                content += columns.map((column) => toTxtCellLabel(row[column.id])).join('\\t') + enterSymbol;\n            });\n            if (opts.isFooter) {\n                const { footerTableData } = reactData;\n                const footers = getFooterData(opts, footerTableData);\n                footers.forEach((row) => {\n                    content += columns.map((column) => toTxtCellLabel(getFooterCellValue(opts, row, column))).join(',') + enterSymbol;\n                });\n            }\n            return content;\n        };\n        const hasEllipsis = (column, property, allColumnOverflow) => {\n            const columnOverflow = column[property];\n            const headOverflow = XEUtils.isUndefined(columnOverflow) || XEUtils.isNull(columnOverflow) ? allColumnOverflow : columnOverflow;\n            const showEllipsis = headOverflow === 'ellipsis';\n            const showTitle = headOverflow === 'title';\n            const showTooltip = headOverflow === true || headOverflow === 'tooltip';\n            let isEllipsis = showTitle || showTooltip || showEllipsis;\n            // 虚拟滚动不支持动态高度\n            const { scrollXLoad, scrollYLoad } = reactData;\n            if ((scrollXLoad || scrollYLoad) && !isEllipsis) {\n                isEllipsis = true;\n            }\n            return isEllipsis;\n        };\n        const toHtml = (opts, columns, datas) => {\n            const { id, border, treeConfig, headerAlign: allHeaderAlign, align: allAlign, footerAlign: allFooterAlign, showOverflow: allColumnOverflow, showHeaderOverflow: allColumnHeaderOverflow } = props;\n            const { isAllSelected, isIndeterminate, mergeList } = reactData;\n            const treeOpts = computeTreeOpts.value;\n            const { print: isPrint, isHeader, isFooter, isColgroup, isMerge, colgroups, original } = opts;\n            const allCls = 'check-all';\n            const clss = [\n                'vxe-table',\n                `border--${toTableBorder(border)}`,\n                isPrint ? 'is--print' : '',\n                isHeader ? 'is--header' : ''\n            ].filter(cls => cls);\n            const tables = [\n                `<table class=\"${clss.join(' ')}\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">`,\n                `<colgroup>${columns.map((column) => `<col style=\"width:${column.renderWidth}px\">`).join('')}</colgroup>`\n            ];\n            if (isHeader) {\n                tables.push('<thead>');\n                if (isColgroup && !original) {\n                    colgroups.forEach((cols) => {\n                        tables.push(`<tr>${cols.map((column) => {\n                            const headAlign = column.headerAlign || column.align || allHeaderAlign || allAlign;\n                            const classNames = hasEllipsis(column, 'showHeaderOverflow', allColumnHeaderOverflow) ? ['col--ellipsis'] : [];\n                            const cellTitle = getHeaderTitle(opts, column);\n                            let childWidth = 0;\n                            let countChild = 0;\n                            XEUtils.eachTree([column], item => {\n                                if (!item.childNodes || !column.childNodes.length) {\n                                    countChild++;\n                                }\n                                childWidth += item.renderWidth;\n                            }, { children: 'childNodes' });\n                            const cellWidth = childWidth - countChild;\n                            if (headAlign) {\n                                classNames.push(`col--${headAlign}`);\n                            }\n                            if (column.type === 'checkbox') {\n                                return `<th class=\"${classNames.join(' ')}\" colspan=\"${column._colSpan}\" rowspan=\"${column._rowSpan}\"><div ${isPrint ? '' : `style=\"width: ${cellWidth}px\"`}><input type=\"checkbox\" class=\"${allCls}\" ${isAllSelected ? 'checked' : ''}><span>${cellTitle}</span></div></th>`;\n                            }\n                            return `<th class=\"${classNames.join(' ')}\" colspan=\"${column._colSpan}\" rowspan=\"${column._rowSpan}\" title=\"${cellTitle}\"><div ${isPrint ? '' : `style=\"width: ${cellWidth}px\"`}><span>${formatText(cellTitle, true)}</span></div></th>`;\n                        }).join('')}</tr>`);\n                    });\n                }\n                else {\n                    tables.push(`<tr>${columns.map((column) => {\n                        const headAlign = column.headerAlign || column.align || allHeaderAlign || allAlign;\n                        const classNames = hasEllipsis(column, 'showHeaderOverflow', allColumnHeaderOverflow) ? ['col--ellipsis'] : [];\n                        const cellTitle = getHeaderTitle(opts, column);\n                        if (headAlign) {\n                            classNames.push(`col--${headAlign}`);\n                        }\n                        if (column.type === 'checkbox') {\n                            return `<th class=\"${classNames.join(' ')}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><input type=\"checkbox\" class=\"${allCls}\" ${isAllSelected ? 'checked' : ''}><span>${cellTitle}</span></div></th>`;\n                        }\n                        return `<th class=\"${classNames.join(' ')}\" title=\"${cellTitle}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><span>${formatText(cellTitle, true)}</span></div></th>`;\n                    }).join('')}</tr>`);\n                }\n                tables.push('</thead>');\n            }\n            if (datas.length) {\n                tables.push('<tbody>');\n                if (treeConfig) {\n                    datas.forEach((item) => {\n                        tables.push('<tr>' + columns.map((column) => {\n                            const cellAlign = column.align || allAlign;\n                            const classNames = hasEllipsis(column, 'showOverflow', allColumnOverflow) ? ['col--ellipsis'] : [];\n                            const cellValue = item[column.id];\n                            if (cellAlign) {\n                                classNames.push(`col--${cellAlign}`);\n                            }\n                            if (column.treeNode) {\n                                let treeIcon = '';\n                                if (item._hasChild) {\n                                    treeIcon = `<i class=\"${item._expand ? 'vxe-table--tree-fold-icon' : 'vxe-table--tree-unfold-icon'}\"></i>`;\n                                }\n                                classNames.push('vxe-table--tree-node');\n                                if (column.type === 'radio') {\n                                    return `<td class=\"${classNames.join(' ')}\" title=\"${cellValue}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><div class=\"vxe-table--tree-node-wrapper\" style=\"padding-left: ${item._level * treeOpts.indent}px\"><div class=\"vxe-table--tree-icon-wrapper\">${treeIcon}</div><div class=\"vxe-table--tree-cell\"><input type=\"radio\" name=\"radio_${id}\" ${item._radioDisabled ? 'disabled ' : ''}${getBooleanValue(cellValue) ? 'checked' : ''}><span>${item._radioLabel}</span></div></div></div></td>`;\n                                }\n                                else if (column.type === 'checkbox') {\n                                    return `<td class=\"${classNames.join(' ')}\" title=\"${cellValue}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><div class=\"vxe-table--tree-node-wrapper\" style=\"padding-left: ${item._level * treeOpts.indent}px\"><div class=\"vxe-table--tree-icon-wrapper\">${treeIcon}</div><div class=\"vxe-table--tree-cell\"><input type=\"checkbox\" ${item._checkboxDisabled ? 'disabled ' : ''}${getBooleanValue(cellValue) ? 'checked' : ''}><span>${item._checkboxLabel}</span></div></div></div></td>`;\n                                }\n                                return `<td class=\"${classNames.join(' ')}\" title=\"${cellValue}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><div class=\"vxe-table--tree-node-wrapper\" style=\"padding-left: ${item._level * treeOpts.indent}px\"><div class=\"vxe-table--tree-icon-wrapper\">${treeIcon}</div><div class=\"vxe-table--tree-cell\">${cellValue}</div></div></div></td>`;\n                            }\n                            if (column.type === 'radio') {\n                                return `<td class=\"${classNames.join(' ')}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><input type=\"radio\" name=\"radio_${id}\" ${item._radioDisabled ? 'disabled ' : ''}${getBooleanValue(cellValue) ? 'checked' : ''}><span>${item._radioLabel}</span></div></td>`;\n                            }\n                            else if (column.type === 'checkbox') {\n                                return `<td class=\"${classNames.join(' ')}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><input type=\"checkbox\" ${item._checkboxDisabled ? 'disabled ' : ''}${getBooleanValue(cellValue) ? 'checked' : ''}><span>${item._checkboxLabel}</span></div></td>`;\n                            }\n                            return `<td class=\"${classNames.join(' ')}\" title=\"${cellValue}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}>${formatText(cellValue, true)}</div></td>`;\n                        }).join('') + '</tr>');\n                    });\n                }\n                else {\n                    datas.forEach((item) => {\n                        tables.push('<tr>' + columns.map((column) => {\n                            const cellAlign = column.align || allAlign;\n                            const classNames = hasEllipsis(column, 'showOverflow', allColumnOverflow) ? ['col--ellipsis'] : [];\n                            const cellValue = item[column.id];\n                            let rowSpan = 1;\n                            let colSpan = 1;\n                            if (isMerge && mergeList.length) {\n                                const _rowIndex = $xeTable.getVTRowIndex(item._row);\n                                const _columnIndex = $xeTable.getVTColumnIndex(column);\n                                const spanRest = mergeBodyMethod(mergeList, _rowIndex, _columnIndex);\n                                if (spanRest) {\n                                    const { rowspan, colspan } = spanRest;\n                                    if (!rowspan || !colspan) {\n                                        return '';\n                                    }\n                                    if (rowspan > 1) {\n                                        rowSpan = rowspan;\n                                    }\n                                    if (colspan > 1) {\n                                        colSpan = colspan;\n                                    }\n                                }\n                            }\n                            if (cellAlign) {\n                                classNames.push(`col--${cellAlign}`);\n                            }\n                            if (column.type === 'radio') {\n                                return `<td class=\"${classNames.join(' ')}\" rowspan=\"${rowSpan}\" colspan=\"${colSpan}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><input type=\"radio\" name=\"radio_${id}\" ${item._radioDisabled ? 'disabled ' : ''}${getBooleanValue(cellValue) ? 'checked' : ''}><span>${item._radioLabel}</span></div></td>`;\n                            }\n                            else if (column.type === 'checkbox') {\n                                return `<td class=\"${classNames.join(' ')}\" rowspan=\"${rowSpan}\" colspan=\"${colSpan}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><input type=\"checkbox\" ${item._checkboxDisabled ? 'disabled ' : ''}${getBooleanValue(cellValue) ? 'checked' : ''}><span>${item._checkboxLabel}</span></div></td>`;\n                            }\n                            return `<td class=\"${classNames.join(' ')}\" rowspan=\"${rowSpan}\" colspan=\"${colSpan}\" title=\"${cellValue}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}>${formatText(cellValue, true)}</div></td>`;\n                        }).join('') + '</tr>');\n                    });\n                }\n                tables.push('</tbody>');\n            }\n            if (isFooter) {\n                const { footerTableData } = reactData;\n                const footers = getFooterData(opts, footerTableData);\n                if (footers.length) {\n                    tables.push('<tfoot>');\n                    footers.forEach((row) => {\n                        tables.push(`<tr>${columns.map((column) => {\n                            const footAlign = column.footerAlign || column.align || allFooterAlign || allAlign;\n                            const classNames = hasEllipsis(column, 'showOverflow', allColumnOverflow) ? ['col--ellipsis'] : [];\n                            const cellValue = getFooterCellValue(opts, row, column);\n                            if (footAlign) {\n                                classNames.push(`col--${footAlign}`);\n                            }\n                            return `<td class=\"${classNames.join(' ')}\" title=\"${cellValue}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}>${formatText(cellValue, true)}</div></td>`;\n                        }).join('')}</tr>`);\n                    });\n                    tables.push('</tfoot>');\n                }\n            }\n            // 是否半选状态\n            const script = !isAllSelected && isIndeterminate ? `<script>(function(){var a=document.querySelector(\".${allCls}\");if(a){a.indeterminate=true}})()</script>` : '';\n            tables.push('</table>', script);\n            return isPrint ? tables.join('') : createHtmlPage(opts, tables.join(''));\n        };\n        const toXML = (opts, columns, datas) => {\n            let xml = [\n                '<?xml version=\"1.0\"?>',\n                '<?mso-application progid=\"Excel.Sheet\"?>',\n                '<Workbook xmlns=\"urn:schemas-microsoft-com:office:spreadsheet\" xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns:ss=\"urn:schemas-microsoft-com:office:spreadsheet\" xmlns:html=\"http://www.w3.org/TR/REC-html40\">',\n                '<DocumentProperties xmlns=\"urn:schemas-microsoft-com:office:office\">',\n                '<Version>16.00</Version>',\n                '</DocumentProperties>',\n                '<ExcelWorkbook xmlns=\"urn:schemas-microsoft-com:office:excel\">',\n                '<WindowHeight>7920</WindowHeight>',\n                '<WindowWidth>21570</WindowWidth>',\n                '<WindowTopX>32767</WindowTopX>',\n                '<WindowTopY>32767</WindowTopY>',\n                '<ProtectStructure>False</ProtectStructure>',\n                '<ProtectWindows>False</ProtectWindows>',\n                '</ExcelWorkbook>',\n                `<Worksheet ss:Name=\"${opts.sheetName}\">`,\n                '<Table>',\n                columns.map((column) => `<Column ss:Width=\"${column.renderWidth}\"/>`).join('')\n            ].join('');\n            if (opts.isHeader) {\n                xml += `<Row>${columns.map((column) => `<Cell><Data ss:Type=\"String\">${getHeaderTitle(opts, column)}</Data></Cell>`).join('')}</Row>`;\n            }\n            datas.forEach((row) => {\n                xml += '<Row>' + columns.map((column) => `<Cell><Data ss:Type=\"String\">${row[column.id]}</Data></Cell>`).join('') + '</Row>';\n            });\n            if (opts.isFooter) {\n                const { footerTableData } = reactData;\n                const footers = getFooterData(opts, footerTableData);\n                footers.forEach((row) => {\n                    xml += `<Row>${columns.map((column) => `<Cell><Data ss:Type=\"String\">${getFooterCellValue(opts, row, column)}</Data></Cell>`).join('')}</Row>`;\n                });\n            }\n            return `${xml}</Table></Worksheet></Workbook>`;\n        };\n        const getContent = (opts, columns, datas) => {\n            if (columns.length) {\n                switch (opts.type) {\n                    case 'csv':\n                        return toCsv(opts, columns, datas);\n                    case 'txt':\n                        return toTxt(opts, columns, datas);\n                    case 'html':\n                        return toHtml(opts, columns, datas);\n                    case 'xml':\n                        return toXML(opts, columns, datas);\n                }\n            }\n            return '';\n        };\n        const downloadFile = (opts, content) => {\n            const { filename, type, download } = opts;\n            if (!download) {\n                const blob = getExportBlobByContent(content, opts);\n                return Promise.resolve({ type, content, blob });\n            }\n            if (VxeUI.saveFile) {\n                VxeUI.saveFile({ filename, type, content }).then(() => {\n                    if (opts.message !== false) {\n                        if (VxeUI.modal) {\n                            VxeUI.modal.message({ content: getI18n('vxe.table.expSuccess'), status: 'success' });\n                        }\n                    }\n                });\n            }\n        };\n        const handleExport = (opts) => {\n            const { remote, columns, colgroups, exportMethod, afterExportMethod } = opts;\n            return new Promise(resolve => {\n                if (remote) {\n                    const params = { options: opts, $table: $xeTable, $grid: $xeGrid };\n                    resolve(exportMethod ? exportMethod(params) : params);\n                }\n                else {\n                    const datas = getExportData(opts);\n                    resolve($xeTable.preventEvent(null, 'event.export', { options: opts, columns, colgroups, datas }, () => {\n                        return downloadFile(opts, getContent(opts, columns, datas));\n                    }));\n                }\n            }).then((params) => {\n                clearColumnConvert(columns);\n                if (!opts.print) {\n                    if (afterExportMethod) {\n                        afterExportMethod({ status: true, options: opts, $table: $xeTable, $grid: $xeGrid });\n                    }\n                }\n                return Object.assign({ status: true }, params);\n            }).catch(() => {\n                clearColumnConvert(columns);\n                if (!opts.print) {\n                    if (afterExportMethod) {\n                        afterExportMethod({ status: false, options: opts, $table: $xeTable, $grid: $xeGrid });\n                    }\n                }\n                const params = { status: false };\n                return Promise.reject(params);\n            });\n        };\n        const handleImport = (content, opts) => {\n            const { tableFullColumn, _importResolve, _importReject } = internalData;\n            let rest = { fields: [], rows: [] };\n            switch (opts.type) {\n                case 'csv':\n                    rest = parseCsv(tableFullColumn, content);\n                    break;\n                case 'txt':\n                    rest = parseTxt(tableFullColumn, content);\n                    break;\n                case 'html':\n                    rest = parseHTML(tableFullColumn, content);\n                    break;\n                case 'xml':\n                    rest = parseXML(tableFullColumn, content);\n                    break;\n            }\n            const { fields, rows } = rest;\n            const status = checkImportData(tableFullColumn, fields);\n            if (status) {\n                $xeTable.createData(rows)\n                    .then((data) => {\n                    let loadRest;\n                    if (opts.mode === 'insert' || opts.mode === 'insertBottom') {\n                        loadRest = $xeTable.insertAt(data, -1);\n                    }\n                    if (opts.mode === 'insertTop') {\n                        loadRest = $xeTable.insert(data);\n                    }\n                    else {\n                        loadRest = $xeTable.reloadData(data);\n                    }\n                    if (opts.message !== false) {\n                        if (VxeUI.modal) {\n                            VxeUI.modal.message({ content: getI18n('vxe.table.impSuccess', [rows.length]), status: 'success' });\n                        }\n                    }\n                    return loadRest.then(() => {\n                        if (_importResolve) {\n                            _importResolve({ status: true });\n                        }\n                    });\n                });\n            }\n            else if (opts.message !== false) {\n                if (VxeUI.modal) {\n                    VxeUI.modal.message({ content: getI18n('vxe.error.impFields'), status: 'error' });\n                }\n                if (_importReject) {\n                    _importReject({ status: false });\n                }\n            }\n        };\n        const handleFileImport = (file, opts) => {\n            const { importMethod, afterImportMethod } = opts;\n            const { type, filename } = parseFile(file);\n            const importOpts = computeImportOpts.value;\n            // 检查类型，如果为自定义导出，则不需要校验类型\n            if (!importMethod && !XEUtils.includes(XEUtils.keys(importOpts._typeMaps), type)) {\n                if (opts.message !== false) {\n                    if (VxeUI.modal) {\n                        VxeUI.modal.message({ content: getI18n('vxe.error.notType', [type]), status: 'error' });\n                    }\n                }\n                const params = { status: false };\n                return Promise.reject(params);\n            }\n            const rest = new Promise((resolve, reject) => {\n                const _importResolve = (params) => {\n                    resolve(params);\n                    internalData._importResolve = null;\n                    internalData._importReject = null;\n                };\n                const _importReject = (params) => {\n                    reject(params);\n                    internalData._importResolve = null;\n                    internalData._importReject = null;\n                };\n                internalData._importResolve = _importResolve;\n                internalData._importReject = _importReject;\n                if (window.FileReader) {\n                    const options = Object.assign({ mode: 'insertTop' }, opts, { type, filename });\n                    if (options.remote) {\n                        if (importMethod) {\n                            Promise.resolve(importMethod({ file, options, $table: $xeTable })).then(() => {\n                                _importResolve({ status: true });\n                            }).catch(() => {\n                                _importResolve({ status: true });\n                            });\n                        }\n                        else {\n                            _importResolve({ status: true });\n                        }\n                    }\n                    else {\n                        const { tableFullColumn } = internalData;\n                        $xeTable.preventEvent(null, 'event.import', { file, options, columns: tableFullColumn }, () => {\n                            const reader = new FileReader();\n                            reader.onerror = () => {\n                                errLog('vxe.error.notType', [type]);\n                                _importReject({ status: false });\n                            };\n                            reader.onload = (e) => {\n                                handleImport(e.target.result, options);\n                            };\n                            reader.readAsText(file, options.encoding || 'UTF-8');\n                        });\n                    }\n                }\n                else {\n                    // 不支持的浏览器\n                    if (process.env.NODE_ENV === 'development') {\n                        errLog('vxe.error.notExp');\n                    }\n                    _importResolve({ status: true });\n                }\n            });\n            return rest.then(() => {\n                if (afterImportMethod) {\n                    afterImportMethod({ status: true, options: opts, $table: $xeTable });\n                }\n            }).catch((e) => {\n                if (afterImportMethod) {\n                    afterImportMethod({ status: false, options: opts, $table: $xeTable });\n                }\n                return Promise.reject(e);\n            });\n        };\n        const handleExportAndPrint = (options, isPrint) => {\n            const { treeConfig, showHeader, showFooter } = props;\n            const { initStore, mergeList, isGroup, footerTableData, exportStore, exportParams } = reactData;\n            const { collectColumn } = internalData;\n            const exportOpts = computeExportOpts.value;\n            const hasTree = treeConfig;\n            const customOpts = computeCustomOpts.value;\n            const selectRecords = $xeTable.getCheckboxRecords();\n            const proxyOpts = $xeGrid ? $xeGrid.getComputeMaps().computeProxyOpts.value : {};\n            const hasFooter = !!footerTableData.length;\n            const hasMerge = !hasTree && mergeList.length;\n            const defOpts = Object.assign({\n                message: true,\n                isHeader: showHeader,\n                isFooter: showFooter,\n                current: 'current',\n                modes: ['current', 'selected'].concat(proxyOpts.ajax && proxyOpts.ajax.queryAll ? ['all'] : [])\n            }, options);\n            const types = defOpts.types || XEUtils.keys(exportOpts._typeMaps);\n            const modes = defOpts.modes || [];\n            const checkMethod = customOpts.checkMethod;\n            const exportColumns = collectColumn.slice(0);\n            const { columns } = defOpts;\n            // 处理类型\n            const typeList = types.map((value) => {\n                return {\n                    value,\n                    label: getI18n(`vxe.export.types.${value}`)\n                };\n            });\n            const modeList = modes.map((item) => {\n                if (item && item.value) {\n                    return {\n                        value: item.value,\n                        label: item.label || item.value\n                    };\n                }\n                return {\n                    value: item,\n                    label: getI18n(`vxe.export.modes.${item}`)\n                };\n            });\n            // 默认选中\n            XEUtils.eachTree(exportColumns, (column, index, items, path, parent) => {\n                const isColGroup = column.children && column.children.length;\n                if (isColGroup || defaultFilterExportColumn(column)) {\n                    column.checked = columns\n                        ? columns.some((item) => {\n                            if (isColumnInfo(item)) {\n                                return column === item;\n                            }\n                            else if (XEUtils.isString(item)) {\n                                return column.field === item;\n                            }\n                            else {\n                                const colid = item.id || item.colId;\n                                const type = item.type;\n                                const field = item.property || item.field;\n                                if (colid) {\n                                    return column.id === colid;\n                                }\n                                else if (field && type) {\n                                    return column.property === field && column.type === type;\n                                }\n                                else if (field) {\n                                    return column.property === field;\n                                }\n                                else if (type) {\n                                    return column.type === type;\n                                }\n                            }\n                            return false;\n                        })\n                        : column.visible;\n                    column.halfChecked = false;\n                    column.disabled = (parent && parent.disabled) || (checkMethod ? !checkMethod({ column }) : false);\n                }\n            });\n            // 更新条件\n            Object.assign(exportStore, {\n                columns: exportColumns,\n                typeList,\n                modeList,\n                hasFooter,\n                hasMerge,\n                hasTree,\n                isPrint,\n                hasColgroup: isGroup,\n                visible: true\n            });\n            // 默认参数\n            Object.assign(exportParams, {\n                mode: selectRecords.length ? 'selected' : 'current'\n            }, defOpts);\n            if (!modeList.some(item => item.value === exportParams.mode)) {\n                exportParams.mode = modeList[0].value;\n            }\n            if (!typeList.some(item => item.value === exportParams.type)) {\n                exportParams.type = typeList[0].value;\n            }\n            initStore.export = true;\n            return nextTick();\n        };\n        const exportMethods = {\n            /**\n             * 导出文件，支持 csv/html/xml/txt\n             * 如果是树表格，则默认是导出所有节点\n             * 如果是启用了虚拟滚动，则只能导出数据源，可以配合 dataFilterMethod 函数自行转换数据\n             * @param {Object} options 参数\n             */\n            exportData(options) {\n                const { treeConfig } = props;\n                const { isGroup, tableGroupColumn } = reactData;\n                const { tableFullColumn, afterFullData } = internalData;\n                const exportOpts = computeExportOpts.value;\n                const treeOpts = computeTreeOpts.value;\n                const opts = Object.assign({\n                    // filename: '',\n                    // sheetName: '',\n                    // original: false,\n                    // message: false,\n                    isHeader: true,\n                    isFooter: true,\n                    isColgroup: true,\n                    // isMerge: false,\n                    // isAllExpand: false,\n                    download: true,\n                    type: 'csv',\n                    mode: 'current'\n                    // data: null,\n                    // remote: false,\n                    // dataFilterMethod: null,\n                    // footerFilterMethod: null,\n                    // exportMethod: null,\n                    // columnFilterMethod: null,\n                    // beforeExportMethod: null,\n                    // afterExportMethod: null\n                }, exportOpts, {\n                    print: false\n                }, options);\n                const { type, mode, columns, original, beforeExportMethod } = opts;\n                let groups = [];\n                const customCols = columns && columns.length ? columns : null;\n                let columnFilterMethod = opts.columnFilterMethod;\n                // 如果设置源数据，则默认导出设置了字段的列\n                if (!customCols && !columnFilterMethod) {\n                    columnFilterMethod = original ? ({ column }) => column.property : ({ column }) => defaultFilterExportColumn(column);\n                }\n                if (customCols) {\n                    opts._isCustomColumn = true;\n                    groups = XEUtils.searchTree(XEUtils.mapTree(customCols, (item) => {\n                        let targetColumn;\n                        if (item) {\n                            if (isColumnInfo(item)) {\n                                targetColumn = item;\n                            }\n                            else if (XEUtils.isString(item)) {\n                                targetColumn = $xeTable.getColumnByField(item);\n                            }\n                            else {\n                                const colid = item.id || item.colId;\n                                const type = item.type;\n                                const field = item.property || item.field;\n                                if (colid) {\n                                    targetColumn = $xeTable.getColumnById(colid);\n                                }\n                                else if (field && type) {\n                                    targetColumn = tableFullColumn.find((column) => column.property === field && column.type === type);\n                                }\n                                else if (field) {\n                                    targetColumn = $xeTable.getColumnByField(field);\n                                }\n                                else if (type) {\n                                    targetColumn = tableFullColumn.find((column) => column.type === type);\n                                }\n                            }\n                            return targetColumn || {};\n                        }\n                    }, {\n                        children: 'childNodes',\n                        mapChildren: '_children'\n                    }), (column, index) => isColumnInfo(column) && (!columnFilterMethod || columnFilterMethod({ column: column, $columnIndex: index })), {\n                        children: '_children',\n                        mapChildren: 'childNodes',\n                        original: true\n                    });\n                }\n                else {\n                    groups = XEUtils.searchTree(isGroup ? tableGroupColumn : tableFullColumn, (column, index) => column.visible && (!columnFilterMethod || columnFilterMethod({ column, $columnIndex: index })), { children: 'children', mapChildren: 'childNodes', original: true });\n                }\n                // 获取所有列\n                const cols = [];\n                XEUtils.eachTree(groups, column => {\n                    const isColGroup = column.children && column.children.length;\n                    if (!isColGroup) {\n                        cols.push(column);\n                    }\n                }, { children: 'childNodes' });\n                // 构建分组层级\n                opts.columns = cols;\n                opts.colgroups = convertToRows(groups);\n                if (!opts.filename) {\n                    opts.filename = getI18n(opts.original ? 'vxe.table.expOriginFilename' : 'vxe.table.expFilename', [XEUtils.toDateString(Date.now(), 'yyyyMMddHHmmss')]);\n                }\n                if (!opts.sheetName) {\n                    opts.sheetName = document.title;\n                }\n                // 检查类型，如果为自定义导出，则不需要校验类型\n                if (!opts.exportMethod && !XEUtils.includes(XEUtils.keys(exportOpts._typeMaps), type)) {\n                    if (process.env.NODE_ENV === 'development') {\n                        errLog('vxe.error.notType', [type]);\n                    }\n                    const params = { status: false };\n                    return Promise.reject(params);\n                }\n                if (!opts.print) {\n                    if (beforeExportMethod) {\n                        beforeExportMethod({ options: opts, $table: $xeTable, $grid: $xeGrid });\n                    }\n                }\n                if (!opts.data) {\n                    opts.data = [];\n                    if (mode === 'selected') {\n                        const selectRecords = $xeTable.getCheckboxRecords();\n                        if (['html', 'pdf'].indexOf(type) > -1 && treeConfig) {\n                            opts.data = XEUtils.searchTree($xeTable.getTableData().fullData, item => $xeTable.findRowIndexOf(selectRecords, item) > -1, Object.assign({}, treeOpts, { data: '_row' }));\n                        }\n                        else {\n                            opts.data = selectRecords;\n                        }\n                    }\n                    else if (mode === 'all') {\n                        if (process.env.NODE_ENV === 'development') {\n                            if (!$xeGrid) {\n                                warnLog('vxe.error.errProp', ['all', 'mode=current,selected']);\n                            }\n                        }\n                        if ($xeGrid && !opts.remote) {\n                            const { reactData: gridReactData } = $xeGrid;\n                            const { computeProxyOpts } = $xeGrid.getComputeMaps();\n                            const { sortData } = gridReactData;\n                            const proxyOpts = computeProxyOpts.value;\n                            const { beforeQueryAll, afterQueryAll, ajax = {}, props = {} } = proxyOpts;\n                            const ajaxMethods = ajax.queryAll;\n                            const queryAllSuccessMethods = ajax.queryAllSuccess;\n                            const queryAllErrorMethods = ajax.queryAllError;\n                            if (process.env.NODE_ENV === 'development') {\n                                if (!ajaxMethods) {\n                                    warnLog('vxe.error.notFunc', ['proxy-config.ajax.queryAll']);\n                                }\n                            }\n                            if (ajaxMethods) {\n                                const params = {\n                                    $table: $xeTable,\n                                    $grid: $xeGrid,\n                                    sort: sortData.length ? sortData[0] : {},\n                                    sorts: sortData,\n                                    filters: gridReactData.filterData,\n                                    form: gridReactData.formData,\n                                    options: opts\n                                };\n                                return Promise.resolve((beforeQueryAll || ajaxMethods)(params))\n                                    .then(rest => {\n                                    opts.data = (props.list ? XEUtils.get(rest, props.list) : rest) || [];\n                                    if (afterQueryAll) {\n                                        afterQueryAll(params);\n                                    }\n                                    if (queryAllSuccessMethods) {\n                                        queryAllSuccessMethods(Object.assign(Object.assign({}, params), { response: rest }));\n                                    }\n                                    return handleExport(opts);\n                                })\n                                    .catch((rest) => {\n                                    if (queryAllErrorMethods) {\n                                        queryAllErrorMethods(Object.assign(Object.assign({}, params), { response: rest }));\n                                    }\n                                });\n                            }\n                        }\n                    }\n                    else if (mode === 'current') {\n                        opts.data = afterFullData;\n                    }\n                }\n                return handleExport(opts);\n            },\n            importByFile(file, options) {\n                const opts = Object.assign({}, options);\n                const { beforeImportMethod } = opts;\n                if (beforeImportMethod) {\n                    beforeImportMethod({ options: opts, $table: $xeTable });\n                }\n                return handleFileImport(file, opts);\n            },\n            importData(options) {\n                const importOpts = computeImportOpts.value;\n                const opts = Object.assign({\n                    types: XEUtils.keys(importOpts._typeMaps)\n                    // beforeImportMethod: null,\n                    // afterImportMethod: null\n                }, importOpts, options);\n                const { beforeImportMethod, afterImportMethod } = opts;\n                if (beforeImportMethod) {\n                    beforeImportMethod({ options: opts, $table: $xeTable });\n                }\n                return VxeUI.readFile(opts).catch(e => {\n                    if (afterImportMethod) {\n                        afterImportMethod({ status: false, options: opts, $table: $xeTable });\n                    }\n                    return Promise.reject(e);\n                }).then((params) => {\n                    const { file } = params;\n                    return handleFileImport(file, opts);\n                });\n            },\n            saveFile(options) {\n                return VxeUI.saveFile(options);\n            },\n            readFile(options) {\n                return VxeUI.readFile(options);\n            },\n            print(options) {\n                const printOpts = computePrintOpts.value;\n                const opts = Object.assign({\n                    original: false\n                    // beforePrintMethod\n                }, printOpts, options, {\n                    type: 'html',\n                    download: false,\n                    remote: false,\n                    print: true\n                });\n                if (!opts.sheetName) {\n                    opts.sheetName = document.title;\n                }\n                const beforePrintMethod = opts.beforePrintMethod;\n                const tableHtml = opts.html || opts.content;\n                return new Promise((resolve, reject) => {\n                    if (VxeUI.print) {\n                        if (tableHtml) {\n                            resolve(VxeUI.print({\n                                title: opts.sheetName,\n                                html: tableHtml,\n                                customStyle: opts.style,\n                                beforeMethod: beforePrintMethod\n                                    ? ({ html }) => {\n                                        return beforePrintMethod({\n                                            html,\n                                            content: html,\n                                            options: opts,\n                                            $table: $xeTable\n                                        });\n                                    }\n                                    : undefined\n                            }));\n                        }\n                        else {\n                            resolve(exportMethods.exportData(opts).then(({ content }) => {\n                                return VxeUI.print({\n                                    title: opts.sheetName,\n                                    html: content,\n                                    customStyle: opts.style,\n                                    beforeMethod: beforePrintMethod\n                                        ? ({ html }) => {\n                                            return beforePrintMethod({\n                                                html,\n                                                content: html,\n                                                options: opts,\n                                                $table: $xeTable\n                                            });\n                                        }\n                                        : undefined\n                                });\n                            }));\n                        }\n                    }\n                    else {\n                        const e = { status: false };\n                        reject(e);\n                    }\n                });\n            },\n            getPrintHtml(options) {\n                const printOpts = computePrintOpts.value;\n                const opts = Object.assign({\n                    original: false\n                    // beforePrintMethod\n                }, printOpts, options, {\n                    type: 'html',\n                    download: false,\n                    remote: false,\n                    print: true\n                });\n                return exportMethods.exportData(opts).then(({ content }) => {\n                    return {\n                        html: content\n                    };\n                });\n            },\n            openImport(options) {\n                const { treeConfig, importConfig } = props;\n                const { initStore, importStore, importParams } = reactData;\n                const importOpts = computeImportOpts.value;\n                const defOpts = Object.assign({\n                    mode: 'insertTop',\n                    message: true,\n                    types: XEUtils.keys(importOpts._typeMaps),\n                    modes: ['insertTop', 'covering']\n                }, importOpts, options);\n                const types = defOpts.types || [];\n                const modes = defOpts.modes || [];\n                const isTree = !!treeConfig;\n                if (isTree) {\n                    if (defOpts.message) {\n                        if (VxeUI.modal) {\n                            VxeUI.modal.message({ content: getI18n('vxe.error.treeNotImp'), status: 'error' });\n                        }\n                    }\n                    return;\n                }\n                if (!importConfig) {\n                    errLog('vxe.error.reqProp', ['import-config']);\n                }\n                // 处理类型\n                const typeList = types.map((value) => {\n                    return {\n                        value,\n                        label: getI18n(`vxe.export.types.${value}`)\n                    };\n                });\n                const modeList = modes.map((item) => {\n                    if (item && item.value) {\n                        return {\n                            value: item.value,\n                            label: item.label || item.value\n                        };\n                    }\n                    return {\n                        value: item,\n                        label: getI18n(`vxe.import.modes.${item}`)\n                    };\n                });\n                Object.assign(importStore, {\n                    file: null,\n                    type: '',\n                    filename: '',\n                    modeList,\n                    typeList,\n                    visible: true\n                });\n                Object.assign(importParams, defOpts);\n                if (!modeList.some(item => item.value === importParams.mode)) {\n                    importParams.mode = modeList[0].value;\n                }\n                initStore.import = true;\n            },\n            openExport(options) {\n                const exportOpts = computeExportOpts.value;\n                const defOpts = Object.assign({\n                    message: true,\n                    types: XEUtils.keys(exportOpts._typeMaps)\n                }, exportOpts, options);\n                if (process.env.NODE_ENV === 'development') {\n                    if (!props.exportConfig) {\n                        errLog('vxe.error.reqProp', ['export-config']);\n                    }\n                }\n                handleExportAndPrint(defOpts);\n            },\n            openPrint(options) {\n                const printOpts = computePrintOpts.value;\n                const defOpts = Object.assign({\n                    message: true\n                }, printOpts, options);\n                if (process.env.NODE_ENV === 'development') {\n                    if (!props.printConfig) {\n                        errLog('vxe.error.reqProp', ['print-config']);\n                    }\n                }\n                handleExportAndPrint(defOpts, true);\n            }\n        };\n        return exportMethods;\n    },\n    setupGrid($xeGrid) {\n        return $xeGrid.extendTableMethods(tableExportMethodKeys);\n    }\n});\n", "// 默认导出或打印的 HTML 样式\nconst defaultHtmlStyle = 'body{margin:0;padding: 0 1px;color:#333333;font-size:14px;font-family:\"Microsoft YaHei\",微软雅黑,\"MicrosoftJhengHei\",华文细黑,STHeiti,MingLiu}body *{-webkit-box-sizing:border-box;box-sizing:border-box}.vxe-table{border-collapse:collapse;text-align:left;border-spacing:0}.vxe-table:not(.is--print){table-layout:fixed}.vxe-table,.vxe-table th,.vxe-table td,.vxe-table td{border-color:#D0D0D0;border-style:solid;border-width:0}.vxe-table.is--print{width:100%}.border--default,.border--full,.border--outer{border-top-width:1px}.border--default,.border--full,.border--outer{border-left-width:1px}.border--outer,.border--default th,.border--default td,.border--full th,.border--full td,.border--outer th,.border--inner th,.border--inner td{border-bottom-width:1px}.border--default,.border--outer,.border--full th,.border--full td{border-right-width:1px}.border--default th,.border--full th,.border--outer th{background-color:#f8f8f9}.vxe-table td>div,.vxe-table th>div{padding:.5em .4em}.col--center{text-align:center}.col--right{text-align:right}.vxe-table:not(.is--print) .col--ellipsis>div{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;word-break:break-all}.vxe-table--tree-node{text-align:left}.vxe-table--tree-node-wrapper{position:relative}.vxe-table--tree-icon-wrapper{position:absolute;top:50%;width:1em;height:1em;text-align:center;-webkit-transform:translateY(-50%);transform:translateY(-50%);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer}.vxe-table--tree-unfold-icon,.vxe-table--tree-fold-icon{position:absolute;width:0;height:0;border-style:solid;border-width:.5em;border-right-color:transparent;border-bottom-color:transparent}.vxe-table--tree-unfold-icon{left:.3em;top:0;border-left-color:#939599;border-top-color:transparent}.vxe-table--tree-fold-icon{left:0;top:.3em;border-left-color:transparent;border-top-color:#939599}.vxe-table--tree-cell{display:block;padding-left:1.5em}.vxe-table input[type=\"checkbox\"]{margin:0}.vxe-table input[type=\"checkbox\"],.vxe-table input[type=\"radio\"],.vxe-table input[type=\"checkbox\"]+span,.vxe-table input[type=\"radio\"]+span{vertical-align:middle;padding-left:0.4em}';\nexport function getExportBlobByContent(content, options) {\n    return new Blob([content], { type: `text/${options.type};charset=utf-8;` });\n}\nexport function createHtmlPage(opts, content) {\n    const { style } = opts;\n    return [\n        '<!DOCTYPE html><html>',\n        '<head>',\n        '<meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,minimal-ui\">',\n        `<title>${opts.sheetName}</title>`,\n        '<style media=\"print\">.vxe-page-break-before{page-break-before:always;}.vxe-page-break-after{page-break-after:always;}</style>',\n        `<style>${defaultHtmlStyle}</style>`,\n        style ? `<style>${style}</style>` : '',\n        '</head>',\n        `<body>${content}</body>`,\n        '</html>'\n    ].join('');\n}\n", "import XEUtils from 'xe-utils';\nimport { VxeUI } from '../../../ui';\nimport { browse, hasClass, getAbsolutePos, addClass, removeClass, getEventTargetNode } from '../../../ui/src/dom';\nconst { hooks } = VxeUI;\nfunction getTargetOffset(target, container) {\n    let offsetTop = 0;\n    let offsetLeft = 0;\n    const triggerCheckboxLabel = !browse.firefox && hasClass(target, 'vxe-checkbox--label');\n    if (triggerCheckboxLabel) {\n        const checkboxLabelStyle = getComputedStyle(target);\n        offsetTop -= XEUtils.toNumber(checkboxLabelStyle.paddingTop);\n        offsetLeft -= XEUtils.toNumber(checkboxLabelStyle.paddingLeft);\n    }\n    while (target && target !== container) {\n        offsetTop += target.offsetTop;\n        offsetLeft += target.offsetLeft;\n        target = target.offsetParent;\n        if (triggerCheckboxLabel) {\n            const checkboxStyle = getComputedStyle(target);\n            offsetTop -= XEUtils.toNumber(checkboxStyle.paddingTop);\n            offsetLeft -= XEUtils.toNumber(checkboxStyle.paddingLeft);\n        }\n    }\n    return { offsetTop, offsetLeft };\n}\nhooks.add('tableKeyboardModule', {\n    setupTable($xeTable) {\n        const { props, reactData, internalData } = $xeTable;\n        const { refElem } = $xeTable.getRefMaps();\n        const { computeEditOpts, computeCheckboxOpts, computeMouseOpts, computeTreeOpts } = $xeTable.getComputeMaps();\n        function getCheckboxRangeRows(params, targetTrElem, moveRange) {\n            let countHeight = 0;\n            let rangeRows = [];\n            const isDown = moveRange > 0;\n            const moveSize = moveRange > 0 ? moveRange : (Math.abs(moveRange) + targetTrElem.offsetHeight);\n            const { scrollYLoad } = reactData;\n            const { afterFullData, scrollYStore } = internalData;\n            if (scrollYLoad) {\n                const _rowIndex = $xeTable.getVTRowIndex(params.row);\n                if (isDown) {\n                    rangeRows = afterFullData.slice(_rowIndex, _rowIndex + Math.ceil(moveSize / scrollYStore.rowHeight));\n                }\n                else {\n                    rangeRows = afterFullData.slice(_rowIndex - Math.floor(moveSize / scrollYStore.rowHeight) + 1, _rowIndex + 1);\n                }\n            }\n            else {\n                const siblingProp = isDown ? 'next' : 'previous';\n                while (targetTrElem && countHeight < moveSize) {\n                    const rowNodeRest = $xeTable.getRowNode(targetTrElem);\n                    if (rowNodeRest) {\n                        rangeRows.push(rowNodeRest.item);\n                        countHeight += targetTrElem.offsetHeight;\n                        targetTrElem = targetTrElem[`${siblingProp}ElementSibling`];\n                    }\n                }\n            }\n            return rangeRows;\n        }\n        const handleCheckboxRangeEvent = (evnt, params) => {\n            const { column, cell } = params;\n            if (column.type === 'checkbox') {\n                const el = refElem.value;\n                const { elemStore } = internalData;\n                const disX = evnt.clientX;\n                const disY = evnt.clientY;\n                const bodyWrapperRef = elemStore[`${column.fixed || 'main'}-body-wrapper`] || elemStore['main-body-wrapper'];\n                const bodyWrapperElem = bodyWrapperRef ? bodyWrapperRef.value : null;\n                if (!bodyWrapperElem) {\n                    return;\n                }\n                const checkboxRangeElem = bodyWrapperElem.querySelector('.vxe-table--checkbox-range');\n                const domMousemove = document.onmousemove;\n                const domMouseup = document.onmouseup;\n                const trElem = cell.parentNode;\n                const selectRecords = $xeTable.getCheckboxRecords();\n                let lastRangeRows = [];\n                const marginSize = 1;\n                const offsetRest = getTargetOffset(evnt.target, bodyWrapperElem);\n                const startTop = offsetRest.offsetTop + evnt.offsetY;\n                const startLeft = offsetRest.offsetLeft + evnt.offsetX;\n                const startScrollTop = bodyWrapperElem.scrollTop;\n                const rowHeight = trElem.offsetHeight;\n                let mouseScrollTimeout = null;\n                let isMouseScrollDown = false;\n                let mouseScrollSpaceSize = 1;\n                const triggerEvent = (type, evnt) => {\n                    $xeTable.dispatchEvent(`checkbox-range-${type}`, { records: $xeTable.getCheckboxRecords(), reserves: $xeTable.getCheckboxReserveRecords() }, evnt);\n                };\n                const handleChecked = (evnt) => {\n                    const { clientX, clientY } = evnt;\n                    const offsetLeft = clientX - disX;\n                    const offsetTop = clientY - disY + (bodyWrapperElem.scrollTop - startScrollTop);\n                    let rangeHeight = Math.abs(offsetTop);\n                    let rangeWidth = Math.abs(offsetLeft);\n                    let rangeTop = startTop;\n                    let rangeLeft = startLeft;\n                    if (offsetTop < marginSize) {\n                        // 向上\n                        rangeTop += offsetTop;\n                        if (rangeTop < marginSize) {\n                            rangeTop = marginSize;\n                            rangeHeight = startTop;\n                        }\n                    }\n                    else {\n                        // 向下\n                        rangeHeight = Math.min(rangeHeight, bodyWrapperElem.scrollHeight - startTop - marginSize);\n                    }\n                    if (offsetLeft < marginSize) {\n                        // 向左\n                        rangeLeft += offsetLeft;\n                        if (rangeWidth > startLeft) {\n                            rangeLeft = marginSize;\n                            rangeWidth = startLeft;\n                        }\n                    }\n                    else {\n                        // 向右\n                        rangeWidth = Math.min(rangeWidth, bodyWrapperElem.clientWidth - startLeft - marginSize);\n                    }\n                    checkboxRangeElem.style.height = `${rangeHeight}px`;\n                    checkboxRangeElem.style.width = `${rangeWidth}px`;\n                    checkboxRangeElem.style.left = `${rangeLeft}px`;\n                    checkboxRangeElem.style.top = `${rangeTop}px`;\n                    checkboxRangeElem.style.display = 'block';\n                    const rangeRows = getCheckboxRangeRows(params, trElem, offsetTop < marginSize ? -rangeHeight : rangeHeight);\n                    // 至少滑动 10px 才能有效匹配\n                    if (rangeHeight > 10 && rangeRows.length !== lastRangeRows.length) {\n                        lastRangeRows = rangeRows;\n                        if (evnt.ctrlKey) {\n                            rangeRows.forEach((row) => {\n                                $xeTable.handleSelectRow({ row }, selectRecords.indexOf(row) === -1);\n                            });\n                        }\n                        else {\n                            $xeTable.setAllCheckboxRow(false);\n                            $xeTable.handleCheckedCheckboxRow(rangeRows, true, false);\n                        }\n                        triggerEvent('change', evnt);\n                    }\n                };\n                // 停止鼠标滚动\n                const stopMouseScroll = () => {\n                    clearTimeout(mouseScrollTimeout);\n                    mouseScrollTimeout = null;\n                };\n                // 开始鼠标滚动\n                const startMouseScroll = (evnt) => {\n                    stopMouseScroll();\n                    mouseScrollTimeout = setTimeout(() => {\n                        if (mouseScrollTimeout) {\n                            const { scrollLeft, scrollTop, clientHeight, scrollHeight } = bodyWrapperElem;\n                            const topSize = Math.ceil(mouseScrollSpaceSize * 50 / rowHeight);\n                            if (isMouseScrollDown) {\n                                if (scrollTop + clientHeight < scrollHeight) {\n                                    $xeTable.scrollTo(scrollLeft, scrollTop + topSize);\n                                    startMouseScroll(evnt);\n                                    handleChecked(evnt);\n                                }\n                                else {\n                                    stopMouseScroll();\n                                }\n                            }\n                            else {\n                                if (scrollTop) {\n                                    $xeTable.scrollTo(scrollLeft, scrollTop - topSize);\n                                    startMouseScroll(evnt);\n                                    handleChecked(evnt);\n                                }\n                                else {\n                                    stopMouseScroll();\n                                }\n                            }\n                        }\n                    }, 50);\n                };\n                addClass(el, 'drag--range');\n                document.onmousemove = evnt => {\n                    evnt.preventDefault();\n                    evnt.stopPropagation();\n                    const { clientY } = evnt;\n                    const { boundingTop } = getAbsolutePos(bodyWrapperElem);\n                    // 如果超过可视区，触发滚动\n                    if (clientY < boundingTop) {\n                        isMouseScrollDown = false;\n                        mouseScrollSpaceSize = boundingTop - clientY;\n                        if (!mouseScrollTimeout) {\n                            startMouseScroll(evnt);\n                        }\n                    }\n                    else if (clientY > boundingTop + bodyWrapperElem.clientHeight) {\n                        isMouseScrollDown = true;\n                        mouseScrollSpaceSize = clientY - boundingTop - bodyWrapperElem.clientHeight;\n                        if (!mouseScrollTimeout) {\n                            startMouseScroll(evnt);\n                        }\n                    }\n                    else if (mouseScrollTimeout) {\n                        stopMouseScroll();\n                    }\n                    handleChecked(evnt);\n                };\n                document.onmouseup = (evnt) => {\n                    stopMouseScroll();\n                    removeClass(el, 'drag--range');\n                    checkboxRangeElem.removeAttribute('style');\n                    document.onmousemove = domMousemove;\n                    document.onmouseup = domMouseup;\n                    triggerEvent('end', evnt);\n                };\n                triggerEvent('start', evnt);\n            }\n        };\n        const handleCellMousedownEvent = (evnt, params) => {\n            const { editConfig, checkboxConfig, mouseConfig } = props;\n            const checkboxOpts = computeCheckboxOpts.value;\n            const mouseOpts = computeMouseOpts.value;\n            const editOpts = computeEditOpts.value;\n            if (mouseConfig && mouseOpts.area && $xeTable.handleCellAreaEvent) {\n                return $xeTable.handleCellAreaEvent(evnt, params);\n            }\n            else {\n                if (checkboxConfig && checkboxOpts.range) {\n                    handleCheckboxRangeEvent(evnt, params);\n                }\n                if (mouseConfig && mouseOpts.selected) {\n                    if (!editConfig || editOpts.mode === 'cell') {\n                        $xeTable.handleSelected(params, evnt);\n                    }\n                }\n            }\n        };\n        const keyboardMethods = {\n            // 处理 Tab 键移动\n            moveTabSelected(args, isLeft, evnt) {\n                const { editConfig } = props;\n                const { afterFullData, visibleColumn } = internalData;\n                const editOpts = computeEditOpts.value;\n                let targetRow;\n                let targetRowIndex;\n                let targetColumnIndex;\n                const params = Object.assign({}, args);\n                const _rowIndex = $xeTable.getVTRowIndex(params.row);\n                const _columnIndex = $xeTable.getVTColumnIndex(params.column);\n                evnt.preventDefault();\n                if (isLeft) {\n                    // 向左\n                    if (_columnIndex <= 0) {\n                        // 如果已经是第一列，则移动到上一行\n                        if (_rowIndex > 0) {\n                            targetRowIndex = _rowIndex - 1;\n                            targetRow = afterFullData[targetRowIndex];\n                            targetColumnIndex = visibleColumn.length - 1;\n                        }\n                    }\n                    else {\n                        targetColumnIndex = _columnIndex - 1;\n                    }\n                }\n                else {\n                    if (_columnIndex >= visibleColumn.length - 1) {\n                        // 如果已经是第一列，则移动到上一行\n                        if (_rowIndex < afterFullData.length - 1) {\n                            targetRowIndex = _rowIndex + 1;\n                            targetRow = afterFullData[targetRowIndex];\n                            targetColumnIndex = 0;\n                        }\n                    }\n                    else {\n                        targetColumnIndex = _columnIndex + 1;\n                    }\n                }\n                const targetColumn = visibleColumn[targetColumnIndex];\n                if (targetColumn) {\n                    if (targetRow) {\n                        params.rowIndex = targetRowIndex;\n                        params.row = targetRow;\n                    }\n                    else {\n                        params.rowIndex = _rowIndex;\n                    }\n                    params.columnIndex = targetColumnIndex;\n                    params.column = targetColumn;\n                    params.cell = $xeTable.getCellElement(params.row, params.column);\n                    if (editConfig) {\n                        if (editOpts.trigger === 'click' || editOpts.trigger === 'dblclick') {\n                            if (editOpts.mode === 'row') {\n                                $xeTable.handleActived(params, evnt);\n                            }\n                            else {\n                                $xeTable.scrollToRow(params.row, params.column)\n                                    .then(() => $xeTable.handleSelected(params, evnt));\n                            }\n                        }\n                    }\n                    else {\n                        $xeTable.scrollToRow(params.row, params.column)\n                            .then(() => $xeTable.handleSelected(params, evnt));\n                    }\n                }\n            },\n            // 处理当前行方向键移动\n            moveCurrentRow(isUpArrow, isDwArrow, evnt) {\n                const { treeConfig } = props;\n                const { currentRow } = reactData;\n                const { afterFullData } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                let targetRow;\n                evnt.preventDefault();\n                if (currentRow) {\n                    if (treeConfig) {\n                        const { index, items } = XEUtils.findTree(afterFullData, item => item === currentRow, { children: childrenField });\n                        if (isUpArrow && index > 0) {\n                            targetRow = items[index - 1];\n                        }\n                        else if (isDwArrow && index < items.length - 1) {\n                            targetRow = items[index + 1];\n                        }\n                    }\n                    else {\n                        const _rowIndex = $xeTable.getVTRowIndex(currentRow);\n                        if (isUpArrow && _rowIndex > 0) {\n                            targetRow = afterFullData[_rowIndex - 1];\n                        }\n                        else if (isDwArrow && _rowIndex < afterFullData.length - 1) {\n                            targetRow = afterFullData[_rowIndex + 1];\n                        }\n                    }\n                }\n                else {\n                    targetRow = afterFullData[0];\n                }\n                if (targetRow) {\n                    const params = {\n                        $table: $xeTable,\n                        row: targetRow,\n                        rowIndex: $xeTable.getRowIndex(targetRow),\n                        $rowIndex: $xeTable.getVMRowIndex(targetRow)\n                    };\n                    $xeTable.scrollToRow(targetRow)\n                        .then(() => $xeTable.triggerCurrentRowEvent(evnt, params));\n                }\n            },\n            // 处理可编辑方向键移动\n            moveSelected(args, isLeftArrow, isUpArrow, isRightArrow, isDwArrow, evnt) {\n                const { afterFullData, visibleColumn } = internalData;\n                const params = Object.assign({}, args);\n                const _rowIndex = $xeTable.getVTRowIndex(params.row);\n                const _columnIndex = $xeTable.getVTColumnIndex(params.column);\n                evnt.preventDefault();\n                if (isUpArrow && _rowIndex > 0) {\n                    // 移动到上一行\n                    params.rowIndex = _rowIndex - 1;\n                    params.row = afterFullData[params.rowIndex];\n                }\n                else if (isDwArrow && _rowIndex < afterFullData.length - 1) {\n                    // 移动到下一行\n                    params.rowIndex = _rowIndex + 1;\n                    params.row = afterFullData[params.rowIndex];\n                }\n                else if (isLeftArrow && _columnIndex) {\n                    // 移动到左侧单元格\n                    params.columnIndex = _columnIndex - 1;\n                    params.column = visibleColumn[params.columnIndex];\n                }\n                else if (isRightArrow && _columnIndex < visibleColumn.length - 1) {\n                    // 移动到右侧单元格\n                    params.columnIndex = _columnIndex + 1;\n                    params.column = visibleColumn[params.columnIndex];\n                }\n                $xeTable.scrollToRow(params.row, params.column).then(() => {\n                    params.cell = $xeTable.getCellElement(params.row, params.column);\n                    $xeTable.handleSelected(params, evnt);\n                });\n            },\n            /**\n             * 表头单元格按下事件\n             */\n            triggerHeaderCellMousedownEvent(evnt, params) {\n                const { mouseConfig } = props;\n                const mouseOpts = computeMouseOpts.value;\n                if (mouseConfig && mouseOpts.area && $xeTable.handleHeaderCellAreaEvent) {\n                    const cell = evnt.currentTarget;\n                    const triggerSort = getEventTargetNode(evnt, cell, 'vxe-cell--sort').flag;\n                    const triggerFilter = getEventTargetNode(evnt, cell, 'vxe-cell--filter').flag;\n                    $xeTable.handleHeaderCellAreaEvent(evnt, Object.assign({ cell, triggerSort, triggerFilter }, params));\n                }\n                $xeTable.focus();\n                if ($xeTable.closeMenu) {\n                    $xeTable.closeMenu();\n                }\n            },\n            /**\n             * 单元格按下事件\n             */\n            triggerCellMousedownEvent(evnt, params) {\n                const cell = evnt.currentTarget;\n                params.cell = cell;\n                handleCellMousedownEvent(evnt, params);\n                $xeTable.focus();\n                $xeTable.closeFilter();\n                if ($xeTable.closeMenu) {\n                    $xeTable.closeMenu();\n                }\n            }\n        };\n        return keyboardMethods;\n    }\n});\n", "import { nextTick } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { VxeUI } from '../../../ui';\nimport { getFuncText, eqEmptyValue } from '../../../ui/src/utils';\nimport { scrollToView } from '../../../ui/src/dom';\nimport { handleFieldOrColumn, getRowid } from '../../src/util';\nimport { warnLog, errLog } from '../../../ui/src/log';\nconst { getConfig, validators, hooks } = VxeUI;\n/**\n * 校验规则\n */\nclass Rule {\n    constructor(rule) {\n        Object.assign(this, {\n            $options: rule,\n            required: rule.required,\n            min: rule.min,\n            max: rule.max,\n            type: rule.type,\n            pattern: rule.pattern,\n            validator: rule.validator,\n            trigger: rule.trigger,\n            maxWidth: rule.maxWidth\n        });\n    }\n    /**\n     * 获取校验不通过的消息\n     * 支持国际化翻译\n     */\n    get content() {\n        return getFuncText(this.$options.content || this.$options.message);\n    }\n    get message() {\n        return this.content;\n    }\n}\nconst tableValidatorMethodKeys = ['fullValidate', 'validate', 'clearValidate'];\nhooks.add('tableValidatorModule', {\n    setupTable($xeTable) {\n        const { props, reactData, internalData } = $xeTable;\n        const { refValidTooltip } = $xeTable.getRefMaps();\n        const { computeValidOpts, computeTreeOpts, computeEditOpts } = $xeTable.getComputeMaps();\n        let validatorMethods = {};\n        let validatorPrivateMethods = {};\n        let validRuleErr;\n        /**\n         * 聚焦到校验通过的单元格并弹出校验错误提示\n         */\n        const handleValidError = (params) => {\n            return new Promise(resolve => {\n                const validOpts = computeValidOpts.value;\n                if (validOpts.autoPos === false) {\n                    $xeTable.dispatchEvent('valid-error', params, null);\n                    resolve();\n                }\n                else {\n                    $xeTable.handleActived(params, { type: 'valid-error', trigger: 'call' }).then(() => {\n                        resolve(validatorPrivateMethods.showValidTooltip(params));\n                    });\n                }\n            });\n        };\n        const handleErrMsgMode = (validErrMaps) => {\n            const validOpts = computeValidOpts.value;\n            if (validOpts.msgMode === 'single') {\n                const keys = Object.keys(validErrMaps);\n                const resMaps = validErrMaps;\n                if (keys.length) {\n                    const firstKey = keys[0];\n                    resMaps[firstKey] = validErrMaps[firstKey];\n                }\n                return resMaps;\n            }\n            return validErrMaps;\n        };\n        /**\n         * 对表格数据进行校验\n         * 如果不指定数据，则默认只校验临时变动的数据，例如新增或修改\n         * 如果传 true 则校验当前表格数据\n         * 如果传 row 指定行记录，则只验证传入的行\n         * 如果传 rows 为多行记录，则只验证传入的行\n         * 如果只传 callback 否则默认验证整个表格数据\n         * 返回 Promise 对象，或者使用回调方式\n         */\n        const beginValidate = (rows, cb, isFull) => {\n            const validRest = {};\n            const { editRules, treeConfig } = props;\n            const { afterFullData, visibleColumn } = internalData;\n            const treeOpts = computeTreeOpts.value;\n            const childrenField = treeOpts.children || treeOpts.childrenField;\n            const validOpts = computeValidOpts.value;\n            let validList;\n            if (rows === true) {\n                validList = afterFullData;\n            }\n            else if (rows) {\n                if (XEUtils.isFunction(rows)) {\n                    cb = rows;\n                }\n                else {\n                    validList = XEUtils.isArray(rows) ? rows : [rows];\n                }\n            }\n            if (!validList) {\n                if ($xeTable.getInsertRecords) {\n                    validList = $xeTable.getInsertRecords().concat($xeTable.getUpdateRecords());\n                }\n                else {\n                    validList = [];\n                }\n            }\n            const rowValidErrs = [];\n            internalData._lastCallTime = Date.now();\n            validRuleErr = false; // 如果为快速校验，当存在某列校验不通过时将终止执行\n            validatorMethods.clearValidate();\n            const validErrMaps = {};\n            if (editRules) {\n                const columns = $xeTable.getColumns();\n                const handleVaild = (row) => {\n                    if (isFull || !validRuleErr) {\n                        const colVailds = [];\n                        columns.forEach((column) => {\n                            if ((isFull || !validRuleErr) && XEUtils.has(editRules, column.property)) {\n                                colVailds.push(validatorPrivateMethods.validCellRules('all', row, column)\n                                    .catch(({ rule, rules }) => {\n                                    const rest = {\n                                        rule,\n                                        rules,\n                                        rowIndex: $xeTable.getRowIndex(row),\n                                        row,\n                                        columnIndex: $xeTable.getColumnIndex(column),\n                                        column,\n                                        field: column.property,\n                                        $table: $xeTable\n                                    };\n                                    if (!validRest[column.property]) {\n                                        validRest[column.property] = [];\n                                    }\n                                    validErrMaps[`${getRowid($xeTable, row)}:${column.id}`] = {\n                                        column,\n                                        row,\n                                        rule,\n                                        content: rule.content\n                                    };\n                                    validRest[column.property].push(rest);\n                                    if (!isFull) {\n                                        validRuleErr = true;\n                                        return Promise.reject(rest);\n                                    }\n                                }));\n                            }\n                        });\n                        rowValidErrs.push(Promise.all(colVailds));\n                    }\n                };\n                if (treeConfig) {\n                    XEUtils.eachTree(validList, handleVaild, { children: childrenField });\n                }\n                else {\n                    validList.forEach(handleVaild);\n                }\n                return Promise.all(rowValidErrs).then(() => {\n                    const ruleProps = Object.keys(validRest);\n                    reactData.validErrorMaps = handleErrMsgMode(validErrMaps);\n                    return nextTick().then(() => {\n                        if (ruleProps.length) {\n                            return Promise.reject(validRest[ruleProps[0]][0]);\n                        }\n                        if (cb) {\n                            cb();\n                        }\n                    });\n                }).catch(firstErrParams => {\n                    return new Promise((resolve, reject) => {\n                        const finish = () => {\n                            nextTick(() => {\n                                if (cb) {\n                                    cb(validRest);\n                                    resolve();\n                                }\n                                else {\n                                    if (getConfig().validToReject === 'obsolete') {\n                                        // 已废弃，校验失败将不会执行catch\n                                        reject(validRest);\n                                    }\n                                    else {\n                                        resolve(validRest);\n                                    }\n                                }\n                            });\n                        };\n                        const posAndFinish = () => {\n                            firstErrParams.cell = $xeTable.getCellElement(firstErrParams.row, firstErrParams.column);\n                            scrollToView(firstErrParams.cell);\n                            handleValidError(firstErrParams).then(finish);\n                        };\n                        /**\n                         * 当校验不通过时\n                         * 将表格滚动到可视区\n                         * 由于提示信息至少需要占一行，定位向上偏移一行\n                         */\n                        if (validOpts.autoPos === false) {\n                            finish();\n                        }\n                        else {\n                            const row = firstErrParams.row;\n                            const column = firstErrParams.column;\n                            const rowIndex = afterFullData.indexOf(row);\n                            const columnIndex = visibleColumn.indexOf(column);\n                            const targetRow = rowIndex > 0 ? afterFullData[rowIndex - 1] : row;\n                            const targetColumn = columnIndex > 0 ? visibleColumn[columnIndex - 1] : column;\n                            $xeTable.scrollToRow(targetRow, targetColumn).then(posAndFinish);\n                        }\n                    });\n                });\n            }\n            else {\n                reactData.validErrorMaps = {};\n            }\n            return nextTick().then(() => {\n                if (cb) {\n                    cb();\n                }\n            });\n        };\n        validatorMethods = {\n            /**\n             * 完整校验，和 validate 的区别就是会给有效数据中的每一行进行校验\n             */\n            fullValidate(rows, cb) {\n                if (process.env.NODE_ENV === 'development') {\n                    if (XEUtils.isFunction(cb)) {\n                        warnLog('vxe.error.notValidators', ['fullValidate(rows, callback)', 'fullValidate(rows)']);\n                    }\n                }\n                return beginValidate(rows, cb, true);\n            },\n            /**\n             * 快速校验，如果存在记录不通过的记录，则返回不再继续校验（异步校验除外）\n             */\n            validate(rows, cb) {\n                if (process.env.NODE_ENV === 'development') {\n                    if (XEUtils.isFunction(cb)) {\n                        warnLog('vxe.error.notValidators', ['validate(rows, callback)', 'validate(rows)']);\n                    }\n                }\n                return beginValidate(rows, cb);\n            },\n            clearValidate(rows, fieldOrColumn) {\n                const { validErrorMaps } = reactData;\n                const validTip = refValidTooltip.value;\n                const validOpts = computeValidOpts.value;\n                const rowList = XEUtils.isArray(rows) ? rows : (rows ? [rows] : []);\n                const colList = (XEUtils.isArray(fieldOrColumn) ? fieldOrColumn : (fieldOrColumn ? [fieldOrColumn] : []).map(column => handleFieldOrColumn($xeTable, column)));\n                let validErrMaps = {};\n                if (validTip && validTip.reactData.visible) {\n                    validTip.close();\n                }\n                // 如果是单个提示模式\n                if (validOpts.msgMode === 'single') {\n                    reactData.validErrorMaps = {};\n                    return nextTick();\n                }\n                if (rowList.length && colList.length) {\n                    validErrMaps = Object.assign({}, validErrorMaps);\n                    rowList.forEach(row => {\n                        colList.forEach((column) => {\n                            const validKey = `${getRowid($xeTable, row)}:${column.id}`;\n                            if (validErrMaps[validKey]) {\n                                delete validErrMaps[validKey];\n                            }\n                        });\n                    });\n                }\n                else if (rowList.length) {\n                    const rowIdList = rowList.map(row => `${getRowid($xeTable, row)}`);\n                    XEUtils.each(validErrorMaps, (item, key) => {\n                        if (rowIdList.indexOf(key.split(':')[0]) > -1) {\n                            validErrMaps[key] = item;\n                        }\n                    });\n                }\n                else if (colList.length) {\n                    const colidList = colList.map(column => `${column.id}`);\n                    XEUtils.each(validErrorMaps, (item, key) => {\n                        if (colidList.indexOf(key.split(':')[1]) > -1) {\n                            validErrMaps[key] = item;\n                        }\n                    });\n                }\n                reactData.validErrorMaps = validErrMaps;\n                return nextTick();\n            }\n        };\n        const validErrorRuleValue = (rule, val) => {\n            const { type, min, max, pattern } = rule;\n            const isNumType = type === 'number';\n            const numVal = isNumType ? XEUtils.toNumber(val) : XEUtils.getSize(val);\n            // 判断数值\n            if (isNumType && isNaN(val)) {\n                return true;\n            }\n            // 如果存在 min，判断最小值\n            if (!XEUtils.eqNull(min) && numVal < XEUtils.toNumber(min)) {\n                return true;\n            }\n            // 如果存在 max，判断最大值\n            if (!XEUtils.eqNull(max) && numVal > XEUtils.toNumber(max)) {\n                return true;\n            }\n            // 如果存在 pattern，正则校验\n            if (pattern && !(XEUtils.isRegExp(pattern) ? pattern : new RegExp(pattern)).test(val)) {\n                return true;\n            }\n            return false;\n        };\n        validatorPrivateMethods = {\n            /**\n             * 校验数据\n             * 按表格行、列顺序依次校验（同步或异步）\n             * 校验规则根据索引顺序依次校验，如果是异步则会等待校验完成才会继续校验下一列\n             * 如果校验失败则，触发回调或者Promise<不通过列的错误消息>\n             * 如果是传回调方式这返回一个校验不通过列的错误消息\n             *\n             * rule 配置：\n             *  required=Boolean 是否必填\n             *  min=Number 最小长度\n             *  max=Number 最大长度\n             *  validator=Function({ cellValue, rule, rules, row, column, rowIndex, columnIndex }) 自定义校验，接收一个 Promise\n             *  trigger=blur|change 触发方式（除非特殊场景，否则默认为空就行）\n             */\n            validCellRules(validType, row, column, val) {\n                const { editRules } = props;\n                const { field } = column;\n                const errorRules = [];\n                const syncValidList = [];\n                if (field && editRules) {\n                    const rules = XEUtils.get(editRules, field);\n                    if (rules) {\n                        const cellValue = XEUtils.isUndefined(val) ? XEUtils.get(row, field) : val;\n                        rules.forEach((rule) => {\n                            const { type, trigger, required, validator } = rule;\n                            if (validType === 'all' || !trigger || validType === trigger) {\n                                if (validator) {\n                                    const validParams = {\n                                        cellValue,\n                                        rule,\n                                        rules,\n                                        row,\n                                        rowIndex: $xeTable.getRowIndex(row),\n                                        column,\n                                        columnIndex: $xeTable.getColumnIndex(column),\n                                        field: column.field,\n                                        $table: $xeTable,\n                                        $grid: $xeTable.xegrid\n                                    };\n                                    let customValid;\n                                    if (XEUtils.isString(validator)) {\n                                        const gvItem = validators.get(validator);\n                                        if (gvItem) {\n                                            const tcvMethod = gvItem.tableCellValidatorMethod || gvItem.cellValidatorMethod;\n                                            if (tcvMethod) {\n                                                customValid = tcvMethod(validParams);\n                                            }\n                                            else {\n                                                if (process.env.NODE_ENV === 'development') {\n                                                    warnLog('vxe.error.notValidators', [validator]);\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (process.env.NODE_ENV === 'development') {\n                                                errLog('vxe.error.notValidators', [validator]);\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        customValid = validator(validParams);\n                                    }\n                                    if (customValid) {\n                                        if (XEUtils.isError(customValid)) {\n                                            validRuleErr = true;\n                                            errorRules.push(new Rule({ type: 'custom', trigger, content: customValid.message, rule: new Rule(rule) }));\n                                        }\n                                        else if (customValid.catch) {\n                                            // 如果为异步校验（注：异步校验是并发无序的）\n                                            syncValidList.push(customValid.catch((e) => {\n                                                validRuleErr = true;\n                                                errorRules.push(new Rule({ type: 'custom', trigger, content: e && e.message ? e.message : (rule.content || rule.message), rule: new Rule(rule) }));\n                                            }));\n                                        }\n                                    }\n                                }\n                                else {\n                                    const isArrType = type === 'array';\n                                    const isArrVal = XEUtils.isArray(cellValue);\n                                    let hasEmpty = true;\n                                    if (isArrType || isArrVal) {\n                                        hasEmpty = !isArrVal || !cellValue.length;\n                                    }\n                                    else if (XEUtils.isString(cellValue)) {\n                                        hasEmpty = eqEmptyValue(cellValue.trim());\n                                    }\n                                    else {\n                                        hasEmpty = eqEmptyValue(cellValue);\n                                    }\n                                    if (required ? (hasEmpty || validErrorRuleValue(rule, cellValue)) : (!hasEmpty && validErrorRuleValue(rule, cellValue))) {\n                                        validRuleErr = true;\n                                        errorRules.push(new Rule(rule));\n                                    }\n                                }\n                            }\n                        });\n                    }\n                }\n                return Promise.all(syncValidList).then(() => {\n                    if (errorRules.length) {\n                        const rest = { rules: errorRules, rule: errorRules[0] };\n                        return Promise.reject(rest);\n                    }\n                });\n            },\n            hasCellRules(type, row, column) {\n                const { editRules } = props;\n                const { field } = column;\n                if (field && editRules) {\n                    const rules = XEUtils.get(editRules, field);\n                    return rules && !!XEUtils.find(rules, rule => type === 'all' || !rule.trigger || type === rule.trigger);\n                }\n                return false;\n            },\n            /**\n             * 触发校验\n             */\n            triggerValidate(type) {\n                const { editConfig, editRules } = props;\n                const { editStore } = reactData;\n                const { actived } = editStore;\n                const editOpts = computeEditOpts.value;\n                const validOpts = computeValidOpts.value;\n                // 检查清除校验消息\n                if (editRules && validOpts.msgMode === 'single') {\n                    reactData.validErrorMaps = {};\n                }\n                // 校验单元格\n                if (editConfig && editRules && actived.row) {\n                    const { row, column, cell } = actived.args;\n                    if (validatorPrivateMethods.hasCellRules(type, row, column)) {\n                        return validatorPrivateMethods.validCellRules(type, row, column).then(() => {\n                            if (editOpts.mode === 'row') {\n                                validatorMethods.clearValidate(row, column);\n                            }\n                        }).catch(({ rule }) => {\n                            // 如果校验不通过与触发方式一致，则聚焦提示错误，否则跳过并不作任何处理\n                            if (!rule.trigger || type === rule.trigger) {\n                                const rest = { rule, row, column, cell };\n                                validatorPrivateMethods.showValidTooltip(rest);\n                                return Promise.reject(rest);\n                            }\n                            return Promise.resolve();\n                        });\n                    }\n                }\n                return Promise.resolve();\n            },\n            /**\n             * 弹出校验错误提示\n             */\n            showValidTooltip(params) {\n                const { height } = props;\n                const { tableData, validStore, validErrorMaps } = reactData;\n                const { rule, row, column, cell } = params;\n                const validOpts = computeValidOpts.value;\n                const validTip = refValidTooltip.value;\n                const content = rule.content;\n                validStore.visible = true;\n                if (validOpts.msgMode === 'single') {\n                    reactData.validErrorMaps = {\n                        [`${getRowid($xeTable, row)}:${column.id}`]: {\n                            column,\n                            row,\n                            rule,\n                            content\n                        }\n                    };\n                }\n                else {\n                    reactData.validErrorMaps = Object.assign({}, validErrorMaps, {\n                        [`${getRowid($xeTable, row)}:${column.id}`]: {\n                            column,\n                            row,\n                            rule,\n                            content\n                        }\n                    });\n                }\n                $xeTable.dispatchEvent('valid-error', params, null);\n                if (validTip) {\n                    if (validTip && (validOpts.message === 'tooltip' || (validOpts.message === 'default' && !height && tableData.length < 2))) {\n                        return validTip.open(cell, content);\n                    }\n                }\n                return nextTick();\n            }\n        };\n        return Object.assign(Object.assign({}, validatorMethods), validatorPrivateMethods);\n    },\n    setupGrid($xeGrid) {\n        return $xeGrid.extendTableMethods(tableValidatorMethodKeys);\n    }\n});\n", "import { nextTick } from 'vue';\nimport { VxeUI } from '../../../ui';\nimport XEUtils from 'xe-utils';\nconst tableCustomMethodKeys = ['openCustom', 'closeCustom'];\nVxeUI.hooks.add('tableCustomModule', {\n    setupTable($xeTable) {\n        const { reactData, internalData } = $xeTable;\n        const { computeCustomOpts } = $xeTable.getComputeMaps();\n        const { refElem } = $xeTable.getRefMaps();\n        const $xeGrid = $xeTable.xegrid;\n        const calcMaxHeight = () => {\n            const { customStore } = reactData;\n            const el = refElem.value;\n            // 判断面板不能大于表格高度\n            let tableHeight = 0;\n            if (el) {\n                tableHeight = el.clientHeight - 30;\n            }\n            customStore.maxHeight = Math.max(4, tableHeight);\n        };\n        const openCustom = () => {\n            const { initStore, customStore } = reactData;\n            const { collectColumn } = internalData;\n            const sortMaps = {};\n            const fixedMaps = {};\n            const visibleMaps = {};\n            XEUtils.eachTree(collectColumn, column => {\n                const colid = column.getKey();\n                column.renderFixed = column.fixed;\n                column.renderVisible = column.visible;\n                column.renderResizeWidth = column.renderWidth;\n                sortMaps[colid] = column.renderSortNumber;\n                fixedMaps[colid] = column.fixed;\n                visibleMaps[colid] = column.visible;\n            }, { children: 'children' });\n            customStore.oldSortMaps = sortMaps;\n            customStore.oldFixedMaps = fixedMaps;\n            customStore.oldVisibleMaps = visibleMaps;\n            reactData.customColumnList = collectColumn.slice(0);\n            customStore.visible = true;\n            initStore.custom = true;\n            checkCustomStatus();\n            calcMaxHeight();\n            return nextTick().then(() => calcMaxHeight());\n        };\n        const closeCustom = () => {\n            const { customStore } = reactData;\n            const customOpts = computeCustomOpts.value;\n            if (customStore.visible) {\n                customStore.visible = false;\n                if (!customOpts.immediate) {\n                    $xeTable.handleCustom();\n                }\n            }\n            return nextTick();\n        };\n        const customMethods = {\n            openCustom,\n            closeCustom\n        };\n        const checkCustomStatus = () => {\n            const { customStore } = reactData;\n            const { collectColumn } = internalData;\n            const customOpts = computeCustomOpts.value;\n            const { checkMethod } = customOpts;\n            customStore.isAll = collectColumn.every((column) => (checkMethod ? !checkMethod({ column }) : false) || column.renderVisible);\n            customStore.isIndeterminate = !customStore.isAll && collectColumn.some((column) => (!checkMethod || checkMethod({ column })) && (column.renderVisible || column.halfVisible));\n        };\n        const emitCustomEvent = (type, evnt) => {\n            const comp = $xeGrid || $xeTable;\n            comp.dispatchEvent('custom', { type }, evnt);\n        };\n        const customPrivateMethods = {\n            checkCustomStatus,\n            emitCustomEvent,\n            triggerCustomEvent(evnt) {\n                const { customStore } = $xeTable.reactData;\n                if (customStore.visible) {\n                    closeCustom();\n                    emitCustomEvent('close', evnt);\n                }\n                else {\n                    customStore.btnEl = evnt.target;\n                    openCustom();\n                    emitCustomEvent('open', evnt);\n                }\n            },\n            customOpenEvent(evnt) {\n                const { customStore } = reactData;\n                if (!customStore.visible) {\n                    customStore.activeBtn = true;\n                    customStore.btnEl = evnt.target;\n                    $xeTable.openCustom();\n                    $xeTable.emitCustomEvent('open', evnt);\n                }\n            },\n            customCloseEvent(evnt) {\n                const { customStore } = reactData;\n                if (customStore.visible) {\n                    customStore.activeBtn = false;\n                    $xeTable.closeCustom();\n                    $xeTable.emitCustomEvent('close', evnt);\n                }\n            }\n        };\n        return Object.assign(Object.assign({}, customMethods), customPrivateMethods);\n    },\n    setupGrid($xeGrid) {\n        return $xeGrid.extendTableMethods(tableCustomMethodKeys);\n    }\n});\n", "import { h, resolveComponent } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { VxeUI } from '../../ui';\nimport { getCellValue, setCellValue } from '../../table/src/util';\nimport { getFuncText, formatText, isEmptyValue } from '../../ui/src/utils';\nimport { getOnName } from '../../ui/src/vn';\nimport { errLog } from '../../ui/src/log';\nconst { getConfig, renderer, getI18n } = VxeUI;\nconst componentDefaultModelProp = 'modelValue';\nconst defaultCompProps = { transfer: true };\nfunction getModelEvent(renderOpts) {\n    switch (renderOpts.name) {\n        case 'input':\n        case 'textarea':\n            return 'input';\n    }\n    return 'update:modelValue';\n}\nfunction getChangeEvent(renderOpts) {\n    switch (renderOpts.name) {\n        case 'input':\n        case 'textarea':\n        case 'VxeInput':\n        case 'VxeTextarea':\n        case '$input':\n        case '$textarea':\n            return 'input';\n    }\n    return 'change';\n}\nfunction parseDate(value, props) {\n    return value && props.valueFormat ? XEUtils.toStringDate(value, props.valueFormat) : value;\n}\nfunction getFormatDate(value, props, defaultFormat) {\n    const { dateConfig = {} } = props;\n    return XEUtils.toDateString(parseDate(value, props), dateConfig.labelFormat || defaultFormat);\n}\nfunction getLabelFormatDate(value, props) {\n    return getFormatDate(value, props, getI18n(`vxe.input.date.labelFormat.${props.type}`));\n}\n/**\n * 已废弃\n * @deprecated\n */\nfunction getOldComponentName(name) {\n    return `vxe-${name.replace('$', '')}`;\n}\nfunction getDefaultComponent({ name }) {\n    return resolveComponent(name);\n}\n/**\n * 已废弃\n * @deprecated\n */\nfunction getOldComponent({ name }) {\n    return resolveComponent(getOldComponentName(name));\n}\nfunction handleConfirmFilter(params, checked, option) {\n    const { $panel } = params;\n    $panel.changeOption({}, checked, option);\n}\nfunction getNativeAttrs(renderOpts) {\n    let { name, attrs } = renderOpts;\n    if (name === 'input') {\n        attrs = Object.assign({ type: 'text' }, attrs);\n    }\n    return attrs;\n}\nfunction getInputImmediateModel(renderOpts) {\n    const { name, immediate, props } = renderOpts;\n    if (!immediate) {\n        if (name === 'VxeInput' || name === '$input') {\n            const { type } = props || {};\n            return !(!type || type === 'text' || type === 'number' || type === 'integer' || type === 'float');\n        }\n        if (name === 'input' || name === 'textarea' || name === '$textarea') {\n            return false;\n        }\n        return true;\n    }\n    return immediate;\n}\nfunction getCellEditProps(renderOpts, params, value, defaultProps) {\n    return XEUtils.assign({ immediate: getInputImmediateModel(renderOpts) }, defaultCompProps, defaultProps, renderOpts.props, { [componentDefaultModelProp]: value });\n}\nfunction getCellEditFilterProps(renderOpts, params, value, defaultProps) {\n    return XEUtils.assign({}, defaultCompProps, defaultProps, renderOpts.props, { [componentDefaultModelProp]: value });\n}\nfunction isImmediateCell(renderOpts, params) {\n    return params.$type === 'cell' || getInputImmediateModel(renderOpts);\n}\nfunction getCellLabelVNs(renderOpts, params, cellLabel) {\n    const { placeholder } = renderOpts;\n    return [\n        h('span', {\n            class: 'vxe-cell--label'\n        }, placeholder && isEmptyValue(cellLabel)\n            ? [\n                h('span', {\n                    class: 'vxe-cell--placeholder'\n                }, formatText(getFuncText(placeholder), 1))\n            ]\n            : formatText(cellLabel, 1))\n    ];\n}\n/**\n * 原生事件处理\n * @param renderOpts\n * @param params\n * @param modelFunc\n * @param changeFunc\n */\nfunction getElementOns(renderOpts, params, modelFunc, changeFunc) {\n    const { events } = renderOpts;\n    const modelEvent = getModelEvent(renderOpts);\n    const changeEvent = getChangeEvent(renderOpts);\n    const isSameEvent = changeEvent === modelEvent;\n    const ons = {};\n    if (events) {\n        XEUtils.objectEach(events, (func, key) => {\n            ons[getOnName(key)] = function (...args) {\n                func(params, ...args);\n            };\n        });\n    }\n    if (modelFunc) {\n        ons[getOnName(modelEvent)] = function (targetEvnt) {\n            modelFunc(targetEvnt);\n            if (isSameEvent && changeFunc) {\n                changeFunc(targetEvnt);\n            }\n            if (events && events[modelEvent]) {\n                events[modelEvent](params, targetEvnt);\n            }\n        };\n    }\n    if (!isSameEvent && changeFunc) {\n        ons[getOnName(changeEvent)] = function (...args) {\n            changeFunc(...args);\n            if (events && events[changeEvent]) {\n                events[changeEvent](params, ...args);\n            }\n        };\n    }\n    return ons;\n}\n/**\n * 组件事件处理\n * @param renderOpts\n * @param params\n * @param modelFunc\n * @param changeFunc\n */\nfunction getComponentOns(renderOpts, params, modelFunc, changeFunc) {\n    const { events } = renderOpts;\n    const modelEvent = getModelEvent(renderOpts);\n    const changeEvent = getChangeEvent(renderOpts);\n    const ons = {};\n    XEUtils.objectEach(events, (func, key) => {\n        ons[getOnName(key)] = function (...args) {\n            if (process.env.NODE_ENV === 'development') {\n                if (!XEUtils.isFunction(func)) {\n                    errLog('vxe.error.errFunc', [func]);\n                }\n            }\n            func(params, ...args);\n        };\n    });\n    if (modelFunc) {\n        ons[getOnName(modelEvent)] = function (targetEvnt) {\n            modelFunc(targetEvnt);\n            if (events && events[modelEvent]) {\n                events[modelEvent](params, targetEvnt);\n            }\n        };\n    }\n    if (changeFunc) {\n        ons[getOnName(changeEvent)] = function (...args) {\n            changeFunc(...args);\n            if (events && events[changeEvent]) {\n                events[changeEvent](params, ...args);\n            }\n        };\n    }\n    return ons;\n}\nfunction getEditOns(renderOpts, params) {\n    const { $table, row, column } = params;\n    const { name } = renderOpts;\n    const { model } = column;\n    const isImmediate = isImmediateCell(renderOpts, params);\n    return getComponentOns(renderOpts, params, (cellValue) => {\n        // 处理 model 值双向绑定\n        if (isImmediate) {\n            setCellValue(row, column, cellValue);\n        }\n        else {\n            model.update = true;\n            model.value = cellValue;\n        }\n    }, (eventParams) => {\n        // 处理 change 事件相关逻辑\n        if (!isImmediate && (['VxeInput', 'VxeTextarea', '$input', '$textarea'].includes(name))) {\n            const cellValue = eventParams.value;\n            model.update = true;\n            model.value = cellValue;\n            $table.updateStatus(params, cellValue);\n        }\n        else {\n            $table.updateStatus(params);\n        }\n    });\n}\nfunction getFilterOns(renderOpts, params, option) {\n    return getComponentOns(renderOpts, params, (value) => {\n        // 处理 model 值双向绑定\n        option.data = value;\n    }, () => {\n        handleConfirmFilter(params, !XEUtils.eqNull(option.data), option);\n    });\n}\nfunction getNativeEditOns(renderOpts, params) {\n    const { $table, row, column } = params;\n    const { model } = column;\n    return getElementOns(renderOpts, params, (evnt) => {\n        // 处理 model 值双向绑定\n        const cellValue = evnt.target.value;\n        if (isImmediateCell(renderOpts, params)) {\n            setCellValue(row, column, cellValue);\n        }\n        else {\n            model.update = true;\n            model.value = cellValue;\n        }\n    }, (evnt) => {\n        // 处理 change 事件相关逻辑\n        const cellValue = evnt.target.value;\n        $table.updateStatus(params, cellValue);\n    });\n}\nfunction getNativeFilterOns(renderOpts, params, option) {\n    return getElementOns(renderOpts, params, (evnt) => {\n        // 处理 model 值双向绑定\n        option.data = evnt.target.value;\n    }, () => {\n        handleConfirmFilter(params, !XEUtils.eqNull(option.data), option);\n    });\n}\n/**\n * 单元格可编辑渲染-原生的标签\n * input、textarea、select\n */\nfunction nativeEditRender(renderOpts, params) {\n    const { row, column } = params;\n    const { name } = renderOpts;\n    const cellValue = isImmediateCell(renderOpts, params) ? getCellValue(row, column) : column.model.value;\n    return [\n        h(name, Object.assign(Object.assign(Object.assign({ class: `vxe-default-${name}` }, getNativeAttrs(renderOpts)), { value: cellValue }), getNativeEditOns(renderOpts, params)))\n    ];\n}\nfunction buttonCellRender(renderOpts, params) {\n    return [\n        h(getDefaultComponent(renderOpts), Object.assign(Object.assign({}, getCellEditProps(renderOpts, params, null)), getComponentOns(renderOpts, params)))\n    ];\n}\nfunction defaultEditRender(renderOpts, params) {\n    const { row, column } = params;\n    const cellValue = getCellValue(row, column);\n    return [\n        h(getDefaultComponent(renderOpts), Object.assign(Object.assign({}, getCellEditProps(renderOpts, params, cellValue)), getEditOns(renderOpts, params)))\n    ];\n}\nfunction radioAndCheckboxEditRender(renderOpts, params) {\n    const { options } = renderOpts;\n    const { row, column } = params;\n    const cellValue = getCellValue(row, column);\n    return [\n        h(getDefaultComponent(renderOpts), Object.assign(Object.assign({ options }, getCellEditProps(renderOpts, params, cellValue)), getEditOns(renderOpts, params)))\n    ];\n}\n/**\n * 已废弃\n * @deprecated\n */\nfunction oldEditRender(renderOpts, params) {\n    const { row, column } = params;\n    const cellValue = getCellValue(row, column);\n    return [\n        h(getOldComponent(renderOpts), Object.assign(Object.assign({}, getCellEditProps(renderOpts, params, cellValue)), getEditOns(renderOpts, params)))\n    ];\n}\n/**\n * 已废弃\n * @deprecated\n */\nfunction oldButtonEditRender(renderOpts, params) {\n    return [\n        h(resolveComponent('vxe-button'), Object.assign(Object.assign({}, getCellEditProps(renderOpts, params, null)), getComponentOns(renderOpts, params)))\n    ];\n}\n/**\n * 已废弃\n * @deprecated\n */\nfunction oldButtonsEditRender(renderOpts, params) {\n    return renderOpts.children.map((childRenderOpts) => oldButtonEditRender(childRenderOpts, params)[0]);\n}\nfunction renderNativeOptgroups(renderOpts, params, renderOptionsMethods) {\n    const { optionGroups, optionGroupProps = {} } = renderOpts;\n    const groupOptions = optionGroupProps.options || 'options';\n    const groupLabel = optionGroupProps.label || 'label';\n    return optionGroups.map((group, gIndex) => {\n        return h('optgroup', {\n            key: gIndex,\n            label: group[groupLabel]\n        }, renderOptionsMethods(group[groupOptions], renderOpts, params));\n    });\n}\n/**\n * 渲染原生的 option 标签\n */\nfunction renderNativeOptions(options, renderOpts, params) {\n    const { optionProps = {} } = renderOpts;\n    const { row, column } = params;\n    const labelProp = optionProps.label || 'label';\n    const valueProp = optionProps.value || 'value';\n    const disabledProp = optionProps.disabled || 'disabled';\n    const cellValue = isImmediateCell(renderOpts, params) ? getCellValue(row, column) : column.model.value;\n    return options.map((option, oIndex) => {\n        return h('option', {\n            key: oIndex,\n            value: option[valueProp],\n            disabled: option[disabledProp],\n            /* eslint-disable eqeqeq */\n            selected: option[valueProp] == cellValue\n        }, option[labelProp]);\n    });\n}\nfunction nativeFilterRender(renderOpts, params) {\n    const { column } = params;\n    const { name } = renderOpts;\n    const attrs = getNativeAttrs(renderOpts);\n    return column.filters.map((option, oIndex) => {\n        return h(name, Object.assign(Object.assign(Object.assign({ key: oIndex, class: `vxe-default-${name}` }, attrs), { value: option.data }), getNativeFilterOns(renderOpts, params, option)));\n    });\n}\nfunction defaultFilterRender(renderOpts, params) {\n    const { column } = params;\n    return column.filters.map((option, oIndex) => {\n        const optionValue = option.data;\n        return h(getDefaultComponent(renderOpts), Object.assign(Object.assign({ key: oIndex }, getCellEditFilterProps(renderOpts, renderOpts, optionValue)), getFilterOns(renderOpts, params, option)));\n    });\n}\n/**\n * 已废弃\n * @deprecated\n */\nfunction oldFilterRender(renderOpts, params) {\n    const { column } = params;\n    return column.filters.map((option, oIndex) => {\n        const optionValue = option.data;\n        return h(getOldComponent(renderOpts), Object.assign(Object.assign({ key: oIndex }, getCellEditFilterProps(renderOpts, renderOpts, optionValue)), getFilterOns(renderOpts, params, option)));\n    });\n}\nfunction handleFilterMethod({ option, row, column }) {\n    const { data } = option;\n    const cellValue = XEUtils.get(row, column.field);\n    /* eslint-disable eqeqeq */\n    return cellValue == data;\n}\nfunction handleInputFilterMethod({ option, row, column }) {\n    const { data } = option;\n    const cellValue = XEUtils.get(row, column.field);\n    /* eslint-disable eqeqeq */\n    return XEUtils.toValueString(cellValue).indexOf(data) > -1;\n}\nfunction nativeSelectEditRender(renderOpts, params) {\n    return [\n        h('select', Object.assign(Object.assign({ class: 'vxe-default-select' }, getNativeAttrs(renderOpts)), getNativeEditOns(renderOpts, params)), renderOpts.optionGroups ? renderNativeOptgroups(renderOpts, params, renderNativeOptions) : renderNativeOptions(renderOpts.options, renderOpts, params))\n    ];\n}\nfunction defaultSelectEditRender(renderOpts, params) {\n    const { row, column } = params;\n    const { options, optionProps, optionGroups, optionGroupProps } = renderOpts;\n    const cellValue = getCellValue(row, column);\n    return [\n        h(getDefaultComponent(renderOpts), Object.assign(Object.assign({}, getCellEditProps(renderOpts, params, cellValue, { options, optionProps, optionGroups, optionGroupProps })), getEditOns(renderOpts, params)))\n    ];\n}\nfunction defaultTreeSelectEditRender(renderOpts, params) {\n    const { row, column } = params;\n    const { options, optionProps } = renderOpts;\n    const cellValue = getCellValue(row, column);\n    return [\n        h(getDefaultComponent(renderOpts), Object.assign(Object.assign({}, getCellEditProps(renderOpts, params, cellValue, { options, optionProps })), getEditOns(renderOpts, params)))\n    ];\n}\n/**\n * 已废弃\n * @deprecated\n */\nfunction oldSelectEditRender(renderOpts, params) {\n    const { row, column } = params;\n    const { options, optionProps, optionGroups, optionGroupProps } = renderOpts;\n    const cellValue = getCellValue(row, column);\n    return [\n        h(getOldComponent(renderOpts), Object.assign(Object.assign({}, getCellEditProps(renderOpts, params, cellValue, { options, optionProps, optionGroups, optionGroupProps })), getEditOns(renderOpts, params)))\n    ];\n}\nfunction getSelectCellValue(renderOpts, { row, column }) {\n    const { options, optionGroups, optionProps = {}, optionGroupProps = {} } = renderOpts;\n    const cellValue = XEUtils.get(row, column.field);\n    let selectItem;\n    const labelProp = optionProps.label || 'label';\n    const valueProp = optionProps.value || 'value';\n    if (!(cellValue === null || cellValue === undefined)) {\n        return XEUtils.map(XEUtils.isArray(cellValue) ? cellValue : [cellValue], optionGroups\n            ? (value) => {\n                const groupOptions = optionGroupProps.options || 'options';\n                for (let index = 0; index < optionGroups.length; index++) {\n                    /* eslint-disable eqeqeq */\n                    selectItem = XEUtils.find(optionGroups[index][groupOptions], item => item[valueProp] == value);\n                    if (selectItem) {\n                        break;\n                    }\n                }\n                return selectItem ? selectItem[labelProp] : value;\n            }\n            : (value) => {\n                /* eslint-disable eqeqeq */\n                selectItem = XEUtils.find(options, item => item[valueProp] == value);\n                return selectItem ? selectItem[labelProp] : value;\n            }).join(', ');\n    }\n    return '';\n}\nfunction handleExportSelectMethod(params) {\n    const { row, column, options } = params;\n    return options.original ? getCellValue(row, column) : getSelectCellValue(column.editRender || column.cellRender, params);\n}\nfunction getTreeSelectCellValue(renderOpts, { row, column }) {\n    const { options, optionProps = {} } = renderOpts;\n    const cellValue = XEUtils.get(row, column.field);\n    const labelProp = optionProps.label || 'label';\n    const valueProp = optionProps.value || 'value';\n    const childrenProp = optionProps.children || 'children';\n    if (!(cellValue === null || cellValue === undefined)) {\n        const keyMaps = {};\n        XEUtils.eachTree(options, item => {\n            keyMaps[XEUtils.get(item, valueProp)] = item;\n        }, { children: childrenProp });\n        return XEUtils.map(XEUtils.isArray(cellValue) ? cellValue : [cellValue], (value) => {\n            const item = keyMaps[value];\n            return item ? XEUtils.get(item, labelProp) : item;\n        }).join(', ');\n    }\n    return '';\n}\nfunction handleExportTreeSelectMethod(params) {\n    const { row, column, options } = params;\n    return options.original ? getCellValue(row, column) : getTreeSelectCellValue(column.editRender || column.cellRender, params);\n}\n/**\n * 表格 - 渲染器\n */\nrenderer.mixin({\n    input: {\n        tableAutoFocus: 'input',\n        renderTableEdit: nativeEditRender,\n        renderTableDefault: nativeEditRender,\n        renderTableFilter: nativeFilterRender,\n        tableFilterDefaultMethod: handleInputFilterMethod\n    },\n    textarea: {\n        tableAutoFocus: 'textarea',\n        renderTableEdit: nativeEditRender\n    },\n    select: {\n        renderTableEdit: nativeSelectEditRender,\n        renderTableDefault: nativeSelectEditRender,\n        renderTableCell(renderOpts, params) {\n            return getCellLabelVNs(renderOpts, params, getSelectCellValue(renderOpts, params));\n        },\n        renderTableFilter(renderOpts, params) {\n            const { column } = params;\n            return column.filters.map((option, oIndex) => {\n                return h('select', Object.assign(Object.assign({ key: oIndex, class: 'vxe-default-select' }, getNativeAttrs(renderOpts)), getNativeFilterOns(renderOpts, params, option)), renderOpts.optionGroups ? renderNativeOptgroups(renderOpts, params, renderNativeOptions) : renderNativeOptions(renderOpts.options, renderOpts, params));\n            });\n        },\n        tableFilterDefaultMethod: handleFilterMethod,\n        tableExportMethod: handleExportSelectMethod\n    },\n    VxeInput: {\n        tableAutoFocus: 'input',\n        renderTableEdit: defaultEditRender,\n        renderTableCell(renderOpts, params) {\n            var _a;\n            const { props = {} } = renderOpts;\n            const { row, column } = params;\n            const digits = props.digits || ((_a = getConfig().input) === null || _a === void 0 ? void 0 : _a.digits) || 2;\n            let cellValue = XEUtils.get(row, column.field);\n            if (cellValue) {\n                switch (props.type) {\n                    case 'date':\n                    case 'week':\n                    case 'month':\n                    case 'quarter':\n                    case 'year':\n                        cellValue = getLabelFormatDate(cellValue, props);\n                        break;\n                    case 'float':\n                        cellValue = XEUtils.toFixed(XEUtils.floor(cellValue, digits), digits);\n                        break;\n                }\n            }\n            return getCellLabelVNs(renderOpts, params, cellValue);\n        },\n        renderTableDefault: defaultEditRender,\n        renderTableFilter: defaultFilterRender,\n        tableFilterDefaultMethod: handleInputFilterMethod\n    },\n    VxeNumberInput: {\n        tableAutoFocus: 'input',\n        renderTableEdit: defaultEditRender,\n        renderTableCell(renderOpts, params) {\n            var _a;\n            const { props = {} } = renderOpts;\n            const { row, column } = params;\n            const digits = props.digits || ((_a = getConfig().numberInput) === null || _a === void 0 ? void 0 : _a.digits) || 2;\n            let cellValue = XEUtils.get(row, column.field);\n            if (cellValue) {\n                switch (props.type) {\n                    case 'float':\n                        cellValue = XEUtils.toFixed(XEUtils.floor(cellValue, digits), digits);\n                        break;\n                }\n            }\n            return getCellLabelVNs(renderOpts, params, cellValue);\n        },\n        renderTableDefault: defaultEditRender,\n        renderTableFilter: defaultFilterRender,\n        tableFilterDefaultMethod: handleInputFilterMethod\n    },\n    VxeDatePicker: {\n        tableAutoFocus: 'input',\n        renderTableEdit: defaultEditRender,\n        renderTableCell(renderOpts, params) {\n            const { props = {} } = renderOpts;\n            const { row, column } = params;\n            let cellValue = XEUtils.get(row, column.field);\n            if (cellValue) {\n                switch (props.type) {\n                    case 'date':\n                    case 'week':\n                    case 'month':\n                    case 'quarter':\n                    case 'year':\n                        cellValue = getLabelFormatDate(cellValue, props);\n                        break;\n                }\n            }\n            return getCellLabelVNs(renderOpts, params, cellValue);\n        },\n        renderTableDefault: defaultEditRender,\n        renderTableFilter: defaultFilterRender,\n        tableFilterDefaultMethod: handleFilterMethod\n    },\n    VxeTextarea: {\n        tableAutoFocus: 'VxeTextarea'\n    },\n    VxeButton: {\n        renderTableDefault: buttonCellRender\n    },\n    VxeButtonGroup: {\n        renderTableDefault(renderOpts, params) {\n            const { options } = renderOpts;\n            return [\n                h(getDefaultComponent(renderOpts), Object.assign(Object.assign({ options }, getCellEditProps(renderOpts, params, null)), getComponentOns(renderOpts, params)))\n            ];\n        }\n    },\n    VxeSelect: {\n        tableAutoFocus: 'input',\n        renderTableEdit: defaultSelectEditRender,\n        renderTableDefault: defaultSelectEditRender,\n        renderTableCell(renderOpts, params) {\n            return getCellLabelVNs(renderOpts, params, getSelectCellValue(renderOpts, params));\n        },\n        renderTableFilter(renderOpts, params) {\n            const { column } = params;\n            const { options, optionProps, optionGroups, optionGroupProps } = renderOpts;\n            return column.filters.map((option, oIndex) => {\n                const optionValue = option.data;\n                return h(getDefaultComponent(renderOpts), Object.assign(Object.assign({ key: oIndex }, getCellEditFilterProps(renderOpts, params, optionValue, { options, optionProps, optionGroups, optionGroupProps })), getFilterOns(renderOpts, params, option)));\n            });\n        },\n        tableFilterDefaultMethod: handleFilterMethod,\n        tableExportMethod: handleExportSelectMethod\n    },\n    VxeTreeSelect: {\n        tableAutoFocus: 'input',\n        renderTableEdit: defaultTreeSelectEditRender,\n        renderTableCell(renderOpts, params) {\n            return getCellLabelVNs(renderOpts, params, getTreeSelectCellValue(renderOpts, params));\n        },\n        tableExportMethod: handleExportTreeSelectMethod\n    },\n    VxeIconPicker: {\n        tableAutoFocus: 'input',\n        renderTableEdit: defaultEditRender,\n        renderTableCell(renderOpts, params) {\n            const { row, column } = params;\n            const cellValue = XEUtils.get(row, column.field);\n            return h('i', {\n                class: cellValue\n            });\n        }\n    },\n    VxeRadioGroup: {\n        renderTableDefault: radioAndCheckboxEditRender\n    },\n    VxeCheckboxGroup: {\n        renderTableDefault: radioAndCheckboxEditRender\n    },\n    VxeSwitch: {\n        tableAutoFocus: 'button',\n        renderTableEdit: defaultEditRender,\n        renderTableDefault: defaultEditRender\n    },\n    VxeUpload: {\n        renderTableEdit: defaultEditRender,\n        renderTableCell: defaultEditRender,\n        renderTableDefault: defaultEditRender\n    },\n    VxeImage: {\n        renderTableDefault(renderOpts, params) {\n            const { row, column } = params;\n            const { props } = renderOpts;\n            const cellValue = getCellValue(row, column);\n            return [\n                h(getDefaultComponent(renderOpts), Object.assign(Object.assign(Object.assign({}, props), { src: cellValue }), getEditOns(renderOpts, params)))\n            ];\n        }\n    },\n    VxeImageGroup: {\n        renderTableDefault(renderOpts, params) {\n            const { row, column } = params;\n            const { props } = renderOpts;\n            const cellValue = getCellValue(row, column);\n            return [\n                h(getDefaultComponent(renderOpts), Object.assign(Object.assign(Object.assign({}, props), { urlList: cellValue }), getEditOns(renderOpts, params)))\n            ];\n        }\n    },\n    // 以下已废弃\n    $input: {\n        tableAutoFocus: '.vxe-input--inner',\n        renderTableEdit: oldEditRender,\n        renderTableCell(renderOpts, params) {\n            var _a;\n            const { props = {} } = renderOpts;\n            const { row, column } = params;\n            const digits = props.digits || ((_a = getConfig().input) === null || _a === void 0 ? void 0 : _a.digits) || 2;\n            let cellValue = XEUtils.get(row, column.field);\n            if (cellValue) {\n                switch (props.type) {\n                    case 'date':\n                    case 'week':\n                    case 'month':\n                    case 'year':\n                        cellValue = getLabelFormatDate(cellValue, props);\n                        break;\n                    case 'float':\n                        cellValue = XEUtils.toFixed(XEUtils.floor(cellValue, digits), digits);\n                        break;\n                }\n            }\n            return getCellLabelVNs(renderOpts, params, cellValue);\n        },\n        renderTableDefault: oldEditRender,\n        renderTableFilter: oldFilterRender,\n        tableFilterDefaultMethod: handleInputFilterMethod\n    },\n    $textarea: {\n        tableAutoFocus: '.vxe-textarea--inner'\n    },\n    $button: {\n        renderTableDefault: oldButtonEditRender\n    },\n    $buttons: {\n        renderTableDefault: oldButtonsEditRender\n    },\n    $select: {\n        tableAutoFocus: '.vxe-input--inner',\n        renderTableEdit: oldSelectEditRender,\n        renderTableDefault: oldSelectEditRender,\n        renderTableCell(renderOpts, params) {\n            return getCellLabelVNs(renderOpts, params, getSelectCellValue(renderOpts, params));\n        },\n        renderTableFilter(renderOpts, params) {\n            const { column } = params;\n            const { options, optionProps, optionGroups, optionGroupProps } = renderOpts;\n            return column.filters.map((option, oIndex) => {\n                const optionValue = option.data;\n                return h(getOldComponent(renderOpts), Object.assign(Object.assign({ key: oIndex }, getCellEditFilterProps(renderOpts, params, optionValue, { options, optionProps, optionGroups, optionGroupProps })), getFilterOns(renderOpts, params, option)));\n            });\n        },\n        tableFilterDefaultMethod: handleFilterMethod,\n        tableExportMethod: handleExportSelectMethod\n    },\n    $radio: {\n        tableAutoFocus: '.vxe-radio--input'\n    },\n    $checkbox: {\n        tableAutoFocus: '.vxe-checkbox--input'\n    },\n    $switch: {\n        tableAutoFocus: '.vxe-switch--button',\n        renderTableEdit: oldEditRender,\n        renderTableDefault: oldEditRender\n    }\n    // 以上已废弃\n});\n", "import { VxeUI } from '../ui';\nimport VxeTableComponent from './src/table';\nimport './module/filter/hook';\nimport './module/menu/hook';\nimport './module/edit/hook';\nimport './module/export/hook';\nimport './module/keyboard/hook';\nimport './module/validator/hook';\nimport './module/custom/hook';\nimport './render';\nexport const VxeTable = Object.assign({}, VxeTableComponent, {\n    install(app) {\n        app.component(VxeTableComponent.name, VxeTableComponent);\n    }\n});\nif (VxeUI.dynamicApp) {\n    VxeUI.dynamicApp.component(VxeTableComponent.name, VxeTableComponent);\n}\nVxeUI.component(VxeTableComponent);\nexport const Table = VxeTable;\nexport default VxeTable;\n"],
  "mappings": "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",
  "names": ["import_xe_utils", "XEUtils", "import_xe_utils", "renderType", "evnt", "XEUtils", "import_xe_utils", "renderType", "XEUtils", "import_xe_utils", "getI18n", "XEUtils", "column", "getI18n", "getIcon", "renderer", "panel_default", "import_xe_utils", "getI18n", "getIcon", "XEUtils", "import_xe_utils", "getI18n", "getIcon", "XEUtils", "column", "import_xe_utils", "panel_default", "XEUtils", "getConfig", "getI18n", "renderer", "XEUtils", "item", "storeData", "index", "treeExpandLazyLoadedMaps", "rowExpandLazyLoadedMaps", "rowid", "column", "params", "beforeEditMethod", "row", "rowOpts", "panel_default", "import_xe_utils", "renderer", "hooks", "XEUtils", "import_xe_utils", "hooks", "globalEvents", "GLOBAL_EVENT_KEYS", "XEUtils", "import_xe_utils", "getConfig", "renderer", "hooks", "getI18n", "column", "XEUtils", "item", "import_xe_utils", "getI18n", "hooks", "renderer", "XEUtils", "item", "type", "props", "import_xe_utils", "hooks", "XEUtils", "triggerEvent", "evnt", "import_xe_utils", "getConfig", "hooks", "XEUtils", "import_xe_utils", "XEUtils", "import_xe_utils", "getConfig", "renderer", "getI18n", "XEUtils", "table_default"]
}
